// Generated by the protocol buffer compiler. DO NOT EDIT!
// if you need to change something in code generator, please contact Alexander Lobas (alexanderlobas@yahoo.com)
package net.lasertag.operator.controller.net.controller;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.Message;

import java.io.IOException;

public class BaseServerApi {

  public ProtoServer.ProtocolDispatcher getProtocolDispatcher() {
    return mProtocolDispatcher;
  }

  public interface Connection {
    boolean sendDevGameStatRequest();
    boolean sendStressBeltSettings(StressBelt.StressBeltSettings message);
    boolean sendBobmProSettings(BombPro.bobmProSettings message);
    boolean sendBobmProBreakActions();
    boolean sendBombPlayersTable(BombPro.bombPlayersTable message);
    boolean sendReboot();
    boolean sendVersionRequest();
    boolean sendFirmwareTask(Firmware.FirmwareTask message);
    boolean sendBeginUpdateResources();
    boolean sendFinishUpdateResources();
    boolean sendGetStack();
    boolean sendGetBuffersState();
    boolean sendSomeData(RuntimeDbg.SomeData message);
    boolean sendRuntimeError(RuntimeDbg.RuntimeError message);
    boolean sendRuntimeGetErrors();
    boolean sendRuntimeClearErrorMessages();
    boolean sendEspReboot();
    boolean sendEspVersionRequest();
    boolean sendEspFirmwareTask(EspSrv.ESP_FirmwareTask message);
    boolean sendEspSomeData(EspSrv.ESP_SomeData message);
    boolean sendEspRuntimeError(EspSrv.ESP_RuntimeError message);
    boolean sendEspBeginUpdateResources();
    boolean sendEspFinishUpdateResources();
    void disconnect();
    Object getAttachment();
    ProtoServer.Connection getServerConnection();
    void setAttachment(Object attachment);
    int getConnectionId();
  }

  // Listener interfaces for incoming messages

  public interface OnDevGameStatResponseListener {
    void onDevGameStatResponseReceived(Connection connection, Base.DevGameStatResponse message);
  }

  public interface OnStressBeltSettingsListener {
    void onStressBeltSettingsReceived(Connection connection, StressBelt.StressBeltSettings message);
  }

  public interface OnStressBeltCheangeDamageModeListener {
    void onStressBeltCheangeDamageModeReceived(Connection connection, StressBelt.StressBeltCheangeDamageMode message);
  }

  public interface OnBobmProActionsListener {
    void onBobmProActionsReceived(Connection connection, BombPro.bobmProActions message);
  }

  public interface OnBombProHasBeenExplodedListener {
    void onBombProHasBeenExplodedReceived(Connection connection, BombPro.bombProHasBeenExploded message);
  }

  public interface OnBombProHasBeenInstalledListener {
    void onBombProHasBeenInstalledReceived(Connection connection, BombPro.bombProHasBeenInstalled message);
  }

  public interface OnBombProHasBeenDeinstalledListener {
    void onBombProHasBeenDeinstalledReceived(Connection connection, BombPro.bombProHasBeenDeinstalled message);
  }

  public interface OnBombProCheatHasBeenDetectedListener {
    void onBombProCheatHasBeenDetectedReceived(Connection connection, BombPro.bombProCheatHasBeenDetected message);
  }

  public interface OnBobmProSettingsListener {
    void onBobmProSettingsReceived(Connection connection, BombPro.bobmProSettings message);
  }

  public interface OnVersionReplyListener {
    void onVersionReplyReceived(Connection connection, Firmware.VersionReply message);
  }

  public interface OnUpdateResourcesReplyListener {
    void onUpdateResourcesReplyReceived(Connection connection, Firmware.UpdateResourcesReply message);
  }

  public interface OnFirmwareTaskReplyListener {
    void onFirmwareTaskReplyReceived(Connection connection, Firmware.FirmwareTaskReply message);
  }

  public interface OnStackStateListener {
    void onStackStateReceived(Connection connection, RuntimeDbg.StackState message);
  }

  public interface OnStackUsageListener {
    void onStackUsageReceived(Connection connection, RuntimeDbg.StackUsage message);
  }

  public interface OnAssertListener {
    void onAssertReceived(Connection connection, RuntimeDbg.Assert message);
  }

  public interface OnBuffersStateListener {
    void onBuffersStateReceived(Connection connection, RuntimeDbg.BuffersState message);
  }

  public interface OnSomeDataListener {
    void onSomeDataReceived(Connection connection, RuntimeDbg.SomeData message);
  }

  public interface OnRuntimeErrorListener {
    void onRuntimeErrorReceived(Connection connection, RuntimeDbg.RuntimeError message);
  }

  public interface OnRuntimeSystemSnapshotListener {
    void onRuntimeSystemSnapshotReceived(Connection connection, RuntimeDbg.RuntimeSystemSnapshot message);
  }

  public interface OnEspWiFiRssiListener {
    void onEspWiFiRssiReceived(Connection connection, EspSrv.ESP_WiFiRSSI message);
  }

  public interface OnEspAssertListener {
    void onEspAssertReceived(Connection connection, EspSrv.ESP_Assert message);
  }

  public interface OnEspVersionReplyListener {
    void onEspVersionReplyReceived(Connection connection, EspSrv.ESP_VersionReply message);
  }

  public interface OnEspFirmwareTaskReplyListener {
    void onEspFirmwareTaskReplyReceived(Connection connection, EspSrv.ESP_FirmwareTaskReply message);
  }

  public interface OnEspUpdateResourcesReplyListener {
    void onEspUpdateResourcesReplyReceived(Connection connection, EspSrv.ESP_UpdateResourcesReply message);
  }

  public interface OnEspSomeDataListener {
    void onEspSomeDataReceived(Connection connection, EspSrv.ESP_SomeData message);
  }

  public interface OnEspRuntimeErrorListener {
    void onEspRuntimeErrorReceived(Connection connection, EspSrv.ESP_RuntimeError message);
  }

  public interface OnConnectedListener {
    void onConnected(Connection connection);
  }

  public interface OnErrorListener {
    void onError(Connection connection, Throwable error);
  }

  public interface OnDisconnectedListener {
    void onDisconnected(Connection connection);
  }


  private volatile OnDevGameStatResponseListener onDevGameStatResponseListener = null;
  private volatile OnStressBeltSettingsListener onStressBeltSettingsListener = null;
  private volatile OnStressBeltCheangeDamageModeListener onStressBeltCheangeDamageModeListener = null;
  private volatile OnBobmProActionsListener onBobmProActionsListener = null;
  private volatile OnBombProHasBeenExplodedListener onBombProHasBeenExplodedListener = null;
  private volatile OnBombProHasBeenInstalledListener onBombProHasBeenInstalledListener = null;
  private volatile OnBombProHasBeenDeinstalledListener onBombProHasBeenDeinstalledListener = null;
  private volatile OnBombProCheatHasBeenDetectedListener onBombProCheatHasBeenDetectedListener = null;
  private volatile OnBobmProSettingsListener onBobmProSettingsListener = null;
  private volatile OnVersionReplyListener onVersionReplyListener = null;
  private volatile OnUpdateResourcesReplyListener onUpdateResourcesReplyListener = null;
  private volatile OnFirmwareTaskReplyListener onFirmwareTaskReplyListener = null;
  private volatile OnStackStateListener onStackStateListener = null;
  private volatile OnStackUsageListener onStackUsageListener = null;
  private volatile OnAssertListener onAssertListener = null;
  private volatile OnBuffersStateListener onBuffersStateListener = null;
  private volatile OnSomeDataListener onSomeDataListener = null;
  private volatile OnRuntimeErrorListener onRuntimeErrorListener = null;
  private volatile OnRuntimeSystemSnapshotListener onRuntimeSystemSnapshotListener = null;
  private volatile OnEspWiFiRssiListener onEspWiFiRssiListener = null;
  private volatile OnEspAssertListener onEspAssertListener = null;
  private volatile OnEspVersionReplyListener onEspVersionReplyListener = null;
  private volatile OnEspFirmwareTaskReplyListener onEspFirmwareTaskReplyListener = null;
  private volatile OnEspUpdateResourcesReplyListener onEspUpdateResourcesReplyListener = null;
  private volatile OnEspSomeDataListener onEspSomeDataListener = null;
  private volatile OnEspRuntimeErrorListener onEspRuntimeErrorListener = null;
  private volatile OnConnectedListener onConnectedListener = null;
  private volatile OnDisconnectedListener onDisconnectedListener = null;
  private volatile OnErrorListener onErrorListener = null;

  private void notifyDevGameStatResponseReceived(ProtoServer.Connection connection, Base.DevGameStatResponse message) {
    OnDevGameStatResponseListener localCopy = onDevGameStatResponseListener;
    if (localCopy != null)
      localCopy.onDevGameStatResponseReceived((Connection)connection.getApi(), message);
  }

  private void notifyStressBeltSettingsReceived(ProtoServer.Connection connection, StressBelt.StressBeltSettings message) {
    OnStressBeltSettingsListener localCopy = onStressBeltSettingsListener;
    if (localCopy != null)
      localCopy.onStressBeltSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyStressBeltCheangeDamageModeReceived(ProtoServer.Connection connection, StressBelt.StressBeltCheangeDamageMode message) {
    OnStressBeltCheangeDamageModeListener localCopy = onStressBeltCheangeDamageModeListener;
    if (localCopy != null)
      localCopy.onStressBeltCheangeDamageModeReceived((Connection)connection.getApi(), message);
  }

  private void notifyBobmProActionsReceived(ProtoServer.Connection connection, BombPro.bobmProActions message) {
    OnBobmProActionsListener localCopy = onBobmProActionsListener;
    if (localCopy != null)
      localCopy.onBobmProActionsReceived((Connection)connection.getApi(), message);
  }

  private void notifyBombProHasBeenExplodedReceived(ProtoServer.Connection connection, BombPro.bombProHasBeenExploded message) {
    OnBombProHasBeenExplodedListener localCopy = onBombProHasBeenExplodedListener;
    if (localCopy != null)
      localCopy.onBombProHasBeenExplodedReceived((Connection)connection.getApi(), message);
  }

  private void notifyBombProHasBeenInstalledReceived(ProtoServer.Connection connection, BombPro.bombProHasBeenInstalled message) {
    OnBombProHasBeenInstalledListener localCopy = onBombProHasBeenInstalledListener;
    if (localCopy != null)
      localCopy.onBombProHasBeenInstalledReceived((Connection)connection.getApi(), message);
  }

  private void notifyBombProHasBeenDeinstalledReceived(ProtoServer.Connection connection, BombPro.bombProHasBeenDeinstalled message) {
    OnBombProHasBeenDeinstalledListener localCopy = onBombProHasBeenDeinstalledListener;
    if (localCopy != null)
      localCopy.onBombProHasBeenDeinstalledReceived((Connection)connection.getApi(), message);
  }

  private void notifyBombProCheatHasBeenDetectedReceived(ProtoServer.Connection connection, BombPro.bombProCheatHasBeenDetected message) {
    OnBombProCheatHasBeenDetectedListener localCopy = onBombProCheatHasBeenDetectedListener;
    if (localCopy != null)
      localCopy.onBombProCheatHasBeenDetectedReceived((Connection)connection.getApi(), message);
  }

  private void notifyBobmProSettingsReceived(ProtoServer.Connection connection, BombPro.bobmProSettings message) {
    OnBobmProSettingsListener localCopy = onBobmProSettingsListener;
    if (localCopy != null)
      localCopy.onBobmProSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyVersionReplyReceived(ProtoServer.Connection connection, Firmware.VersionReply message) {
    OnVersionReplyListener localCopy = onVersionReplyListener;
    if (localCopy != null)
      localCopy.onVersionReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyUpdateResourcesReplyReceived(ProtoServer.Connection connection, Firmware.UpdateResourcesReply message) {
    OnUpdateResourcesReplyListener localCopy = onUpdateResourcesReplyListener;
    if (localCopy != null)
      localCopy.onUpdateResourcesReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyFirmwareTaskReplyReceived(ProtoServer.Connection connection, Firmware.FirmwareTaskReply message) {
    OnFirmwareTaskReplyListener localCopy = onFirmwareTaskReplyListener;
    if (localCopy != null)
      localCopy.onFirmwareTaskReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyStackStateReceived(ProtoServer.Connection connection, RuntimeDbg.StackState message) {
    OnStackStateListener localCopy = onStackStateListener;
    if (localCopy != null)
      localCopy.onStackStateReceived((Connection)connection.getApi(), message);
  }

  private void notifyStackUsageReceived(ProtoServer.Connection connection, RuntimeDbg.StackUsage message) {
    OnStackUsageListener localCopy = onStackUsageListener;
    if (localCopy != null)
      localCopy.onStackUsageReceived((Connection)connection.getApi(), message);
  }

  private void notifyAssertReceived(ProtoServer.Connection connection, RuntimeDbg.Assert message) {
    OnAssertListener localCopy = onAssertListener;
    if (localCopy != null)
      localCopy.onAssertReceived((Connection)connection.getApi(), message);
  }

  private void notifyBuffersStateReceived(ProtoServer.Connection connection, RuntimeDbg.BuffersState message) {
    OnBuffersStateListener localCopy = onBuffersStateListener;
    if (localCopy != null)
      localCopy.onBuffersStateReceived((Connection)connection.getApi(), message);
  }

  private void notifySomeDataReceived(ProtoServer.Connection connection, RuntimeDbg.SomeData message) {
    OnSomeDataListener localCopy = onSomeDataListener;
    if (localCopy != null)
      localCopy.onSomeDataReceived((Connection)connection.getApi(), message);
  }

  private void notifyRuntimeErrorReceived(ProtoServer.Connection connection, RuntimeDbg.RuntimeError message) {
    OnRuntimeErrorListener localCopy = onRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onRuntimeErrorReceived((Connection)connection.getApi(), message);
  }

  private void notifyRuntimeSystemSnapshotReceived(ProtoServer.Connection connection, RuntimeDbg.RuntimeSystemSnapshot message) {
    OnRuntimeSystemSnapshotListener localCopy = onRuntimeSystemSnapshotListener;
    if (localCopy != null)
      localCopy.onRuntimeSystemSnapshotReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspWiFiRssiReceived(ProtoServer.Connection connection, EspSrv.ESP_WiFiRSSI message) {
    OnEspWiFiRssiListener localCopy = onEspWiFiRssiListener;
    if (localCopy != null)
      localCopy.onEspWiFiRssiReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspAssertReceived(ProtoServer.Connection connection, EspSrv.ESP_Assert message) {
    OnEspAssertListener localCopy = onEspAssertListener;
    if (localCopy != null)
      localCopy.onEspAssertReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspVersionReplyReceived(ProtoServer.Connection connection, EspSrv.ESP_VersionReply message) {
    OnEspVersionReplyListener localCopy = onEspVersionReplyListener;
    if (localCopy != null)
      localCopy.onEspVersionReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspFirmwareTaskReplyReceived(ProtoServer.Connection connection, EspSrv.ESP_FirmwareTaskReply message) {
    OnEspFirmwareTaskReplyListener localCopy = onEspFirmwareTaskReplyListener;
    if (localCopy != null)
      localCopy.onEspFirmwareTaskReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspUpdateResourcesReplyReceived(ProtoServer.Connection connection, EspSrv.ESP_UpdateResourcesReply message) {
    OnEspUpdateResourcesReplyListener localCopy = onEspUpdateResourcesReplyListener;
    if (localCopy != null)
      localCopy.onEspUpdateResourcesReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspSomeDataReceived(ProtoServer.Connection connection, EspSrv.ESP_SomeData message) {
    OnEspSomeDataListener localCopy = onEspSomeDataListener;
    if (localCopy != null)
      localCopy.onEspSomeDataReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspRuntimeErrorReceived(ProtoServer.Connection connection, EspSrv.ESP_RuntimeError message) {
    OnEspRuntimeErrorListener localCopy = onEspRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onEspRuntimeErrorReceived((Connection)connection.getApi(), message);
  }


  public void setOnDevGameStatResponseListener(OnDevGameStatResponseListener listener)
  {
    onDevGameStatResponseListener = listener;
  }

  public void setOnStressBeltSettingsListener(OnStressBeltSettingsListener listener)
  {
    onStressBeltSettingsListener = listener;
  }

  public void setOnStressBeltCheangeDamageModeListener(OnStressBeltCheangeDamageModeListener listener)
  {
    onStressBeltCheangeDamageModeListener = listener;
  }

  public void setOnBobmProActionsListener(OnBobmProActionsListener listener)
  {
    onBobmProActionsListener = listener;
  }

  public void setOnBombProHasBeenExplodedListener(OnBombProHasBeenExplodedListener listener)
  {
    onBombProHasBeenExplodedListener = listener;
  }

  public void setOnBombProHasBeenInstalledListener(OnBombProHasBeenInstalledListener listener)
  {
    onBombProHasBeenInstalledListener = listener;
  }

  public void setOnBombProHasBeenDeinstalledListener(OnBombProHasBeenDeinstalledListener listener)
  {
    onBombProHasBeenDeinstalledListener = listener;
  }

  public void setOnBombProCheatHasBeenDetectedListener(OnBombProCheatHasBeenDetectedListener listener)
  {
    onBombProCheatHasBeenDetectedListener = listener;
  }

  public void setOnBobmProSettingsListener(OnBobmProSettingsListener listener)
  {
    onBobmProSettingsListener = listener;
  }

  public void setOnVersionReplyListener(OnVersionReplyListener listener)
  {
    onVersionReplyListener = listener;
  }

  public void setOnUpdateResourcesReplyListener(OnUpdateResourcesReplyListener listener)
  {
    onUpdateResourcesReplyListener = listener;
  }

  public void setOnFirmwareTaskReplyListener(OnFirmwareTaskReplyListener listener)
  {
    onFirmwareTaskReplyListener = listener;
  }

  public void setOnStackStateListener(OnStackStateListener listener)
  {
    onStackStateListener = listener;
  }

  public void setOnStackUsageListener(OnStackUsageListener listener)
  {
    onStackUsageListener = listener;
  }

  public void setOnAssertListener(OnAssertListener listener)
  {
    onAssertListener = listener;
  }

  public void setOnBuffersStateListener(OnBuffersStateListener listener)
  {
    onBuffersStateListener = listener;
  }

  public void setOnSomeDataListener(OnSomeDataListener listener)
  {
    onSomeDataListener = listener;
  }

  public void setOnRuntimeErrorListener(OnRuntimeErrorListener listener)
  {
    onRuntimeErrorListener = listener;
  }

  public void setOnRuntimeSystemSnapshotListener(OnRuntimeSystemSnapshotListener listener)
  {
    onRuntimeSystemSnapshotListener = listener;
  }

  public void setOnEspWiFiRssiListener(OnEspWiFiRssiListener listener)
  {
    onEspWiFiRssiListener = listener;
  }

  public void setOnEspAssertListener(OnEspAssertListener listener)
  {
    onEspAssertListener = listener;
  }

  public void setOnEspVersionReplyListener(OnEspVersionReplyListener listener)
  {
    onEspVersionReplyListener = listener;
  }

  public void setOnEspFirmwareTaskReplyListener(OnEspFirmwareTaskReplyListener listener)
  {
    onEspFirmwareTaskReplyListener = listener;
  }

  public void setOnEspUpdateResourcesReplyListener(OnEspUpdateResourcesReplyListener listener)
  {
    onEspUpdateResourcesReplyListener = listener;
  }

  public void setOnEspSomeDataListener(OnEspSomeDataListener listener)
  {
    onEspSomeDataListener = listener;
  }

  public void setOnEspRuntimeErrorListener(OnEspRuntimeErrorListener listener)
  {
    onEspRuntimeErrorListener = listener;
  }


  public void setOnConnectedListener(OnConnectedListener listener)
  {
    onConnectedListener = listener;
  }

  public void setOnErrorListener(OnErrorListener listener)
  {
    onErrorListener = listener;
  }

  public void setOnDisconnectedListener(OnDisconnectedListener listener)
  {
    onDisconnectedListener = listener;
  }


  ProtoServer.ProtocolDispatcher mProtocolDispatcher = new ProtoServer.ProtocolDispatcher() {
    @Override
    public Message parseMessage(int commandId, CodedInputStream inputStream) throws IOException {
      switch(commandId) {
      case 9: return Base.DevGameStatResponse.parser().parsePartialFrom(inputStream);
      case 36: return StressBelt.StressBeltSettings.parser().parsePartialFrom(inputStream);
      case 37: return StressBelt.StressBeltCheangeDamageMode.parser().parsePartialFrom(inputStream);
      case 151: return BombPro.bobmProActions.parser().parsePartialFrom(inputStream);
      case 152: return BombPro.bombProHasBeenExploded.parser().parsePartialFrom(inputStream);
      case 153: return BombPro.bombProHasBeenInstalled.parser().parsePartialFrom(inputStream);
      case 154: return BombPro.bombProHasBeenDeinstalled.parser().parsePartialFrom(inputStream);
      case 155: return BombPro.bombProCheatHasBeenDetected.parser().parsePartialFrom(inputStream);
      case 156: return BombPro.bobmProSettings.parser().parsePartialFrom(inputStream);
      case 1101: return Firmware.VersionReply.parser().parsePartialFrom(inputStream);
      case 1103: return Firmware.UpdateResourcesReply.parser().parsePartialFrom(inputStream);
      case 1104: return Firmware.FirmwareTaskReply.parser().parsePartialFrom(inputStream);
      case 1201: return RuntimeDbg.StackState.parser().parsePartialFrom(inputStream);
      case 1202: return RuntimeDbg.StackUsage.parser().parsePartialFrom(inputStream);
      case 1203: return RuntimeDbg.Assert.parser().parsePartialFrom(inputStream);
      case 1204: return RuntimeDbg.BuffersState.parser().parsePartialFrom(inputStream);
      case 1205: return RuntimeDbg.SomeData.parser().parsePartialFrom(inputStream);
      case 1206: return RuntimeDbg.RuntimeError.parser().parsePartialFrom(inputStream);
      case 1207: return RuntimeDbg.RuntimeSystemSnapshot.parser().parsePartialFrom(inputStream);
      case 2001: return EspSrv.ESP_WiFiRSSI.parser().parsePartialFrom(inputStream);
      case 2002: return EspSrv.ESP_Assert.parser().parsePartialFrom(inputStream);
      case 2003: return EspSrv.ESP_VersionReply.parser().parsePartialFrom(inputStream);
      case 2004: return EspSrv.ESP_FirmwareTaskReply.parser().parsePartialFrom(inputStream);
      case 2005: return EspSrv.ESP_UpdateResourcesReply.parser().parsePartialFrom(inputStream);
      case 2006: return EspSrv.ESP_SomeData.parser().parsePartialFrom(inputStream);
      case 2007: return EspSrv.ESP_RuntimeError.parser().parsePartialFrom(inputStream);
      default:
         return null;
      }
    }

    @Override
    public boolean dispatchMessage(ProtoServer.Connection connection, int commandId, Message message) {
      switch(commandId) {
      case 9: notifyDevGameStatResponseReceived(connection, (Base.DevGameStatResponse)message);
        return true;
      case 36: notifyStressBeltSettingsReceived(connection, (StressBelt.StressBeltSettings)message);
        return true;
      case 37: notifyStressBeltCheangeDamageModeReceived(connection, (StressBelt.StressBeltCheangeDamageMode)message);
        return true;
      case 151: notifyBobmProActionsReceived(connection, (BombPro.bobmProActions)message);
        return true;
      case 152: notifyBombProHasBeenExplodedReceived(connection, (BombPro.bombProHasBeenExploded)message);
        return true;
      case 153: notifyBombProHasBeenInstalledReceived(connection, (BombPro.bombProHasBeenInstalled)message);
        return true;
      case 154: notifyBombProHasBeenDeinstalledReceived(connection, (BombPro.bombProHasBeenDeinstalled)message);
        return true;
      case 155: notifyBombProCheatHasBeenDetectedReceived(connection, (BombPro.bombProCheatHasBeenDetected)message);
        return true;
      case 156: notifyBobmProSettingsReceived(connection, (BombPro.bobmProSettings)message);
        return true;
      case 1101: notifyVersionReplyReceived(connection, (Firmware.VersionReply)message);
        return true;
      case 1103: notifyUpdateResourcesReplyReceived(connection, (Firmware.UpdateResourcesReply)message);
        return true;
      case 1104: notifyFirmwareTaskReplyReceived(connection, (Firmware.FirmwareTaskReply)message);
        return true;
      case 1201: notifyStackStateReceived(connection, (RuntimeDbg.StackState)message);
        return true;
      case 1202: notifyStackUsageReceived(connection, (RuntimeDbg.StackUsage)message);
        return true;
      case 1203: notifyAssertReceived(connection, (RuntimeDbg.Assert)message);
        return true;
      case 1204: notifyBuffersStateReceived(connection, (RuntimeDbg.BuffersState)message);
        return true;
      case 1205: notifySomeDataReceived(connection, (RuntimeDbg.SomeData)message);
        return true;
      case 1206: notifyRuntimeErrorReceived(connection, (RuntimeDbg.RuntimeError)message);
        return true;
      case 1207: notifyRuntimeSystemSnapshotReceived(connection, (RuntimeDbg.RuntimeSystemSnapshot)message);
        return true;
      case 2001: notifyEspWiFiRssiReceived(connection, (EspSrv.ESP_WiFiRSSI)message);
        return true;
      case 2002: notifyEspAssertReceived(connection, (EspSrv.ESP_Assert)message);
        return true;
      case 2003: notifyEspVersionReplyReceived(connection, (EspSrv.ESP_VersionReply)message);
        return true;
      case 2004: notifyEspFirmwareTaskReplyReceived(connection, (EspSrv.ESP_FirmwareTaskReply)message);
        return true;
      case 2005: notifyEspUpdateResourcesReplyReceived(connection, (EspSrv.ESP_UpdateResourcesReply)message);
        return true;
      case 2006: notifyEspSomeDataReceived(connection, (EspSrv.ESP_SomeData)message);
        return true;
      case 2007: notifyEspRuntimeErrorReceived(connection, (EspSrv.ESP_RuntimeError)message);
        return true;
      default:
         return false;
      }
    }

    @Override
    public void notifyOnConnected(ProtoServer.Connection connection) {
      BaseConnection conn = new BaseConnection(connection);
      connection.setApi(conn);

      OnConnectedListener localCopy = onConnectedListener;
      if (localCopy != null)
        localCopy.onConnected(conn);
    }

    @Override
    public void notifyOnError(ProtoServer.Connection connection, Throwable error) {
      OnErrorListener localCopy = onErrorListener;
      if (localCopy != null)
        localCopy.onError((Connection)connection.getApi(), error);
    }

    @Override
    public void notifyOnDisconnected(ProtoServer.Connection connection) {
      OnDisconnectedListener localCopy = onDisconnectedListener;
      if (localCopy != null)
        localCopy.onDisconnected((Connection)connection.getApi());
    }
  };

  static class BaseConnection implements Connection {
    private ProtoServer.Connection mConnection;
    private ProtoServer mServer;
    private Object mAttachment;

    private BaseConnection(ProtoServer.Connection connection) {
      mConnection = connection;
      mServer = connection.getServer();
    }

    @Override
    public boolean sendDevGameStatRequest() {
    	return mServer.sendCommand(mConnection, 33, null);
    }

    @Override
    public boolean sendStressBeltSettings(StressBelt.StressBeltSettings message) {
    	return mServer.sendCommand(mConnection, 46, message);
    }

    @Override
    public boolean sendBobmProSettings(BombPro.bobmProSettings message) {
    	return mServer.sendCommand(mConnection, 156, message);
    }

    @Override
    public boolean sendBobmProBreakActions() {
    	return mServer.sendCommand(mConnection, 157, null);
    }

    @Override
    public boolean sendBombPlayersTable(BombPro.bombPlayersTable message) {
    	return mServer.sendCommand(mConnection, 158, message);
    }

    @Override
    public boolean sendReboot() {
    	return mServer.sendCommand(mConnection, 1101, null);
    }

    @Override
    public boolean sendVersionRequest() {
    	return mServer.sendCommand(mConnection, 1102, null);
    }

    @Override
    public boolean sendFirmwareTask(Firmware.FirmwareTask message) {
    	return mServer.sendCommand(mConnection, 1103, message);
    }

    @Override
    public boolean sendBeginUpdateResources() {
    	return mServer.sendCommand(mConnection, 1104, null);
    }

    @Override
    public boolean sendFinishUpdateResources() {
    	return mServer.sendCommand(mConnection, 1105, null);
    }

    @Override
    public boolean sendGetStack() {
    	return mServer.sendCommand(mConnection, 1201, null);
    }

    @Override
    public boolean sendGetBuffersState() {
    	return mServer.sendCommand(mConnection, 1202, null);
    }

    @Override
    public boolean sendSomeData(RuntimeDbg.SomeData message) {
    	return mServer.sendCommand(mConnection, 1203, message);
    }

    @Override
    public boolean sendRuntimeError(RuntimeDbg.RuntimeError message) {
    	return mServer.sendCommand(mConnection, 1204, message);
    }

    @Override
    public boolean sendRuntimeGetErrors() {
    	return mServer.sendCommand(mConnection, 1205, null);
    }

    @Override
    public boolean sendRuntimeClearErrorMessages() {
    	return mServer.sendCommand(mConnection, 1206, null);
    }

    @Override
    public boolean sendEspReboot() {
    	return mServer.sendCommand(mConnection, 2001, null);
    }

    @Override
    public boolean sendEspVersionRequest() {
    	return mServer.sendCommand(mConnection, 2002, null);
    }

    @Override
    public boolean sendEspFirmwareTask(EspSrv.ESP_FirmwareTask message) {
    	return mServer.sendCommand(mConnection, 2003, message);
    }

    @Override
    public boolean sendEspSomeData(EspSrv.ESP_SomeData message) {
    	return mServer.sendCommand(mConnection, 2005, message);
    }

    @Override
    public boolean sendEspRuntimeError(EspSrv.ESP_RuntimeError message) {
    	return mServer.sendCommand(mConnection, 2006, message);
    }

    @Override
    public boolean sendEspBeginUpdateResources() {
    	return mServer.sendCommand(mConnection, 2007, null);
    }

    @Override
    public boolean sendEspFinishUpdateResources() {
    	return mServer.sendCommand(mConnection, 2008, null);
    }

    @Override
    public void disconnect() {
      mServer.disconnectClient(mConnection);
    }

    @Override
    public Object getAttachment() {
      return mAttachment;
    }

    @Override
    public void setAttachment(Object attachment) {
      mAttachment = attachment;
    }

    @Override
    public int getConnectionId() {
      return mConnection.getId();
    }

    @Override
    public ProtoServer.Connection getServerConnection() {
      return mConnection;
    }

  }
  public static String getSendCommandName(int commandId) {
    switch(commandId) {
    case 33: return "DevGameStatRequest";
    case 46: return "StressBeltSettings";
    case 156: return "BobmProSettings";
    case 157: return "BobmProBreakActions";
    case 158: return "BombPlayersTable";
    case 1101: return "Reboot";
    case 1102: return "VersionRequest";
    case 1103: return "FirmwareTask";
    case 1104: return "BeginUpdateResources";
    case 1105: return "FinishUpdateResources";
    case 1201: return "GetStack";
    case 1202: return "GetBuffersState";
    case 1203: return "SomeData";
    case 1204: return "RuntimeError";
    case 1205: return "RuntimeGetErrors";
    case 1206: return "RuntimeClearErrorMessages";
    case 2001: return "EspReboot";
    case 2002: return "EspVersionRequest";
    case 2003: return "EspFirmwareTask";
    case 2005: return "EspSomeData";
    case 2006: return "EspRuntimeError";
    case 2007: return "EspBeginUpdateResources";
    case 2008: return "EspFinishUpdateResources";
    default:
       return "";
    }
  }

  public static String getRecvCommandName(int commandId) {
    switch(commandId) {
    case 0: return "DevGameStatResponse";
    case 46: return "StressBeltSettings";
    case 0: return "StressBeltCheangeDamageMode";
    case 0: return "BobmProActions";
    case 0: return "BombProHasBeenExploded";
    case 0: return "BombProHasBeenInstalled";
    case 0: return "BombProHasBeenDeinstalled";
    case 0: return "BombProCheatHasBeenDetected";
    case 156: return "BobmProSettings";
    case 0: return "VersionReply";
    case 0: return "UpdateResourcesReply";
    case 0: return "FirmwareTaskReply";
    case 0: return "StackState";
    case 0: return "StackUsage";
    case 0: return "Assert";
    case 0: return "BuffersState";
    case 1203: return "SomeData";
    case 1204: return "RuntimeError";
    case 0: return "RuntimeSystemSnapshot";
    case 0: return "EspWiFiRssi";
    case 0: return "EspAssert";
    case 0: return "EspVersionReply";
    case 0: return "EspFirmwareTaskReply";
    case 0: return "EspUpdateResourcesReply";
    case 2005: return "EspSomeData";
    case 2006: return "EspRuntimeError";
    default:
       return ;
    }
  }

}
