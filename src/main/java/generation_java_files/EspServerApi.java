// Generated by the protocol buffer compiler. DO NOT EDIT!
// if you need to change something in code generator, please contact Alexander Lobas (alexanderlobas@yahoo.com)
package generation_java_files;

import build.generated.source.proto.main.java.*;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.Message;
import proto_server_client.servers.ProtoServer;

import java.io.IOException;

public class EspServerApi {

  public ProtoServer.ProtocolDispatcher getProtocolDispatcher() {
    return mProtocolDispatcher;
  }

  public interface Connection {
    boolean sendStartGame(Base.StartGame message);
    boolean sendStopGame();
    boolean sendPauseGame();
    boolean sendChangeId(Base.ChangeId message);
    boolean sendSetVolume(Multimedia.SetVolume message);
    boolean sendPing();
    boolean sendUpdateDev();
    boolean sendSetLanguage(Base.setLanguage message);
    boolean sendPlaySound(Multimedia.PlaySound message);
    boolean sendStopSound(Multimedia.StopSound message);
    boolean sendGetSoundsInfo();
    boolean sendSendDevType(Base.SendDevType message);
    boolean sendTurnOffDevice();
    boolean sendGetInfoSlaves();
    boolean sendFsInfo();
    boolean sendFormatFs();
    boolean sendLsDir(Filesystem.LsDir message);
    boolean sendFileInfo(Filesystem.FileInfo message);
    boolean sendDelFile(Filesystem.DelFile message);
    boolean sendReadFile(Filesystem.ReadFile message);
    boolean sendWriteFile(Filesystem.WriteFile message);
    boolean sendCalcMd5(Filesystem.CalcMD5 message);
    boolean sendStatFromPtrk(PTRKMilitary.StatFromPTRK message);
    boolean sendPtrkSettings(PTRKMilitary.PTRKSettings message);
    boolean sendReloadPtrk(PTRKMilitary.ReloadPtrk message);
    boolean sendSettingsTarget(TargetMilitary.SettingsTarget message);
    boolean sendShowTarget();
    boolean sendHideTarget();
    boolean sendStatisticsTarget(TargetMilitary.StatisticsTarget message);
    boolean sendResetError(TargetMilitary.ResetError message);
    boolean sendSettingsPanzer(PanzerMilitary.SettingsPanzer message);
    boolean sendStatisticsPanzerGun(PanzerMilitary.StatisticsPanzerGun message);
    boolean sendStatisticsPanzerCannon(PanzerMilitary.StatisticsPanzerCannon message);
    boolean sendGetStatisticsPanzerGun();
    boolean sendGetStatisticsPanzerCannon();
    boolean sendGetSettingsPanzer();
    boolean sendMovingCartForwardDirection();
    boolean sendMovingCartReverseDirection();
    boolean sendStopMovingCart();
    boolean sendMineThrowerSettings(MineThrower.MineThrowerSettings message);
    boolean sendEspConectionState(Esp.ESPConectionState message);
    boolean sendEspConnectToTcpReply(Esp.ESPConnectToTCPReply message);
    boolean sendEspTcpConfirmation(Esp.ESPTcpConfirmation message);
    boolean sendEspServerDiscovered(Esp.ESPServerDiscovered message);
    boolean sendEspRssiForNetworkName(Esp.ESPRssiForNetworkName message);
    boolean sendEspWifiAccessPoint(Esp.ESPWifiAccessPoint message);
    boolean sendEspKillWifiAccessPointReply(Esp.ESPKillWifiAccessPointReply message);
    boolean sendReboot();
    boolean sendVersionRequest();
    boolean sendFirmwareTask(Firmware.FirmwareTask message);
    boolean sendBeginUpdateResources();
    boolean sendFinishUpdateResources();
    boolean sendGetStack();
    boolean sendGetBuffersState();
    boolean sendSomeData(RuntimeDbg.SomeData message);
    boolean sendRuntimeError(RuntimeDbg.RuntimeError message);
    boolean sendRuntimeGetErrors();
    boolean sendRuntimeClearErrorMessages();
    boolean sendEspReboot();
    boolean sendEspVersionRequest();
    boolean sendEspFirmwareTask(EspSrv.ESP_FirmwareTask message);
    boolean sendEspSomeData(EspSrv.ESP_SomeData message);
    boolean sendEspRuntimeError(EspSrv.ESP_RuntimeError message);
    boolean sendEspBeginUpdateResources();
    boolean sendEspFinishUpdateResources();
    boolean sendRsHelloFromMaster(RsMilitary.RsHelloFromMaster message);
    boolean sendRsSendIr(RsMilitary.RsSendIr message);
    boolean sendRsSystemCommand(RsMilitary.RsSystemCommand message);
    boolean sendRsChangeId(RsMilitary.RsChangeID message);
    boolean sendRsSetIndication(RsMilitary.RsSetIndication message);
    boolean sendRsPowerOn();
    boolean sendRsPowerOff();
    boolean sendRsStressBeltSettings(RsMilitary.RsStressBeltSettings message);
    boolean sendRsSendIrCustom(RsMilitary.RsSendIrCustom message);
    boolean sendRsIlluminationLevelQuery();
    boolean sendRsButtonsStateQuery();
    boolean sendRsVisibleLaserOn(RsMilitary.RsVisibleLaserOn message);
    boolean sendRsGetGps();
    boolean sendRsGetCompas();
    boolean sendRsGetStatus();
    boolean sendPlaySoundToSlave(RsMilitary.PlaySoundToSlave message);
    boolean sendSetPosition(RsMilitary.SetPosition message);
    boolean sendBrakeOn();
    boolean sendBrakeOff();
    boolean sendRotationBySectorOnTime(RsMilitary.RotationBySectorOnTime message);
    boolean sendStopRotation();
    boolean sendWiredHelloFromMaster(WiredConnection.WiredHelloFromMaster message);
    boolean sendWiredActionPyrotechny(WiredConnection.WiredActionPyrotechny message);
    boolean sendWiredSettingsIrEmitter(WiredConnection.WiredSettingsIrEmitter message);
    boolean sendWiredSendSequenceIrPackets(WiredConnection.WiredSendSequenceIrPackets message);
    boolean sendWiredSendIrPacket(WiredConnection.WiredSendIrPacket message);
    boolean sendWiredChangeId(WiredConnection.WiredChangeID message);
    boolean sendWiredSettingsTargetShooter(WiredConnection.WiredSettingsTargetShooter message);
    boolean sendWiredTargetShooterAction(WiredConnection.WiredTargetShooterAction message);
    boolean sendWiredActionGrenadeThrower();
    boolean sendWiredSetIndication(WiredConnection.WiredSetIndication message);
    boolean sendWiredPlaySound(WiredConnection.WiredPlaySound message);
    boolean sendWiredStopActions();
    boolean sendGetBatteryLevel();
    boolean sendGetSettings();
    boolean sendChangeTeam(CommonMilitary.ChangeTeam message);
    boolean sendKillPlayer(CommonMilitary.KillPlayer message);
    boolean sendResetAllErrors();
    boolean sendSetTypeExercise(CommonMilitary.SetTypeExercise message);
    boolean sendStatFromKit(KitMilitary.StatFromKit message);
    boolean sendWeaponStat(KitMilitary.WeaponStat message);
    boolean sendKitSettings(KitMilitary.KitSettings message);
    boolean sendStressBeltSettings(KitMilitary.StressBeltSettings message);
    boolean sendWeaponSettings(KitMilitary.WeaponSettings message);
    boolean sendGetAllStat();
    boolean sendSilentMode(KitMilitary.SilentMode message);
    boolean sendGetActivatedMines();
    boolean sendGetDeactivatedMines();
    boolean sendGetInfoFromHingedBlock(KitMilitary.GetInfoFromHingedBlock message);
    boolean sendIrEmitterSettings(KitMilitary.IrEmitterSettings message);
    boolean sendIrEmitterStatistic(KitMilitary.IrEmitterStatistic message);
    boolean sendSetDamageAppropriateToWeapon(KitMilitary.SetDamageAppropriateToWeapon message);
    boolean sendSaveTableDamage();
    boolean sendSetTypeVehicle(KitMilitary.SetTypeVehicle message);
    boolean sendGetQuantityBlocksPos(KitMilitary.GetQuantityBlocksPos message);
    boolean sendGetBlockByTimePos(KitMilitary.GetBlockByTimePos message);
    boolean sendDeleteBlocksPos(KitMilitary.DeleteBlocksPos message);
    boolean sendGetAllEventsPzrk();
    boolean sendPzrkSetting(PZRKMilitary.PzrkSetting message);
    boolean sendSettingAntiSniper(AntiSniper.SettingAntiSniper message);
    boolean sendCommand(AntiSniper.Command message);
    boolean sendDefeatTarget();
    boolean sendSetDwmPanId(IndoorNavigation.SetDwmPanId message);
    void disconnect();
    Object getAttachment();
    ProtoServer.Connection getServerConnection();
    void setAttachment(Object attachment);
    int getConnectionId();
  }

  // Listener interfaces for incoming messages

  public interface OnHelloFromDevListener {
    void onHelloFromDevReceived(Connection connection, Base.HelloFromDev message);
  }

  public interface OnChangeIdListener {
    void onChangeIdReceived(Connection connection, Base.ChangeId message);
  }

  public interface OnPingListener {
    void onPingReceived(Connection connection);
  }

  public interface OnSoundsInfoResponceListener {
    void onSoundsInfoResponceReceived(Connection connection, Multimedia.SoundsInfoResponce message);
  }

  public interface OnStateVolumeListener {
    void onStateVolumeReceived(Connection connection, Multimedia.StateVolume message);
  }

  public interface OnDisconnectingClientListener {
    void onDisconnectingClientReceived(Connection connection, Base.DisconnectingClient message);
  }

  public interface OnSlavesInfoResponceListener {
    void onSlavesInfoResponceReceived(Connection connection, Slave.SlavesInfoResponce message);
  }

  public interface OnSlaveDisconnectedListener {
    void onSlaveDisconnectedReceived(Connection connection, Slave.SlaveDisconnected message);
  }

  public interface OnSlaveInfoListener {
    void onSlaveInfoReceived(Connection connection, Slave.SlaveInfo message);
  }

  public interface OnFsInfoReplyListener {
    void onFsInfoReplyReceived(Connection connection, Filesystem.FSInfoReply message);
  }

  public interface OnFormatFsReplyListener {
    void onFormatFsReplyReceived(Connection connection, Filesystem.FormatFSReply message);
  }

  public interface OnLsDirReplyListener {
    void onLsDirReplyReceived(Connection connection, Filesystem.LsDirReply message);
  }

  public interface OnFileInfoReplyListener {
    void onFileInfoReplyReceived(Connection connection, Filesystem.FileInfoReply message);
  }

  public interface OnDelFileReplyListener {
    void onDelFileReplyReceived(Connection connection, Filesystem.DelFileReply message);
  }

  public interface OnReadFileReplyListener {
    void onReadFileReplyReceived(Connection connection, Filesystem.ReadFileReply message);
  }

  public interface OnWriteFileReplyListener {
    void onWriteFileReplyReceived(Connection connection, Filesystem.WriteFileReply message);
  }

  public interface OnCalcMd5ReplyListener {
    void onCalcMd5ReplyReceived(Connection connection, Filesystem.CalcMD5Reply message);
  }

  public interface OnStatFromPtrkListener {
    void onStatFromPtrkReceived(Connection connection, PTRKMilitary.StatFromPTRK message);
  }

  public interface OnPtrkSettingsListener {
    void onPtrkSettingsReceived(Connection connection, PTRKMilitary.PTRKSettings message);
  }

  public interface OnReloadPtrkListener {
    void onReloadPtrkReceived(Connection connection, PTRKMilitary.ReloadPtrk message);
  }

  public interface OnLaunchingRocketListener {
    void onLaunchingRocketReceived(Connection connection);
  }

  public interface OnStatusFlightRocketListener {
    void onStatusFlightRocketReceived(Connection connection, PTRKMilitary.StatusFlightRocket message);
  }

  public interface OnStatusEndFlightRocketListener {
    void onStatusEndFlightRocketReceived(Connection connection, PTRKMilitary.StatusEndFlightRocket message);
  }

  public interface OnSettingsTargetListener {
    void onSettingsTargetReceived(Connection connection, TargetMilitary.SettingsTarget message);
  }

  public interface OnStatisticsTargetListener {
    void onStatisticsTargetReceived(Connection connection, TargetMilitary.StatisticsTarget message);
  }

  public interface OnPositionOfTargetListener {
    void onPositionOfTargetReceived(Connection connection, TargetMilitary.PositionOfTarget message);
  }

  public interface OnErrorsOfTargetListener {
    void onErrorsOfTargetReceived(Connection connection, TargetMilitary.ErrorsOfTarget message);
  }

  public interface OnSettingsPanzerListener {
    void onSettingsPanzerReceived(Connection connection, PanzerMilitary.SettingsPanzer message);
  }

  public interface OnStatisticsPanzerGunListener {
    void onStatisticsPanzerGunReceived(Connection connection, PanzerMilitary.StatisticsPanzerGun message);
  }

  public interface OnStatisticsPanzerCannonListener {
    void onStatisticsPanzerCannonReceived(Connection connection, PanzerMilitary.StatisticsPanzerCannon message);
  }

  public interface OnStopMovingCartListener {
    void onStopMovingCartReceived(Connection connection);
  }

  public interface OnMineThrowerStatListener {
    void onMineThrowerStatReceived(Connection connection, MineThrower.MineThrowerStat message);
  }

  public interface OnEspConnectToApListener {
    void onEspConnectToApReceived(Connection connection, Esp.ESPConnectToAP message);
  }

  public interface OnEspConnectToTcpListener {
    void onEspConnectToTcpReceived(Connection connection, Esp.ESPConnectToTCP message);
  }

  public interface OnEspSendByUdpListener {
    void onEspSendByUdpReceived(Connection connection, Esp.ESPSendByUDP message);
  }

  public interface OnEspDiscoverServersListener {
    void onEspDiscoverServersReceived(Connection connection, Esp.ESPDiscoverServers message);
  }

  public interface OnEspSendLogByUdpListener {
    void onEspSendLogByUdpReceived(Connection connection, Esp.ESPSendLogByUDP message);
  }

  public interface OnEspConnectToTcpReplyListener {
    void onEspConnectToTcpReplyReceived(Connection connection, Esp.ESPConnectToTCPReply message);
  }

  public interface OnEspTcpConfirmationListener {
    void onEspTcpConfirmationReceived(Connection connection, Esp.ESPTcpConfirmation message);
  }

  public interface OnEspGetRssiByNetworkNameListener {
    void onEspGetRssiByNetworkNameReceived(Connection connection, Esp.ESPGetRssiByNetworkName message);
  }

  public interface OnEspScanWifiByChannelListener {
    void onEspScanWifiByChannelReceived(Connection connection, Esp.ESPScanWifiByChannel message);
  }

  public interface OnEspSetWifiAccessPointListener {
    void onEspSetWifiAccessPointReceived(Connection connection, Esp.ESPSetWifiAccessPoint message);
  }

  public interface OnEspKillWifiAccessPointListener {
    void onEspKillWifiAccessPointReceived(Connection connection);
  }

  public interface OnVersionReplyListener {
    void onVersionReplyReceived(Connection connection, Firmware.VersionReply message);
  }

  public interface OnUpdateResourcesReplyListener {
    void onUpdateResourcesReplyReceived(Connection connection, Firmware.UpdateResourcesReply message);
  }

  public interface OnFirmwareTaskReplyListener {
    void onFirmwareTaskReplyReceived(Connection connection, Firmware.FirmwareTaskReply message);
  }

  public interface OnStackStateListener {
    void onStackStateReceived(Connection connection, RuntimeDbg.StackState message);
  }

  public interface OnStackUsageListener {
    void onStackUsageReceived(Connection connection, RuntimeDbg.StackUsage message);
  }

  public interface OnAssertListener {
    void onAssertReceived(Connection connection, RuntimeDbg.Assert message);
  }

  public interface OnBuffersStateListener {
    void onBuffersStateReceived(Connection connection, RuntimeDbg.BuffersState message);
  }

  public interface OnSomeDataListener {
    void onSomeDataReceived(Connection connection, RuntimeDbg.SomeData message);
  }

  public interface OnRuntimeErrorListener {
    void onRuntimeErrorReceived(Connection connection, RuntimeDbg.RuntimeError message);
  }

  public interface OnRuntimeSystemSnapshotListener {
    void onRuntimeSystemSnapshotReceived(Connection connection, RuntimeDbg.RuntimeSystemSnapshot message);
  }

  public interface OnEspWiFiRssiListener {
    void onEspWiFiRssiReceived(Connection connection, EspSrv.ESP_WiFiRSSI message);
  }

  public interface OnEspAssertListener {
    void onEspAssertReceived(Connection connection, EspSrv.ESP_Assert message);
  }

  public interface OnEspVersionReplyListener {
    void onEspVersionReplyReceived(Connection connection, EspSrv.ESP_VersionReply message);
  }

  public interface OnEspFirmwareTaskReplyListener {
    void onEspFirmwareTaskReplyReceived(Connection connection, EspSrv.ESP_FirmwareTaskReply message);
  }

  public interface OnEspUpdateResourcesReplyListener {
    void onEspUpdateResourcesReplyReceived(Connection connection, EspSrv.ESP_UpdateResourcesReply message);
  }

  public interface OnEspSomeDataListener {
    void onEspSomeDataReceived(Connection connection, EspSrv.ESP_SomeData message);
  }

  public interface OnEspRuntimeErrorListener {
    void onEspRuntimeErrorReceived(Connection connection, EspSrv.ESP_RuntimeError message);
  }

  public interface OnRsHelloFromDeviceListener {
    void onRsHelloFromDeviceReceived(Connection connection, RsMilitary.RsHelloFromDevice message);
  }

  public interface OnRsReciveIrListener {
    void onRsReciveIrReceived(Connection connection, RsMilitary.RsReciveIr message);
  }

  public interface OnRsButStateListener {
    void onRsButStateReceived(Connection connection, RsMilitary.RsButState message);
  }

  public interface OnRsStressBeltSettingsListener {
    void onRsStressBeltSettingsReceived(Connection connection, RsMilitary.RsStressBeltSettings message);
  }

  public interface OnRsStressBeltCheangeDamageModeListener {
    void onRsStressBeltCheangeDamageModeReceived(Connection connection, RsMilitary.RsStressBeltCheangeDamageMode message);
  }

  public interface OnRsSlaveConnectedListener {
    void onRsSlaveConnectedReceived(Connection connection, RsMilitary.RsSlaveConnected message);
  }

  public interface OnRsSlaveDisconnectedListener {
    void onRsSlaveDisconnectedReceived(Connection connection, RsMilitary.RsSlaveDisconnected message);
  }

  public interface OnRsSlaveBatteryLevelListener {
    void onRsSlaveBatteryLevelReceived(Connection connection, RsMilitary.RsSlaveBatteryLevel message);
  }

  public interface OnRsIlluminationLevelListener {
    void onRsIlluminationLevelReceived(Connection connection, RsMilitary.RsIlluminationLevel message);
  }

  public interface OnRsSwitchStateListener {
    void onRsSwitchStateReceived(Connection connection, RsMilitary.RsSwitchState message);
  }

  public interface OnRsGpsCoordinatesListener {
    void onRsGpsCoordinatesReceived(Connection connection, RsMilitary.RsGpsCoordinates message);
  }

  public interface OnRsCompasDataListener {
    void onRsCompasDataReceived(Connection connection, RsMilitary.RsCompasData message);
  }

  public interface OnRsStatusCompasIrEmiterListener {
    void onRsStatusCompasIrEmiterReceived(Connection connection, RsMilitary.RsStatusCompasIrEmiter message);
  }

  public interface OnRsPowerOnListener {
    void onRsPowerOnReceived(Connection connection);
  }

  public interface OnRsPowerOffListener {
    void onRsPowerOffReceived(Connection connection);
  }

  public interface OnSetPositionComplitedListener {
    void onSetPositionComplitedReceived(Connection connection);
  }

  public interface OnRotationComplitedListener {
    void onRotationComplitedReceived(Connection connection);
  }

  public interface OnAzimuthListener {
    void onAzimuthReceived(Connection connection, RsMilitary.Azimuth message);
  }

  public interface OnRsDeviceErrorListener {
    void onRsDeviceErrorReceived(Connection connection, RsMilitary.RsDeviceError message);
  }

  public interface OnWiredHelloFromSlaveListener {
    void onWiredHelloFromSlaveReceived(Connection connection, WiredConnection.WiredHelloFromSlave message);
  }

  public interface OnWiredStateByDeviceListener {
    void onWiredStateByDeviceReceived(Connection connection, WiredConnection.WiredStateByDevice message);
  }

  public interface OnWiredInfoFromPyrotechnyListener {
    void onWiredInfoFromPyrotechnyReceived(Connection connection, WiredConnection.WiredInfoFromPyrotechny message);
  }

  public interface OnWiredStateByIrListener {
    void onWiredStateByIrReceived(Connection connection, WiredConnection.WiredStateByIr message);
  }

  public interface OnWiredInfoFromTargetShooterListener {
    void onWiredInfoFromTargetShooterReceived(Connection connection, WiredConnection.WiredInfoFromTargetShooter message);
  }

  public interface OnWiredInfoMovingEventListener {
    void onWiredInfoMovingEventReceived(Connection connection, WiredConnection.WiredInfoMovingEvent message);
  }

  public interface OnWiredInfoFromGrenadeThrowerListener {
    void onWiredInfoFromGrenadeThrowerReceived(Connection connection, WiredConnection.WiredInfoFromGrenadeThrower message);
  }

  public interface OnBatteryLevelListener {
    void onBatteryLevelReceived(Connection connection, CommonMilitary.BatteryLevel message);
  }

  public interface OnGpsCoordinateListener {
    void onGpsCoordinateReceived(Connection connection, CommonMilitary.GPSCoordinate message);
  }

  public interface OnSetTypeExerciseListener {
    void onSetTypeExerciseReceived(Connection connection, CommonMilitary.SetTypeExercise message);
  }

  public interface OnSpatialPositionListener {
    void onSpatialPositionReceived(Connection connection, CommonMilitary.SpatialPosition message);
  }

  public interface OnStatByIdListener {
    void onStatByIdReceived(Connection connection, KitMilitary.StatById message);
  }

  public interface OnStatByIdRepeatedListener {
    void onStatByIdRepeatedReceived(Connection connection, KitMilitary.StatByIdRepeated message);
  }

  public interface OnSlaveBatteryLevelListener {
    void onSlaveBatteryLevelReceived(Connection connection, KitMilitary.SlaveBatteryLevel message);
  }

  public interface OnStatFromKitListener {
    void onStatFromKitReceived(Connection connection, KitMilitary.StatFromKit message);
  }

  public interface OnWeaponStatListener {
    void onWeaponStatReceived(Connection connection, KitMilitary.WeaponStat message);
  }

  public interface OnKitSettingsListener {
    void onKitSettingsReceived(Connection connection, KitMilitary.KitSettings message);
  }

  public interface OnStressBeltSettingsListener {
    void onStressBeltSettingsReceived(Connection connection, KitMilitary.StressBeltSettings message);
  }

  public interface OnWeaponSettingsListener {
    void onWeaponSettingsReceived(Connection connection, KitMilitary.WeaponSettings message);
  }

  public interface OnStatisticIsOverListener {
    void onStatisticIsOverReceived(Connection connection);
  }

  public interface OnTankMineActivatedListener {
    void onTankMineActivatedReceived(Connection connection, KitMilitary.TankMineActivated message);
  }

  public interface OnTankMineDeactivatedListener {
    void onTankMineDeactivatedReceived(Connection connection, KitMilitary.TankMineDeactivated message);
  }

  public interface OnInfoActivatedMinesIsOverListener {
    void onInfoActivatedMinesIsOverReceived(Connection connection);
  }

  public interface OnInfoDeactivatedMinesIsOverListener {
    void onInfoDeactivatedMinesIsOverReceived(Connection connection);
  }

  public interface OnInfoFromHingedBlockListener {
    void onInfoFromHingedBlockReceived(Connection connection, KitMilitary.InfoFromHingedBlock message);
  }

  public interface OnIrEmitterSettingsListener {
    void onIrEmitterSettingsReceived(Connection connection, KitMilitary.IrEmitterSettings message);
  }

  public interface OnIrEmitterStatisticListener {
    void onIrEmitterStatisticReceived(Connection connection, KitMilitary.IrEmitterStatistic message);
  }

  public interface OnSetTypeVehicleListener {
    void onSetTypeVehicleReceived(Connection connection, KitMilitary.SetTypeVehicle message);
  }

  public interface OnMinesActivatedListener {
    void onMinesActivatedReceived(Connection connection, KitMilitary.MinesActivated message);
  }

  public interface OnMinesDeactivatedListener {
    void onMinesDeactivatedReceived(Connection connection, KitMilitary.MinesDeactivated message);
  }

  public interface OnResponseQuantityBlocksPosListener {
    void onResponseQuantityBlocksPosReceived(Connection connection, KitMilitary.ResponseQuantityBlocksPos message);
  }

  public interface OnResponseBlockByTimePosListener {
    void onResponseBlockByTimePosReceived(Connection connection, KitMilitary.ResponseBlockByTimePos message);
  }

  public interface OnIrCommutatorIdListener {
    void onIrCommutatorIdReceived(Connection connection, KitMilitary.IrCommutatorID message);
  }

  public interface OnPzrkEventListener {
    void onPzrkEventReceived(Connection connection, PZRKMilitary.PzrkEvent message);
  }

  public interface OnPzrkEventsIsOverListener {
    void onPzrkEventsIsOverReceived(Connection connection);
  }

  public interface OnPzrkSettingListener {
    void onPzrkSettingReceived(Connection connection, PZRKMilitary.PzrkSetting message);
  }

  public interface OnGpsInfoOfTargetPzrkListener {
    void onGpsInfoOfTargetPzrkReceived(Connection connection, PZRKMilitary.GpsInfoOfTargetPzrk message);
  }

  public interface OnTargetPzrkConnectedListener {
    void onTargetPzrkConnectedReceived(Connection connection, PZRKMilitary.TargetPzrkConnected message);
  }

  public interface OnTargetPzrkDisconnectedListener {
    void onTargetPzrkDisconnectedReceived(Connection connection, PZRKMilitary.TargetPzrkDisconnected message);
  }

  public interface OnSettingAntiSniperListener {
    void onSettingAntiSniperReceived(Connection connection, AntiSniper.SettingAntiSniper message);
  }

  public interface OnCommandListener {
    void onCommandReceived(Connection connection, AntiSniper.Command message);
  }

  public interface OnAntiSniperErrorListener {
    void onAntiSniperErrorReceived(Connection connection, AntiSniper.AntiSniperError message);
  }

  public interface OnDwmTagPositionListener {
    void onDwmTagPositionReceived(Connection connection, IndoorNavigation.DwmTagPosition message);
  }

  public interface OnDwmAnchorCountListener {
    void onDwmAnchorCountReceived(Connection connection, IndoorNavigation.DwmAnchorCount message);
  }

  public interface OnDwmAnchorListListener {
    void onDwmAnchorListReceived(Connection connection, IndoorNavigation.DwmAnchorList message);
  }

  public interface OnDwmPositionFullListener {
    void onDwmPositionFullReceived(Connection connection, IndoorNavigation.DwmPositionFull message);
  }

  public interface OnConnectedListener {
    void onConnected(Connection connection);
  }

  public interface OnErrorListener {
    void onError(Connection connection, Throwable error);
  }

  public interface OnDisconnectedListener {
    void onDisconnected(Connection connection);
  }


  private volatile OnHelloFromDevListener onHelloFromDevListener = null;
  private volatile OnChangeIdListener onChangeIdListener = null;
  private volatile OnPingListener onPingListener = null;
  private volatile OnSoundsInfoResponceListener onSoundsInfoResponceListener = null;
  private volatile OnStateVolumeListener onStateVolumeListener = null;
  private volatile OnDisconnectingClientListener onDisconnectingClientListener = null;
  private volatile OnSlavesInfoResponceListener onSlavesInfoResponceListener = null;
  private volatile OnSlaveDisconnectedListener onSlaveDisconnectedListener = null;
  private volatile OnSlaveInfoListener onSlaveInfoListener = null;
  private volatile OnFsInfoReplyListener onFsInfoReplyListener = null;
  private volatile OnFormatFsReplyListener onFormatFsReplyListener = null;
  private volatile OnLsDirReplyListener onLsDirReplyListener = null;
  private volatile OnFileInfoReplyListener onFileInfoReplyListener = null;
  private volatile OnDelFileReplyListener onDelFileReplyListener = null;
  private volatile OnReadFileReplyListener onReadFileReplyListener = null;
  private volatile OnWriteFileReplyListener onWriteFileReplyListener = null;
  private volatile OnCalcMd5ReplyListener onCalcMd5ReplyListener = null;
  private volatile OnStatFromPtrkListener onStatFromPtrkListener = null;
  private volatile OnPtrkSettingsListener onPtrkSettingsListener = null;
  private volatile OnReloadPtrkListener onReloadPtrkListener = null;
  private volatile OnLaunchingRocketListener onLaunchingRocketListener = null;
  private volatile OnStatusFlightRocketListener onStatusFlightRocketListener = null;
  private volatile OnStatusEndFlightRocketListener onStatusEndFlightRocketListener = null;
  private volatile OnSettingsTargetListener onSettingsTargetListener = null;
  private volatile OnStatisticsTargetListener onStatisticsTargetListener = null;
  private volatile OnPositionOfTargetListener onPositionOfTargetListener = null;
  private volatile OnErrorsOfTargetListener onErrorsOfTargetListener = null;
  private volatile OnSettingsPanzerListener onSettingsPanzerListener = null;
  private volatile OnStatisticsPanzerGunListener onStatisticsPanzerGunListener = null;
  private volatile OnStatisticsPanzerCannonListener onStatisticsPanzerCannonListener = null;
  private volatile OnStopMovingCartListener onStopMovingCartListener = null;
  private volatile OnMineThrowerStatListener onMineThrowerStatListener = null;
  private volatile OnEspConnectToApListener onEspConnectToApListener = null;
  private volatile OnEspConnectToTcpListener onEspConnectToTcpListener = null;
  private volatile OnEspSendByUdpListener onEspSendByUdpListener = null;
  private volatile OnEspDiscoverServersListener onEspDiscoverServersListener = null;
  private volatile OnEspSendLogByUdpListener onEspSendLogByUdpListener = null;
  private volatile OnEspConnectToTcpReplyListener onEspConnectToTcpReplyListener = null;
  private volatile OnEspTcpConfirmationListener onEspTcpConfirmationListener = null;
  private volatile OnEspGetRssiByNetworkNameListener onEspGetRssiByNetworkNameListener = null;
  private volatile OnEspScanWifiByChannelListener onEspScanWifiByChannelListener = null;
  private volatile OnEspSetWifiAccessPointListener onEspSetWifiAccessPointListener = null;
  private volatile OnEspKillWifiAccessPointListener onEspKillWifiAccessPointListener = null;
  private volatile OnVersionReplyListener onVersionReplyListener = null;
  private volatile OnUpdateResourcesReplyListener onUpdateResourcesReplyListener = null;
  private volatile OnFirmwareTaskReplyListener onFirmwareTaskReplyListener = null;
  private volatile OnStackStateListener onStackStateListener = null;
  private volatile OnStackUsageListener onStackUsageListener = null;
  private volatile OnAssertListener onAssertListener = null;
  private volatile OnBuffersStateListener onBuffersStateListener = null;
  private volatile OnSomeDataListener onSomeDataListener = null;
  private volatile OnRuntimeErrorListener onRuntimeErrorListener = null;
  private volatile OnRuntimeSystemSnapshotListener onRuntimeSystemSnapshotListener = null;
  private volatile OnEspWiFiRssiListener onEspWiFiRssiListener = null;
  private volatile OnEspAssertListener onEspAssertListener = null;
  private volatile OnEspVersionReplyListener onEspVersionReplyListener = null;
  private volatile OnEspFirmwareTaskReplyListener onEspFirmwareTaskReplyListener = null;
  private volatile OnEspUpdateResourcesReplyListener onEspUpdateResourcesReplyListener = null;
  private volatile OnEspSomeDataListener onEspSomeDataListener = null;
  private volatile OnEspRuntimeErrorListener onEspRuntimeErrorListener = null;
  private volatile OnRsHelloFromDeviceListener onRsHelloFromDeviceListener = null;
  private volatile OnRsReciveIrListener onRsReciveIrListener = null;
  private volatile OnRsButStateListener onRsButStateListener = null;
  private volatile OnRsStressBeltSettingsListener onRsStressBeltSettingsListener = null;
  private volatile OnRsStressBeltCheangeDamageModeListener onRsStressBeltCheangeDamageModeListener = null;
  private volatile OnRsSlaveConnectedListener onRsSlaveConnectedListener = null;
  private volatile OnRsSlaveDisconnectedListener onRsSlaveDisconnectedListener = null;
  private volatile OnRsSlaveBatteryLevelListener onRsSlaveBatteryLevelListener = null;
  private volatile OnRsIlluminationLevelListener onRsIlluminationLevelListener = null;
  private volatile OnRsSwitchStateListener onRsSwitchStateListener = null;
  private volatile OnRsGpsCoordinatesListener onRsGpsCoordinatesListener = null;
  private volatile OnRsCompasDataListener onRsCompasDataListener = null;
  private volatile OnRsStatusCompasIrEmiterListener onRsStatusCompasIrEmiterListener = null;
  private volatile OnRsPowerOnListener onRsPowerOnListener = null;
  private volatile OnRsPowerOffListener onRsPowerOffListener = null;
  private volatile OnSetPositionComplitedListener onSetPositionComplitedListener = null;
  private volatile OnRotationComplitedListener onRotationComplitedListener = null;
  private volatile OnAzimuthListener onAzimuthListener = null;
  private volatile OnRsDeviceErrorListener onRsDeviceErrorListener = null;
  private volatile OnWiredHelloFromSlaveListener onWiredHelloFromSlaveListener = null;
  private volatile OnWiredStateByDeviceListener onWiredStateByDeviceListener = null;
  private volatile OnWiredInfoFromPyrotechnyListener onWiredInfoFromPyrotechnyListener = null;
  private volatile OnWiredStateByIrListener onWiredStateByIrListener = null;
  private volatile OnWiredInfoFromTargetShooterListener onWiredInfoFromTargetShooterListener = null;
  private volatile OnWiredInfoMovingEventListener onWiredInfoMovingEventListener = null;
  private volatile OnWiredInfoFromGrenadeThrowerListener onWiredInfoFromGrenadeThrowerListener = null;
  private volatile OnBatteryLevelListener onBatteryLevelListener = null;
  private volatile OnGpsCoordinateListener onGpsCoordinateListener = null;
  private volatile OnSetTypeExerciseListener onSetTypeExerciseListener = null;
  private volatile OnSpatialPositionListener onSpatialPositionListener = null;
  private volatile OnStatByIdListener onStatByIdListener = null;
  private volatile OnStatByIdRepeatedListener onStatByIdRepeatedListener = null;
  private volatile OnSlaveBatteryLevelListener onSlaveBatteryLevelListener = null;
  private volatile OnStatFromKitListener onStatFromKitListener = null;
  private volatile OnWeaponStatListener onWeaponStatListener = null;
  private volatile OnKitSettingsListener onKitSettingsListener = null;
  private volatile OnStressBeltSettingsListener onStressBeltSettingsListener = null;
  private volatile OnWeaponSettingsListener onWeaponSettingsListener = null;
  private volatile OnStatisticIsOverListener onStatisticIsOverListener = null;
  private volatile OnTankMineActivatedListener onTankMineActivatedListener = null;
  private volatile OnTankMineDeactivatedListener onTankMineDeactivatedListener = null;
  private volatile OnInfoActivatedMinesIsOverListener onInfoActivatedMinesIsOverListener = null;
  private volatile OnInfoDeactivatedMinesIsOverListener onInfoDeactivatedMinesIsOverListener = null;
  private volatile OnInfoFromHingedBlockListener onInfoFromHingedBlockListener = null;
  private volatile OnIrEmitterSettingsListener onIrEmitterSettingsListener = null;
  private volatile OnIrEmitterStatisticListener onIrEmitterStatisticListener = null;
  private volatile OnSetTypeVehicleListener onSetTypeVehicleListener = null;
  private volatile OnMinesActivatedListener onMinesActivatedListener = null;
  private volatile OnMinesDeactivatedListener onMinesDeactivatedListener = null;
  private volatile OnResponseQuantityBlocksPosListener onResponseQuantityBlocksPosListener = null;
  private volatile OnResponseBlockByTimePosListener onResponseBlockByTimePosListener = null;
  private volatile OnIrCommutatorIdListener onIrCommutatorIdListener = null;
  private volatile OnPzrkEventListener onPzrkEventListener = null;
  private volatile OnPzrkEventsIsOverListener onPzrkEventsIsOverListener = null;
  private volatile OnPzrkSettingListener onPzrkSettingListener = null;
  private volatile OnGpsInfoOfTargetPzrkListener onGpsInfoOfTargetPzrkListener = null;
  private volatile OnTargetPzrkConnectedListener onTargetPzrkConnectedListener = null;
  private volatile OnTargetPzrkDisconnectedListener onTargetPzrkDisconnectedListener = null;
  private volatile OnSettingAntiSniperListener onSettingAntiSniperListener = null;
  private volatile OnCommandListener onCommandListener = null;
  private volatile OnAntiSniperErrorListener onAntiSniperErrorListener = null;
  private volatile OnDwmTagPositionListener onDwmTagPositionListener = null;
  private volatile OnDwmAnchorCountListener onDwmAnchorCountListener = null;
  private volatile OnDwmAnchorListListener onDwmAnchorListListener = null;
  private volatile OnDwmPositionFullListener onDwmPositionFullListener = null;
  private volatile OnConnectedListener onConnectedListener = null;
  private volatile OnDisconnectedListener onDisconnectedListener = null;
  private volatile OnErrorListener onErrorListener = null;

  private void notifyHelloFromDevReceived(ProtoServer.Connection connection, Base.HelloFromDev message) {
    OnHelloFromDevListener localCopy = onHelloFromDevListener;
    if (localCopy != null)
      localCopy.onHelloFromDevReceived((Connection)connection.getApi(), message);
  }

  private void notifyChangeIdReceived(ProtoServer.Connection connection, Base.ChangeId message) {
    OnChangeIdListener localCopy = onChangeIdListener;
    if (localCopy != null)
      localCopy.onChangeIdReceived((Connection)connection.getApi(), message);
  }

  private void notifyPingReceived(ProtoServer.Connection connection) {
    OnPingListener localCopy = onPingListener;
    if (localCopy != null)
      localCopy.onPingReceived((Connection)connection.getApi());
  }

  private void notifySoundsInfoResponceReceived(ProtoServer.Connection connection, Multimedia.SoundsInfoResponce message) {
    OnSoundsInfoResponceListener localCopy = onSoundsInfoResponceListener;
    if (localCopy != null)
      localCopy.onSoundsInfoResponceReceived((Connection)connection.getApi(), message);
  }

  private void notifyStateVolumeReceived(ProtoServer.Connection connection, Multimedia.StateVolume message) {
    OnStateVolumeListener localCopy = onStateVolumeListener;
    if (localCopy != null)
      localCopy.onStateVolumeReceived((Connection)connection.getApi(), message);
  }

  private void notifyDisconnectingClientReceived(ProtoServer.Connection connection, Base.DisconnectingClient message) {
    OnDisconnectingClientListener localCopy = onDisconnectingClientListener;
    if (localCopy != null)
      localCopy.onDisconnectingClientReceived((Connection)connection.getApi(), message);
  }

  private void notifySlavesInfoResponceReceived(ProtoServer.Connection connection, Slave.SlavesInfoResponce message) {
    OnSlavesInfoResponceListener localCopy = onSlavesInfoResponceListener;
    if (localCopy != null)
      localCopy.onSlavesInfoResponceReceived((Connection)connection.getApi(), message);
  }

  private void notifySlaveDisconnectedReceived(ProtoServer.Connection connection, Slave.SlaveDisconnected message) {
    OnSlaveDisconnectedListener localCopy = onSlaveDisconnectedListener;
    if (localCopy != null)
      localCopy.onSlaveDisconnectedReceived((Connection)connection.getApi(), message);
  }

  private void notifySlaveInfoReceived(ProtoServer.Connection connection, Slave.SlaveInfo message) {
    OnSlaveInfoListener localCopy = onSlaveInfoListener;
    if (localCopy != null)
      localCopy.onSlaveInfoReceived((Connection)connection.getApi(), message);
  }

  private void notifyFsInfoReplyReceived(ProtoServer.Connection connection, Filesystem.FSInfoReply message) {
    OnFsInfoReplyListener localCopy = onFsInfoReplyListener;
    if (localCopy != null)
      localCopy.onFsInfoReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyFormatFsReplyReceived(ProtoServer.Connection connection, Filesystem.FormatFSReply message) {
    OnFormatFsReplyListener localCopy = onFormatFsReplyListener;
    if (localCopy != null)
      localCopy.onFormatFsReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyLsDirReplyReceived(ProtoServer.Connection connection, Filesystem.LsDirReply message) {
    OnLsDirReplyListener localCopy = onLsDirReplyListener;
    if (localCopy != null)
      localCopy.onLsDirReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyFileInfoReplyReceived(ProtoServer.Connection connection, Filesystem.FileInfoReply message) {
    OnFileInfoReplyListener localCopy = onFileInfoReplyListener;
    if (localCopy != null)
      localCopy.onFileInfoReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyDelFileReplyReceived(ProtoServer.Connection connection, Filesystem.DelFileReply message) {
    OnDelFileReplyListener localCopy = onDelFileReplyListener;
    if (localCopy != null)
      localCopy.onDelFileReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyReadFileReplyReceived(ProtoServer.Connection connection, Filesystem.ReadFileReply message) {
    OnReadFileReplyListener localCopy = onReadFileReplyListener;
    if (localCopy != null)
      localCopy.onReadFileReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyWriteFileReplyReceived(ProtoServer.Connection connection, Filesystem.WriteFileReply message) {
    OnWriteFileReplyListener localCopy = onWriteFileReplyListener;
    if (localCopy != null)
      localCopy.onWriteFileReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyCalcMd5ReplyReceived(ProtoServer.Connection connection, Filesystem.CalcMD5Reply message) {
    OnCalcMd5ReplyListener localCopy = onCalcMd5ReplyListener;
    if (localCopy != null)
      localCopy.onCalcMd5ReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatFromPtrkReceived(ProtoServer.Connection connection, PTRKMilitary.StatFromPTRK message) {
    OnStatFromPtrkListener localCopy = onStatFromPtrkListener;
    if (localCopy != null)
      localCopy.onStatFromPtrkReceived((Connection)connection.getApi(), message);
  }

  private void notifyPtrkSettingsReceived(ProtoServer.Connection connection, PTRKMilitary.PTRKSettings message) {
    OnPtrkSettingsListener localCopy = onPtrkSettingsListener;
    if (localCopy != null)
      localCopy.onPtrkSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyReloadPtrkReceived(ProtoServer.Connection connection, PTRKMilitary.ReloadPtrk message) {
    OnReloadPtrkListener localCopy = onReloadPtrkListener;
    if (localCopy != null)
      localCopy.onReloadPtrkReceived((Connection)connection.getApi(), message);
  }

  private void notifyLaunchingRocketReceived(ProtoServer.Connection connection) {
    OnLaunchingRocketListener localCopy = onLaunchingRocketListener;
    if (localCopy != null)
      localCopy.onLaunchingRocketReceived((Connection)connection.getApi());
  }

  private void notifyStatusFlightRocketReceived(ProtoServer.Connection connection, PTRKMilitary.StatusFlightRocket message) {
    OnStatusFlightRocketListener localCopy = onStatusFlightRocketListener;
    if (localCopy != null)
      localCopy.onStatusFlightRocketReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatusEndFlightRocketReceived(ProtoServer.Connection connection, PTRKMilitary.StatusEndFlightRocket message) {
    OnStatusEndFlightRocketListener localCopy = onStatusEndFlightRocketListener;
    if (localCopy != null)
      localCopy.onStatusEndFlightRocketReceived((Connection)connection.getApi(), message);
  }

  private void notifySettingsTargetReceived(ProtoServer.Connection connection, TargetMilitary.SettingsTarget message) {
    OnSettingsTargetListener localCopy = onSettingsTargetListener;
    if (localCopy != null)
      localCopy.onSettingsTargetReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatisticsTargetReceived(ProtoServer.Connection connection, TargetMilitary.StatisticsTarget message) {
    OnStatisticsTargetListener localCopy = onStatisticsTargetListener;
    if (localCopy != null)
      localCopy.onStatisticsTargetReceived((Connection)connection.getApi(), message);
  }

  private void notifyPositionOfTargetReceived(ProtoServer.Connection connection, TargetMilitary.PositionOfTarget message) {
    OnPositionOfTargetListener localCopy = onPositionOfTargetListener;
    if (localCopy != null)
      localCopy.onPositionOfTargetReceived((Connection)connection.getApi(), message);
  }

  private void notifyErrorsOfTargetReceived(ProtoServer.Connection connection, TargetMilitary.ErrorsOfTarget message) {
    OnErrorsOfTargetListener localCopy = onErrorsOfTargetListener;
    if (localCopy != null)
      localCopy.onErrorsOfTargetReceived((Connection)connection.getApi(), message);
  }

  private void notifySettingsPanzerReceived(ProtoServer.Connection connection, PanzerMilitary.SettingsPanzer message) {
    OnSettingsPanzerListener localCopy = onSettingsPanzerListener;
    if (localCopy != null)
      localCopy.onSettingsPanzerReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatisticsPanzerGunReceived(ProtoServer.Connection connection, PanzerMilitary.StatisticsPanzerGun message) {
    OnStatisticsPanzerGunListener localCopy = onStatisticsPanzerGunListener;
    if (localCopy != null)
      localCopy.onStatisticsPanzerGunReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatisticsPanzerCannonReceived(ProtoServer.Connection connection, PanzerMilitary.StatisticsPanzerCannon message) {
    OnStatisticsPanzerCannonListener localCopy = onStatisticsPanzerCannonListener;
    if (localCopy != null)
      localCopy.onStatisticsPanzerCannonReceived((Connection)connection.getApi(), message);
  }

  private void notifyStopMovingCartReceived(ProtoServer.Connection connection) {
    OnStopMovingCartListener localCopy = onStopMovingCartListener;
    if (localCopy != null)
      localCopy.onStopMovingCartReceived((Connection)connection.getApi());
  }

  private void notifyMineThrowerStatReceived(ProtoServer.Connection connection, MineThrower.MineThrowerStat message) {
    OnMineThrowerStatListener localCopy = onMineThrowerStatListener;
    if (localCopy != null)
      localCopy.onMineThrowerStatReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspConnectToApReceived(ProtoServer.Connection connection, Esp.ESPConnectToAP message) {
    OnEspConnectToApListener localCopy = onEspConnectToApListener;
    if (localCopy != null)
      localCopy.onEspConnectToApReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspConnectToTcpReceived(ProtoServer.Connection connection, Esp.ESPConnectToTCP message) {
    OnEspConnectToTcpListener localCopy = onEspConnectToTcpListener;
    if (localCopy != null)
      localCopy.onEspConnectToTcpReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspSendByUdpReceived(ProtoServer.Connection connection, Esp.ESPSendByUDP message) {
    OnEspSendByUdpListener localCopy = onEspSendByUdpListener;
    if (localCopy != null)
      localCopy.onEspSendByUdpReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspDiscoverServersReceived(ProtoServer.Connection connection, Esp.ESPDiscoverServers message) {
    OnEspDiscoverServersListener localCopy = onEspDiscoverServersListener;
    if (localCopy != null)
      localCopy.onEspDiscoverServersReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspSendLogByUdpReceived(ProtoServer.Connection connection, Esp.ESPSendLogByUDP message) {
    OnEspSendLogByUdpListener localCopy = onEspSendLogByUdpListener;
    if (localCopy != null)
      localCopy.onEspSendLogByUdpReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspConnectToTcpReplyReceived(ProtoServer.Connection connection, Esp.ESPConnectToTCPReply message) {
    OnEspConnectToTcpReplyListener localCopy = onEspConnectToTcpReplyListener;
    if (localCopy != null)
      localCopy.onEspConnectToTcpReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspTcpConfirmationReceived(ProtoServer.Connection connection, Esp.ESPTcpConfirmation message) {
    OnEspTcpConfirmationListener localCopy = onEspTcpConfirmationListener;
    if (localCopy != null)
      localCopy.onEspTcpConfirmationReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspGetRssiByNetworkNameReceived(ProtoServer.Connection connection, Esp.ESPGetRssiByNetworkName message) {
    OnEspGetRssiByNetworkNameListener localCopy = onEspGetRssiByNetworkNameListener;
    if (localCopy != null)
      localCopy.onEspGetRssiByNetworkNameReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspScanWifiByChannelReceived(ProtoServer.Connection connection, Esp.ESPScanWifiByChannel message) {
    OnEspScanWifiByChannelListener localCopy = onEspScanWifiByChannelListener;
    if (localCopy != null)
      localCopy.onEspScanWifiByChannelReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspSetWifiAccessPointReceived(ProtoServer.Connection connection, Esp.ESPSetWifiAccessPoint message) {
    OnEspSetWifiAccessPointListener localCopy = onEspSetWifiAccessPointListener;
    if (localCopy != null)
      localCopy.onEspSetWifiAccessPointReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspKillWifiAccessPointReceived(ProtoServer.Connection connection) {
    OnEspKillWifiAccessPointListener localCopy = onEspKillWifiAccessPointListener;
    if (localCopy != null)
      localCopy.onEspKillWifiAccessPointReceived((Connection)connection.getApi());
  }

  private void notifyVersionReplyReceived(ProtoServer.Connection connection, Firmware.VersionReply message) {
    OnVersionReplyListener localCopy = onVersionReplyListener;
    if (localCopy != null)
      localCopy.onVersionReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyUpdateResourcesReplyReceived(ProtoServer.Connection connection, Firmware.UpdateResourcesReply message) {
    OnUpdateResourcesReplyListener localCopy = onUpdateResourcesReplyListener;
    if (localCopy != null)
      localCopy.onUpdateResourcesReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyFirmwareTaskReplyReceived(ProtoServer.Connection connection, Firmware.FirmwareTaskReply message) {
    OnFirmwareTaskReplyListener localCopy = onFirmwareTaskReplyListener;
    if (localCopy != null)
      localCopy.onFirmwareTaskReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyStackStateReceived(ProtoServer.Connection connection, RuntimeDbg.StackState message) {
    OnStackStateListener localCopy = onStackStateListener;
    if (localCopy != null)
      localCopy.onStackStateReceived((Connection)connection.getApi(), message);
  }

  private void notifyStackUsageReceived(ProtoServer.Connection connection, RuntimeDbg.StackUsage message) {
    OnStackUsageListener localCopy = onStackUsageListener;
    if (localCopy != null)
      localCopy.onStackUsageReceived((Connection)connection.getApi(), message);
  }

  private void notifyAssertReceived(ProtoServer.Connection connection, RuntimeDbg.Assert message) {
    OnAssertListener localCopy = onAssertListener;
    if (localCopy != null)
      localCopy.onAssertReceived((Connection)connection.getApi(), message);
  }

  private void notifyBuffersStateReceived(ProtoServer.Connection connection, RuntimeDbg.BuffersState message) {
    OnBuffersStateListener localCopy = onBuffersStateListener;
    if (localCopy != null)
      localCopy.onBuffersStateReceived((Connection)connection.getApi(), message);
  }

  private void notifySomeDataReceived(ProtoServer.Connection connection, RuntimeDbg.SomeData message) {
    OnSomeDataListener localCopy = onSomeDataListener;
    if (localCopy != null)
      localCopy.onSomeDataReceived((Connection)connection.getApi(), message);
  }

  private void notifyRuntimeErrorReceived(ProtoServer.Connection connection, RuntimeDbg.RuntimeError message) {
    OnRuntimeErrorListener localCopy = onRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onRuntimeErrorReceived((Connection)connection.getApi(), message);
  }

  private void notifyRuntimeSystemSnapshotReceived(ProtoServer.Connection connection, RuntimeDbg.RuntimeSystemSnapshot message) {
    OnRuntimeSystemSnapshotListener localCopy = onRuntimeSystemSnapshotListener;
    if (localCopy != null)
      localCopy.onRuntimeSystemSnapshotReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspWiFiRssiReceived(ProtoServer.Connection connection, EspSrv.ESP_WiFiRSSI message) {
    OnEspWiFiRssiListener localCopy = onEspWiFiRssiListener;
    if (localCopy != null)
      localCopy.onEspWiFiRssiReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspAssertReceived(ProtoServer.Connection connection, EspSrv.ESP_Assert message) {
    OnEspAssertListener localCopy = onEspAssertListener;
    if (localCopy != null)
      localCopy.onEspAssertReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspVersionReplyReceived(ProtoServer.Connection connection, EspSrv.ESP_VersionReply message) {
    OnEspVersionReplyListener localCopy = onEspVersionReplyListener;
    if (localCopy != null)
      localCopy.onEspVersionReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspFirmwareTaskReplyReceived(ProtoServer.Connection connection, EspSrv.ESP_FirmwareTaskReply message) {
    OnEspFirmwareTaskReplyListener localCopy = onEspFirmwareTaskReplyListener;
    if (localCopy != null)
      localCopy.onEspFirmwareTaskReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspUpdateResourcesReplyReceived(ProtoServer.Connection connection, EspSrv.ESP_UpdateResourcesReply message) {
    OnEspUpdateResourcesReplyListener localCopy = onEspUpdateResourcesReplyListener;
    if (localCopy != null)
      localCopy.onEspUpdateResourcesReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspSomeDataReceived(ProtoServer.Connection connection, EspSrv.ESP_SomeData message) {
    OnEspSomeDataListener localCopy = onEspSomeDataListener;
    if (localCopy != null)
      localCopy.onEspSomeDataReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspRuntimeErrorReceived(ProtoServer.Connection connection, EspSrv.ESP_RuntimeError message) {
    OnEspRuntimeErrorListener localCopy = onEspRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onEspRuntimeErrorReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsHelloFromDeviceReceived(ProtoServer.Connection connection, RsMilitary.RsHelloFromDevice message) {
    OnRsHelloFromDeviceListener localCopy = onRsHelloFromDeviceListener;
    if (localCopy != null)
      localCopy.onRsHelloFromDeviceReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsReciveIrReceived(ProtoServer.Connection connection, RsMilitary.RsReciveIr message) {
    OnRsReciveIrListener localCopy = onRsReciveIrListener;
    if (localCopy != null)
      localCopy.onRsReciveIrReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsButStateReceived(ProtoServer.Connection connection, RsMilitary.RsButState message) {
    OnRsButStateListener localCopy = onRsButStateListener;
    if (localCopy != null)
      localCopy.onRsButStateReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsStressBeltSettingsReceived(ProtoServer.Connection connection, RsMilitary.RsStressBeltSettings message) {
    OnRsStressBeltSettingsListener localCopy = onRsStressBeltSettingsListener;
    if (localCopy != null)
      localCopy.onRsStressBeltSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsStressBeltCheangeDamageModeReceived(ProtoServer.Connection connection, RsMilitary.RsStressBeltCheangeDamageMode message) {
    OnRsStressBeltCheangeDamageModeListener localCopy = onRsStressBeltCheangeDamageModeListener;
    if (localCopy != null)
      localCopy.onRsStressBeltCheangeDamageModeReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsSlaveConnectedReceived(ProtoServer.Connection connection, RsMilitary.RsSlaveConnected message) {
    OnRsSlaveConnectedListener localCopy = onRsSlaveConnectedListener;
    if (localCopy != null)
      localCopy.onRsSlaveConnectedReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsSlaveDisconnectedReceived(ProtoServer.Connection connection, RsMilitary.RsSlaveDisconnected message) {
    OnRsSlaveDisconnectedListener localCopy = onRsSlaveDisconnectedListener;
    if (localCopy != null)
      localCopy.onRsSlaveDisconnectedReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsSlaveBatteryLevelReceived(ProtoServer.Connection connection, RsMilitary.RsSlaveBatteryLevel message) {
    OnRsSlaveBatteryLevelListener localCopy = onRsSlaveBatteryLevelListener;
    if (localCopy != null)
      localCopy.onRsSlaveBatteryLevelReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsIlluminationLevelReceived(ProtoServer.Connection connection, RsMilitary.RsIlluminationLevel message) {
    OnRsIlluminationLevelListener localCopy = onRsIlluminationLevelListener;
    if (localCopy != null)
      localCopy.onRsIlluminationLevelReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsSwitchStateReceived(ProtoServer.Connection connection, RsMilitary.RsSwitchState message) {
    OnRsSwitchStateListener localCopy = onRsSwitchStateListener;
    if (localCopy != null)
      localCopy.onRsSwitchStateReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsGpsCoordinatesReceived(ProtoServer.Connection connection, RsMilitary.RsGpsCoordinates message) {
    OnRsGpsCoordinatesListener localCopy = onRsGpsCoordinatesListener;
    if (localCopy != null)
      localCopy.onRsGpsCoordinatesReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsCompasDataReceived(ProtoServer.Connection connection, RsMilitary.RsCompasData message) {
    OnRsCompasDataListener localCopy = onRsCompasDataListener;
    if (localCopy != null)
      localCopy.onRsCompasDataReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsStatusCompasIrEmiterReceived(ProtoServer.Connection connection, RsMilitary.RsStatusCompasIrEmiter message) {
    OnRsStatusCompasIrEmiterListener localCopy = onRsStatusCompasIrEmiterListener;
    if (localCopy != null)
      localCopy.onRsStatusCompasIrEmiterReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsPowerOnReceived(ProtoServer.Connection connection) {
    OnRsPowerOnListener localCopy = onRsPowerOnListener;
    if (localCopy != null)
      localCopy.onRsPowerOnReceived((Connection)connection.getApi());
  }

  private void notifyRsPowerOffReceived(ProtoServer.Connection connection) {
    OnRsPowerOffListener localCopy = onRsPowerOffListener;
    if (localCopy != null)
      localCopy.onRsPowerOffReceived((Connection)connection.getApi());
  }

  private void notifySetPositionComplitedReceived(ProtoServer.Connection connection) {
    OnSetPositionComplitedListener localCopy = onSetPositionComplitedListener;
    if (localCopy != null)
      localCopy.onSetPositionComplitedReceived((Connection)connection.getApi());
  }

  private void notifyRotationComplitedReceived(ProtoServer.Connection connection) {
    OnRotationComplitedListener localCopy = onRotationComplitedListener;
    if (localCopy != null)
      localCopy.onRotationComplitedReceived((Connection)connection.getApi());
  }

  private void notifyAzimuthReceived(ProtoServer.Connection connection, RsMilitary.Azimuth message) {
    OnAzimuthListener localCopy = onAzimuthListener;
    if (localCopy != null)
      localCopy.onAzimuthReceived((Connection)connection.getApi(), message);
  }

  private void notifyRsDeviceErrorReceived(ProtoServer.Connection connection, RsMilitary.RsDeviceError message) {
    OnRsDeviceErrorListener localCopy = onRsDeviceErrorListener;
    if (localCopy != null)
      localCopy.onRsDeviceErrorReceived((Connection)connection.getApi(), message);
  }

  private void notifyWiredHelloFromSlaveReceived(ProtoServer.Connection connection, WiredConnection.WiredHelloFromSlave message) {
    OnWiredHelloFromSlaveListener localCopy = onWiredHelloFromSlaveListener;
    if (localCopy != null)
      localCopy.onWiredHelloFromSlaveReceived((Connection)connection.getApi(), message);
  }

  private void notifyWiredStateByDeviceReceived(ProtoServer.Connection connection, WiredConnection.WiredStateByDevice message) {
    OnWiredStateByDeviceListener localCopy = onWiredStateByDeviceListener;
    if (localCopy != null)
      localCopy.onWiredStateByDeviceReceived((Connection)connection.getApi(), message);
  }

  private void notifyWiredInfoFromPyrotechnyReceived(ProtoServer.Connection connection, WiredConnection.WiredInfoFromPyrotechny message) {
    OnWiredInfoFromPyrotechnyListener localCopy = onWiredInfoFromPyrotechnyListener;
    if (localCopy != null)
      localCopy.onWiredInfoFromPyrotechnyReceived((Connection)connection.getApi(), message);
  }

  private void notifyWiredStateByIrReceived(ProtoServer.Connection connection, WiredConnection.WiredStateByIr message) {
    OnWiredStateByIrListener localCopy = onWiredStateByIrListener;
    if (localCopy != null)
      localCopy.onWiredStateByIrReceived((Connection)connection.getApi(), message);
  }

  private void notifyWiredInfoFromTargetShooterReceived(ProtoServer.Connection connection, WiredConnection.WiredInfoFromTargetShooter message) {
    OnWiredInfoFromTargetShooterListener localCopy = onWiredInfoFromTargetShooterListener;
    if (localCopy != null)
      localCopy.onWiredInfoFromTargetShooterReceived((Connection)connection.getApi(), message);
  }

  private void notifyWiredInfoMovingEventReceived(ProtoServer.Connection connection, WiredConnection.WiredInfoMovingEvent message) {
    OnWiredInfoMovingEventListener localCopy = onWiredInfoMovingEventListener;
    if (localCopy != null)
      localCopy.onWiredInfoMovingEventReceived((Connection)connection.getApi(), message);
  }

  private void notifyWiredInfoFromGrenadeThrowerReceived(ProtoServer.Connection connection, WiredConnection.WiredInfoFromGrenadeThrower message) {
    OnWiredInfoFromGrenadeThrowerListener localCopy = onWiredInfoFromGrenadeThrowerListener;
    if (localCopy != null)
      localCopy.onWiredInfoFromGrenadeThrowerReceived((Connection)connection.getApi(), message);
  }

  private void notifyBatteryLevelReceived(ProtoServer.Connection connection, CommonMilitary.BatteryLevel message) {
    OnBatteryLevelListener localCopy = onBatteryLevelListener;
    if (localCopy != null)
      localCopy.onBatteryLevelReceived((Connection)connection.getApi(), message);
  }

  private void notifyGpsCoordinateReceived(ProtoServer.Connection connection, CommonMilitary.GPSCoordinate message) {
    OnGpsCoordinateListener localCopy = onGpsCoordinateListener;
    if (localCopy != null)
      localCopy.onGpsCoordinateReceived((Connection)connection.getApi(), message);
  }

  private void notifySetTypeExerciseReceived(ProtoServer.Connection connection, CommonMilitary.SetTypeExercise message) {
    OnSetTypeExerciseListener localCopy = onSetTypeExerciseListener;
    if (localCopy != null)
      localCopy.onSetTypeExerciseReceived((Connection)connection.getApi(), message);
  }

  private void notifySpatialPositionReceived(ProtoServer.Connection connection, CommonMilitary.SpatialPosition message) {
    OnSpatialPositionListener localCopy = onSpatialPositionListener;
    if (localCopy != null)
      localCopy.onSpatialPositionReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatByIdReceived(ProtoServer.Connection connection, KitMilitary.StatById message) {
    OnStatByIdListener localCopy = onStatByIdListener;
    if (localCopy != null)
      localCopy.onStatByIdReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatByIdRepeatedReceived(ProtoServer.Connection connection, KitMilitary.StatByIdRepeated message) {
    OnStatByIdRepeatedListener localCopy = onStatByIdRepeatedListener;
    if (localCopy != null)
      localCopy.onStatByIdRepeatedReceived((Connection)connection.getApi(), message);
  }

  private void notifySlaveBatteryLevelReceived(ProtoServer.Connection connection, KitMilitary.SlaveBatteryLevel message) {
    OnSlaveBatteryLevelListener localCopy = onSlaveBatteryLevelListener;
    if (localCopy != null)
      localCopy.onSlaveBatteryLevelReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatFromKitReceived(ProtoServer.Connection connection, KitMilitary.StatFromKit message) {
    OnStatFromKitListener localCopy = onStatFromKitListener;
    if (localCopy != null)
      localCopy.onStatFromKitReceived((Connection)connection.getApi(), message);
  }

  private void notifyWeaponStatReceived(ProtoServer.Connection connection, KitMilitary.WeaponStat message) {
    OnWeaponStatListener localCopy = onWeaponStatListener;
    if (localCopy != null)
      localCopy.onWeaponStatReceived((Connection)connection.getApi(), message);
  }

  private void notifyKitSettingsReceived(ProtoServer.Connection connection, KitMilitary.KitSettings message) {
    OnKitSettingsListener localCopy = onKitSettingsListener;
    if (localCopy != null)
      localCopy.onKitSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyStressBeltSettingsReceived(ProtoServer.Connection connection, KitMilitary.StressBeltSettings message) {
    OnStressBeltSettingsListener localCopy = onStressBeltSettingsListener;
    if (localCopy != null)
      localCopy.onStressBeltSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyWeaponSettingsReceived(ProtoServer.Connection connection, KitMilitary.WeaponSettings message) {
    OnWeaponSettingsListener localCopy = onWeaponSettingsListener;
    if (localCopy != null)
      localCopy.onWeaponSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatisticIsOverReceived(ProtoServer.Connection connection) {
    OnStatisticIsOverListener localCopy = onStatisticIsOverListener;
    if (localCopy != null)
      localCopy.onStatisticIsOverReceived((Connection)connection.getApi());
  }

  private void notifyTankMineActivatedReceived(ProtoServer.Connection connection, KitMilitary.TankMineActivated message) {
    OnTankMineActivatedListener localCopy = onTankMineActivatedListener;
    if (localCopy != null)
      localCopy.onTankMineActivatedReceived((Connection)connection.getApi(), message);
  }

  private void notifyTankMineDeactivatedReceived(ProtoServer.Connection connection, KitMilitary.TankMineDeactivated message) {
    OnTankMineDeactivatedListener localCopy = onTankMineDeactivatedListener;
    if (localCopy != null)
      localCopy.onTankMineDeactivatedReceived((Connection)connection.getApi(), message);
  }

  private void notifyInfoActivatedMinesIsOverReceived(ProtoServer.Connection connection) {
    OnInfoActivatedMinesIsOverListener localCopy = onInfoActivatedMinesIsOverListener;
    if (localCopy != null)
      localCopy.onInfoActivatedMinesIsOverReceived((Connection)connection.getApi());
  }

  private void notifyInfoDeactivatedMinesIsOverReceived(ProtoServer.Connection connection) {
    OnInfoDeactivatedMinesIsOverListener localCopy = onInfoDeactivatedMinesIsOverListener;
    if (localCopy != null)
      localCopy.onInfoDeactivatedMinesIsOverReceived((Connection)connection.getApi());
  }

  private void notifyInfoFromHingedBlockReceived(ProtoServer.Connection connection, KitMilitary.InfoFromHingedBlock message) {
    OnInfoFromHingedBlockListener localCopy = onInfoFromHingedBlockListener;
    if (localCopy != null)
      localCopy.onInfoFromHingedBlockReceived((Connection)connection.getApi(), message);
  }

  private void notifyIrEmitterSettingsReceived(ProtoServer.Connection connection, KitMilitary.IrEmitterSettings message) {
    OnIrEmitterSettingsListener localCopy = onIrEmitterSettingsListener;
    if (localCopy != null)
      localCopy.onIrEmitterSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyIrEmitterStatisticReceived(ProtoServer.Connection connection, KitMilitary.IrEmitterStatistic message) {
    OnIrEmitterStatisticListener localCopy = onIrEmitterStatisticListener;
    if (localCopy != null)
      localCopy.onIrEmitterStatisticReceived((Connection)connection.getApi(), message);
  }

  private void notifySetTypeVehicleReceived(ProtoServer.Connection connection, KitMilitary.SetTypeVehicle message) {
    OnSetTypeVehicleListener localCopy = onSetTypeVehicleListener;
    if (localCopy != null)
      localCopy.onSetTypeVehicleReceived((Connection)connection.getApi(), message);
  }

  private void notifyMinesActivatedReceived(ProtoServer.Connection connection, KitMilitary.MinesActivated message) {
    OnMinesActivatedListener localCopy = onMinesActivatedListener;
    if (localCopy != null)
      localCopy.onMinesActivatedReceived((Connection)connection.getApi(), message);
  }

  private void notifyMinesDeactivatedReceived(ProtoServer.Connection connection, KitMilitary.MinesDeactivated message) {
    OnMinesDeactivatedListener localCopy = onMinesDeactivatedListener;
    if (localCopy != null)
      localCopy.onMinesDeactivatedReceived((Connection)connection.getApi(), message);
  }

  private void notifyResponseQuantityBlocksPosReceived(ProtoServer.Connection connection, KitMilitary.ResponseQuantityBlocksPos message) {
    OnResponseQuantityBlocksPosListener localCopy = onResponseQuantityBlocksPosListener;
    if (localCopy != null)
      localCopy.onResponseQuantityBlocksPosReceived((Connection)connection.getApi(), message);
  }

  private void notifyResponseBlockByTimePosReceived(ProtoServer.Connection connection, KitMilitary.ResponseBlockByTimePos message) {
    OnResponseBlockByTimePosListener localCopy = onResponseBlockByTimePosListener;
    if (localCopy != null)
      localCopy.onResponseBlockByTimePosReceived((Connection)connection.getApi(), message);
  }

  private void notifyIrCommutatorIdReceived(ProtoServer.Connection connection, KitMilitary.IrCommutatorID message) {
    OnIrCommutatorIdListener localCopy = onIrCommutatorIdListener;
    if (localCopy != null)
      localCopy.onIrCommutatorIdReceived((Connection)connection.getApi(), message);
  }

  private void notifyPzrkEventReceived(ProtoServer.Connection connection, PZRKMilitary.PzrkEvent message) {
    OnPzrkEventListener localCopy = onPzrkEventListener;
    if (localCopy != null)
      localCopy.onPzrkEventReceived((Connection)connection.getApi(), message);
  }

  private void notifyPzrkEventsIsOverReceived(ProtoServer.Connection connection) {
    OnPzrkEventsIsOverListener localCopy = onPzrkEventsIsOverListener;
    if (localCopy != null)
      localCopy.onPzrkEventsIsOverReceived((Connection)connection.getApi());
  }

  private void notifyPzrkSettingReceived(ProtoServer.Connection connection, PZRKMilitary.PzrkSetting message) {
    OnPzrkSettingListener localCopy = onPzrkSettingListener;
    if (localCopy != null)
      localCopy.onPzrkSettingReceived((Connection)connection.getApi(), message);
  }

  private void notifyGpsInfoOfTargetPzrkReceived(ProtoServer.Connection connection, PZRKMilitary.GpsInfoOfTargetPzrk message) {
    OnGpsInfoOfTargetPzrkListener localCopy = onGpsInfoOfTargetPzrkListener;
    if (localCopy != null)
      localCopy.onGpsInfoOfTargetPzrkReceived((Connection)connection.getApi(), message);
  }

  private void notifyTargetPzrkConnectedReceived(ProtoServer.Connection connection, PZRKMilitary.TargetPzrkConnected message) {
    OnTargetPzrkConnectedListener localCopy = onTargetPzrkConnectedListener;
    if (localCopy != null)
      localCopy.onTargetPzrkConnectedReceived((Connection)connection.getApi(), message);
  }

  private void notifyTargetPzrkDisconnectedReceived(ProtoServer.Connection connection, PZRKMilitary.TargetPzrkDisconnected message) {
    OnTargetPzrkDisconnectedListener localCopy = onTargetPzrkDisconnectedListener;
    if (localCopy != null)
      localCopy.onTargetPzrkDisconnectedReceived((Connection)connection.getApi(), message);
  }

  private void notifySettingAntiSniperReceived(ProtoServer.Connection connection, AntiSniper.SettingAntiSniper message) {
    OnSettingAntiSniperListener localCopy = onSettingAntiSniperListener;
    if (localCopy != null)
      localCopy.onSettingAntiSniperReceived((Connection)connection.getApi(), message);
  }

  private void notifyCommandReceived(ProtoServer.Connection connection, AntiSniper.Command message) {
    OnCommandListener localCopy = onCommandListener;
    if (localCopy != null)
      localCopy.onCommandReceived((Connection)connection.getApi(), message);
  }

  private void notifyAntiSniperErrorReceived(ProtoServer.Connection connection, AntiSniper.AntiSniperError message) {
    OnAntiSniperErrorListener localCopy = onAntiSniperErrorListener;
    if (localCopy != null)
      localCopy.onAntiSniperErrorReceived((Connection)connection.getApi(), message);
  }

  private void notifyDwmTagPositionReceived(ProtoServer.Connection connection, IndoorNavigation.DwmTagPosition message) {
    OnDwmTagPositionListener localCopy = onDwmTagPositionListener;
    if (localCopy != null)
      localCopy.onDwmTagPositionReceived((Connection)connection.getApi(), message);
  }

  private void notifyDwmAnchorCountReceived(ProtoServer.Connection connection, IndoorNavigation.DwmAnchorCount message) {
    OnDwmAnchorCountListener localCopy = onDwmAnchorCountListener;
    if (localCopy != null)
      localCopy.onDwmAnchorCountReceived((Connection)connection.getApi(), message);
  }

  private void notifyDwmAnchorListReceived(ProtoServer.Connection connection, IndoorNavigation.DwmAnchorList message) {
    OnDwmAnchorListListener localCopy = onDwmAnchorListListener;
    if (localCopy != null)
      localCopy.onDwmAnchorListReceived((Connection)connection.getApi(), message);
  }

  private void notifyDwmPositionFullReceived(ProtoServer.Connection connection, IndoorNavigation.DwmPositionFull message) {
    OnDwmPositionFullListener localCopy = onDwmPositionFullListener;
    if (localCopy != null)
      localCopy.onDwmPositionFullReceived((Connection)connection.getApi(), message);
  }


  public void setOnHelloFromDevListener(OnHelloFromDevListener listener)
  {
    onHelloFromDevListener = listener;
  }

  public void setOnChangeIdListener(OnChangeIdListener listener)
  {
    onChangeIdListener = listener;
  }

  public void setOnPingListener(OnPingListener listener)
  {
    onPingListener = listener;
  }

  public void setOnSoundsInfoResponceListener(OnSoundsInfoResponceListener listener)
  {
    onSoundsInfoResponceListener = listener;
  }

  public void setOnStateVolumeListener(OnStateVolumeListener listener)
  {
    onStateVolumeListener = listener;
  }

  public void setOnDisconnectingClientListener(OnDisconnectingClientListener listener)
  {
    onDisconnectingClientListener = listener;
  }

  public void setOnSlavesInfoResponceListener(OnSlavesInfoResponceListener listener)
  {
    onSlavesInfoResponceListener = listener;
  }

  public void setOnSlaveDisconnectedListener(OnSlaveDisconnectedListener listener)
  {
    onSlaveDisconnectedListener = listener;
  }

  public void setOnSlaveInfoListener(OnSlaveInfoListener listener)
  {
    onSlaveInfoListener = listener;
  }

  public void setOnFsInfoReplyListener(OnFsInfoReplyListener listener)
  {
    onFsInfoReplyListener = listener;
  }

  public void setOnFormatFsReplyListener(OnFormatFsReplyListener listener)
  {
    onFormatFsReplyListener = listener;
  }

  public void setOnLsDirReplyListener(OnLsDirReplyListener listener)
  {
    onLsDirReplyListener = listener;
  }

  public void setOnFileInfoReplyListener(OnFileInfoReplyListener listener)
  {
    onFileInfoReplyListener = listener;
  }

  public void setOnDelFileReplyListener(OnDelFileReplyListener listener)
  {
    onDelFileReplyListener = listener;
  }

  public void setOnReadFileReplyListener(OnReadFileReplyListener listener)
  {
    onReadFileReplyListener = listener;
  }

  public void setOnWriteFileReplyListener(OnWriteFileReplyListener listener)
  {
    onWriteFileReplyListener = listener;
  }

  public void setOnCalcMd5ReplyListener(OnCalcMd5ReplyListener listener)
  {
    onCalcMd5ReplyListener = listener;
  }

  public void setOnStatFromPtrkListener(OnStatFromPtrkListener listener)
  {
    onStatFromPtrkListener = listener;
  }

  public void setOnPtrkSettingsListener(OnPtrkSettingsListener listener)
  {
    onPtrkSettingsListener = listener;
  }

  public void setOnReloadPtrkListener(OnReloadPtrkListener listener)
  {
    onReloadPtrkListener = listener;
  }

  public void setOnLaunchingRocketListener(OnLaunchingRocketListener listener)
  {
    onLaunchingRocketListener = listener;
  }

  public void setOnStatusFlightRocketListener(OnStatusFlightRocketListener listener)
  {
    onStatusFlightRocketListener = listener;
  }

  public void setOnStatusEndFlightRocketListener(OnStatusEndFlightRocketListener listener)
  {
    onStatusEndFlightRocketListener = listener;
  }

  public void setOnSettingsTargetListener(OnSettingsTargetListener listener)
  {
    onSettingsTargetListener = listener;
  }

  public void setOnStatisticsTargetListener(OnStatisticsTargetListener listener)
  {
    onStatisticsTargetListener = listener;
  }

  public void setOnPositionOfTargetListener(OnPositionOfTargetListener listener)
  {
    onPositionOfTargetListener = listener;
  }

  public void setOnErrorsOfTargetListener(OnErrorsOfTargetListener listener)
  {
    onErrorsOfTargetListener = listener;
  }

  public void setOnSettingsPanzerListener(OnSettingsPanzerListener listener)
  {
    onSettingsPanzerListener = listener;
  }

  public void setOnStatisticsPanzerGunListener(OnStatisticsPanzerGunListener listener)
  {
    onStatisticsPanzerGunListener = listener;
  }

  public void setOnStatisticsPanzerCannonListener(OnStatisticsPanzerCannonListener listener)
  {
    onStatisticsPanzerCannonListener = listener;
  }

  public void setOnStopMovingCartListener(OnStopMovingCartListener listener)
  {
    onStopMovingCartListener = listener;
  }

  public void setOnMineThrowerStatListener(OnMineThrowerStatListener listener)
  {
    onMineThrowerStatListener = listener;
  }

  public void setOnEspConnectToApListener(OnEspConnectToApListener listener)
  {
    onEspConnectToApListener = listener;
  }

  public void setOnEspConnectToTcpListener(OnEspConnectToTcpListener listener)
  {
    onEspConnectToTcpListener = listener;
  }

  public void setOnEspSendByUdpListener(OnEspSendByUdpListener listener)
  {
    onEspSendByUdpListener = listener;
  }

  public void setOnEspDiscoverServersListener(OnEspDiscoverServersListener listener)
  {
    onEspDiscoverServersListener = listener;
  }

  public void setOnEspSendLogByUdpListener(OnEspSendLogByUdpListener listener)
  {
    onEspSendLogByUdpListener = listener;
  }

  public void setOnEspConnectToTcpReplyListener(OnEspConnectToTcpReplyListener listener)
  {
    onEspConnectToTcpReplyListener = listener;
  }

  public void setOnEspTcpConfirmationListener(OnEspTcpConfirmationListener listener)
  {
    onEspTcpConfirmationListener = listener;
  }

  public void setOnEspGetRssiByNetworkNameListener(OnEspGetRssiByNetworkNameListener listener)
  {
    onEspGetRssiByNetworkNameListener = listener;
  }

  public void setOnEspScanWifiByChannelListener(OnEspScanWifiByChannelListener listener)
  {
    onEspScanWifiByChannelListener = listener;
  }

  public void setOnEspSetWifiAccessPointListener(OnEspSetWifiAccessPointListener listener)
  {
    onEspSetWifiAccessPointListener = listener;
  }

  public void setOnEspKillWifiAccessPointListener(OnEspKillWifiAccessPointListener listener)
  {
    onEspKillWifiAccessPointListener = listener;
  }

  public void setOnVersionReplyListener(OnVersionReplyListener listener)
  {
    onVersionReplyListener = listener;
  }

  public void setOnUpdateResourcesReplyListener(OnUpdateResourcesReplyListener listener)
  {
    onUpdateResourcesReplyListener = listener;
  }

  public void setOnFirmwareTaskReplyListener(OnFirmwareTaskReplyListener listener)
  {
    onFirmwareTaskReplyListener = listener;
  }

  public void setOnStackStateListener(OnStackStateListener listener)
  {
    onStackStateListener = listener;
  }

  public void setOnStackUsageListener(OnStackUsageListener listener)
  {
    onStackUsageListener = listener;
  }

  public void setOnAssertListener(OnAssertListener listener)
  {
    onAssertListener = listener;
  }

  public void setOnBuffersStateListener(OnBuffersStateListener listener)
  {
    onBuffersStateListener = listener;
  }

  public void setOnSomeDataListener(OnSomeDataListener listener)
  {
    onSomeDataListener = listener;
  }

  public void setOnRuntimeErrorListener(OnRuntimeErrorListener listener)
  {
    onRuntimeErrorListener = listener;
  }

  public void setOnRuntimeSystemSnapshotListener(OnRuntimeSystemSnapshotListener listener)
  {
    onRuntimeSystemSnapshotListener = listener;
  }

  public void setOnEspWiFiRssiListener(OnEspWiFiRssiListener listener)
  {
    onEspWiFiRssiListener = listener;
  }

  public void setOnEspAssertListener(OnEspAssertListener listener)
  {
    onEspAssertListener = listener;
  }

  public void setOnEspVersionReplyListener(OnEspVersionReplyListener listener)
  {
    onEspVersionReplyListener = listener;
  }

  public void setOnEspFirmwareTaskReplyListener(OnEspFirmwareTaskReplyListener listener)
  {
    onEspFirmwareTaskReplyListener = listener;
  }

  public void setOnEspUpdateResourcesReplyListener(OnEspUpdateResourcesReplyListener listener)
  {
    onEspUpdateResourcesReplyListener = listener;
  }

  public void setOnEspSomeDataListener(OnEspSomeDataListener listener)
  {
    onEspSomeDataListener = listener;
  }

  public void setOnEspRuntimeErrorListener(OnEspRuntimeErrorListener listener)
  {
    onEspRuntimeErrorListener = listener;
  }

  public void setOnRsHelloFromDeviceListener(OnRsHelloFromDeviceListener listener)
  {
    onRsHelloFromDeviceListener = listener;
  }

  public void setOnRsReciveIrListener(OnRsReciveIrListener listener)
  {
    onRsReciveIrListener = listener;
  }

  public void setOnRsButStateListener(OnRsButStateListener listener)
  {
    onRsButStateListener = listener;
  }

  public void setOnRsStressBeltSettingsListener(OnRsStressBeltSettingsListener listener)
  {
    onRsStressBeltSettingsListener = listener;
  }

  public void setOnRsStressBeltCheangeDamageModeListener(OnRsStressBeltCheangeDamageModeListener listener)
  {
    onRsStressBeltCheangeDamageModeListener = listener;
  }

  public void setOnRsSlaveConnectedListener(OnRsSlaveConnectedListener listener)
  {
    onRsSlaveConnectedListener = listener;
  }

  public void setOnRsSlaveDisconnectedListener(OnRsSlaveDisconnectedListener listener)
  {
    onRsSlaveDisconnectedListener = listener;
  }

  public void setOnRsSlaveBatteryLevelListener(OnRsSlaveBatteryLevelListener listener)
  {
    onRsSlaveBatteryLevelListener = listener;
  }

  public void setOnRsIlluminationLevelListener(OnRsIlluminationLevelListener listener)
  {
    onRsIlluminationLevelListener = listener;
  }

  public void setOnRsSwitchStateListener(OnRsSwitchStateListener listener)
  {
    onRsSwitchStateListener = listener;
  }

  public void setOnRsGpsCoordinatesListener(OnRsGpsCoordinatesListener listener)
  {
    onRsGpsCoordinatesListener = listener;
  }

  public void setOnRsCompasDataListener(OnRsCompasDataListener listener)
  {
    onRsCompasDataListener = listener;
  }

  public void setOnRsStatusCompasIrEmiterListener(OnRsStatusCompasIrEmiterListener listener)
  {
    onRsStatusCompasIrEmiterListener = listener;
  }

  public void setOnRsPowerOnListener(OnRsPowerOnListener listener)
  {
    onRsPowerOnListener = listener;
  }

  public void setOnRsPowerOffListener(OnRsPowerOffListener listener)
  {
    onRsPowerOffListener = listener;
  }

  public void setOnSetPositionComplitedListener(OnSetPositionComplitedListener listener)
  {
    onSetPositionComplitedListener = listener;
  }

  public void setOnRotationComplitedListener(OnRotationComplitedListener listener)
  {
    onRotationComplitedListener = listener;
  }

  public void setOnAzimuthListener(OnAzimuthListener listener)
  {
    onAzimuthListener = listener;
  }

  public void setOnRsDeviceErrorListener(OnRsDeviceErrorListener listener)
  {
    onRsDeviceErrorListener = listener;
  }

  public void setOnWiredHelloFromSlaveListener(OnWiredHelloFromSlaveListener listener)
  {
    onWiredHelloFromSlaveListener = listener;
  }

  public void setOnWiredStateByDeviceListener(OnWiredStateByDeviceListener listener)
  {
    onWiredStateByDeviceListener = listener;
  }

  public void setOnWiredInfoFromPyrotechnyListener(OnWiredInfoFromPyrotechnyListener listener)
  {
    onWiredInfoFromPyrotechnyListener = listener;
  }

  public void setOnWiredStateByIrListener(OnWiredStateByIrListener listener)
  {
    onWiredStateByIrListener = listener;
  }

  public void setOnWiredInfoFromTargetShooterListener(OnWiredInfoFromTargetShooterListener listener)
  {
    onWiredInfoFromTargetShooterListener = listener;
  }

  public void setOnWiredInfoMovingEventListener(OnWiredInfoMovingEventListener listener)
  {
    onWiredInfoMovingEventListener = listener;
  }

  public void setOnWiredInfoFromGrenadeThrowerListener(OnWiredInfoFromGrenadeThrowerListener listener)
  {
    onWiredInfoFromGrenadeThrowerListener = listener;
  }

  public void setOnBatteryLevelListener(OnBatteryLevelListener listener)
  {
    onBatteryLevelListener = listener;
  }

  public void setOnGpsCoordinateListener(OnGpsCoordinateListener listener)
  {
    onGpsCoordinateListener = listener;
  }

  public void setOnSetTypeExerciseListener(OnSetTypeExerciseListener listener)
  {
    onSetTypeExerciseListener = listener;
  }

  public void setOnSpatialPositionListener(OnSpatialPositionListener listener)
  {
    onSpatialPositionListener = listener;
  }

  public void setOnStatByIdListener(OnStatByIdListener listener)
  {
    onStatByIdListener = listener;
  }

  public void setOnStatByIdRepeatedListener(OnStatByIdRepeatedListener listener)
  {
    onStatByIdRepeatedListener = listener;
  }

  public void setOnSlaveBatteryLevelListener(OnSlaveBatteryLevelListener listener)
  {
    onSlaveBatteryLevelListener = listener;
  }

  public void setOnStatFromKitListener(OnStatFromKitListener listener)
  {
    onStatFromKitListener = listener;
  }

  public void setOnWeaponStatListener(OnWeaponStatListener listener)
  {
    onWeaponStatListener = listener;
  }

  public void setOnKitSettingsListener(OnKitSettingsListener listener)
  {
    onKitSettingsListener = listener;
  }

  public void setOnStressBeltSettingsListener(OnStressBeltSettingsListener listener)
  {
    onStressBeltSettingsListener = listener;
  }

  public void setOnWeaponSettingsListener(OnWeaponSettingsListener listener)
  {
    onWeaponSettingsListener = listener;
  }

  public void setOnStatisticIsOverListener(OnStatisticIsOverListener listener)
  {
    onStatisticIsOverListener = listener;
  }

  public void setOnTankMineActivatedListener(OnTankMineActivatedListener listener)
  {
    onTankMineActivatedListener = listener;
  }

  public void setOnTankMineDeactivatedListener(OnTankMineDeactivatedListener listener)
  {
    onTankMineDeactivatedListener = listener;
  }

  public void setOnInfoActivatedMinesIsOverListener(OnInfoActivatedMinesIsOverListener listener)
  {
    onInfoActivatedMinesIsOverListener = listener;
  }

  public void setOnInfoDeactivatedMinesIsOverListener(OnInfoDeactivatedMinesIsOverListener listener)
  {
    onInfoDeactivatedMinesIsOverListener = listener;
  }

  public void setOnInfoFromHingedBlockListener(OnInfoFromHingedBlockListener listener)
  {
    onInfoFromHingedBlockListener = listener;
  }

  public void setOnIrEmitterSettingsListener(OnIrEmitterSettingsListener listener)
  {
    onIrEmitterSettingsListener = listener;
  }

  public void setOnIrEmitterStatisticListener(OnIrEmitterStatisticListener listener)
  {
    onIrEmitterStatisticListener = listener;
  }

  public void setOnSetTypeVehicleListener(OnSetTypeVehicleListener listener)
  {
    onSetTypeVehicleListener = listener;
  }

  public void setOnMinesActivatedListener(OnMinesActivatedListener listener)
  {
    onMinesActivatedListener = listener;
  }

  public void setOnMinesDeactivatedListener(OnMinesDeactivatedListener listener)
  {
    onMinesDeactivatedListener = listener;
  }

  public void setOnResponseQuantityBlocksPosListener(OnResponseQuantityBlocksPosListener listener)
  {
    onResponseQuantityBlocksPosListener = listener;
  }

  public void setOnResponseBlockByTimePosListener(OnResponseBlockByTimePosListener listener)
  {
    onResponseBlockByTimePosListener = listener;
  }

  public void setOnIrCommutatorIdListener(OnIrCommutatorIdListener listener)
  {
    onIrCommutatorIdListener = listener;
  }

  public void setOnPzrkEventListener(OnPzrkEventListener listener)
  {
    onPzrkEventListener = listener;
  }

  public void setOnPzrkEventsIsOverListener(OnPzrkEventsIsOverListener listener)
  {
    onPzrkEventsIsOverListener = listener;
  }

  public void setOnPzrkSettingListener(OnPzrkSettingListener listener)
  {
    onPzrkSettingListener = listener;
  }

  public void setOnGpsInfoOfTargetPzrkListener(OnGpsInfoOfTargetPzrkListener listener)
  {
    onGpsInfoOfTargetPzrkListener = listener;
  }

  public void setOnTargetPzrkConnectedListener(OnTargetPzrkConnectedListener listener)
  {
    onTargetPzrkConnectedListener = listener;
  }

  public void setOnTargetPzrkDisconnectedListener(OnTargetPzrkDisconnectedListener listener)
  {
    onTargetPzrkDisconnectedListener = listener;
  }

  public void setOnSettingAntiSniperListener(OnSettingAntiSniperListener listener)
  {
    onSettingAntiSniperListener = listener;
  }

  public void setOnCommandListener(OnCommandListener listener)
  {
    onCommandListener = listener;
  }

  public void setOnAntiSniperErrorListener(OnAntiSniperErrorListener listener)
  {
    onAntiSniperErrorListener = listener;
  }

  public void setOnDwmTagPositionListener(OnDwmTagPositionListener listener)
  {
    onDwmTagPositionListener = listener;
  }

  public void setOnDwmAnchorCountListener(OnDwmAnchorCountListener listener)
  {
    onDwmAnchorCountListener = listener;
  }

  public void setOnDwmAnchorListListener(OnDwmAnchorListListener listener)
  {
    onDwmAnchorListListener = listener;
  }

  public void setOnDwmPositionFullListener(OnDwmPositionFullListener listener)
  {
    onDwmPositionFullListener = listener;
  }


  public void setOnConnectedListener(OnConnectedListener listener)
  {
    onConnectedListener = listener;
  }

  public void setOnErrorListener(OnErrorListener listener)
  {
    onErrorListener = listener;
  }

  public void setOnDisconnectedListener(OnDisconnectedListener listener)
  {
    onDisconnectedListener = listener;
  }


  ProtoServer.ProtocolDispatcher mProtocolDispatcher = new ProtoServer.ProtocolDispatcher() {
    @Override
    public Message parseMessage(int commandId, CodedInputStream inputStream) throws IOException {
      switch(commandId) {
      case 1: return Base.HelloFromDev.parser().parsePartialFrom(inputStream);
      case 5: return Base.ChangeId.parser().parsePartialFrom(inputStream);
      case 8: return Multimedia.SoundsInfoResponce.parser().parsePartialFrom(inputStream);
      case 9: return Multimedia.StateVolume.parser().parsePartialFrom(inputStream);
      case 10: return Base.DisconnectingClient.parser().parsePartialFrom(inputStream);
      case 33: return Slave.SlavesInfoResponce.parser().parsePartialFrom(inputStream);
      case 34: return Slave.SlaveDisconnected.parser().parsePartialFrom(inputStream);
      case 35: return Slave.SlaveInfo.parser().parsePartialFrom(inputStream);
      case 301: return Filesystem.FSInfoReply.parser().parsePartialFrom(inputStream);
      case 302: return Filesystem.FormatFSReply.parser().parsePartialFrom(inputStream);
      case 303: return Filesystem.LsDirReply.parser().parsePartialFrom(inputStream);
      case 304: return Filesystem.FileInfoReply.parser().parsePartialFrom(inputStream);
      case 305: return Filesystem.DelFileReply.parser().parsePartialFrom(inputStream);
      case 306: return Filesystem.ReadFileReply.parser().parsePartialFrom(inputStream);
      case 307: return Filesystem.WriteFileReply.parser().parsePartialFrom(inputStream);
      case 308: return Filesystem.CalcMD5Reply.parser().parsePartialFrom(inputStream);
      case 501: return PTRKMilitary.StatFromPTRK.parser().parsePartialFrom(inputStream);
      case 502: return PTRKMilitary.PTRKSettings.parser().parsePartialFrom(inputStream);
      case 503: return PTRKMilitary.ReloadPtrk.parser().parsePartialFrom(inputStream);
      case 505: return PTRKMilitary.StatusFlightRocket.parser().parsePartialFrom(inputStream);
      case 506: return PTRKMilitary.StatusEndFlightRocket.parser().parsePartialFrom(inputStream);
      case 601: return TargetMilitary.SettingsTarget.parser().parsePartialFrom(inputStream);
      case 602: return TargetMilitary.StatisticsTarget.parser().parsePartialFrom(inputStream);
      case 603: return TargetMilitary.PositionOfTarget.parser().parsePartialFrom(inputStream);
      case 604: return TargetMilitary.ErrorsOfTarget.parser().parsePartialFrom(inputStream);
      case 651: return PanzerMilitary.SettingsPanzer.parser().parsePartialFrom(inputStream);
      case 652: return PanzerMilitary.StatisticsPanzerGun.parser().parsePartialFrom(inputStream);
      case 653: return PanzerMilitary.StatisticsPanzerCannon.parser().parsePartialFrom(inputStream);
      case 801: return MineThrower.MineThrowerStat.parser().parsePartialFrom(inputStream);
      case 1001: return Esp.ESPConnectToAP.parser().parsePartialFrom(inputStream);
      case 1002: return Esp.ESPConnectToTCP.parser().parsePartialFrom(inputStream);
      case 1003: return Esp.ESPSendByUDP.parser().parsePartialFrom(inputStream);
      case 1004: return Esp.ESPDiscoverServers.parser().parsePartialFrom(inputStream);
      case 1005: return Esp.ESPSendLogByUDP.parser().parsePartialFrom(inputStream);
      case 1006: return Esp.ESPConnectToTCPReply.parser().parsePartialFrom(inputStream);
      case 1007: return Esp.ESPTcpConfirmation.parser().parsePartialFrom(inputStream);
      case 1008: return Esp.ESPGetRssiByNetworkName.parser().parsePartialFrom(inputStream);
      case 1009: return Esp.ESPScanWifiByChannel.parser().parsePartialFrom(inputStream);
      case 1010: return Esp.ESPSetWifiAccessPoint.parser().parsePartialFrom(inputStream);
      case 1101: return Firmware.VersionReply.parser().parsePartialFrom(inputStream);
      case 1103: return Firmware.UpdateResourcesReply.parser().parsePartialFrom(inputStream);
      case 1104: return Firmware.FirmwareTaskReply.parser().parsePartialFrom(inputStream);
      case 1201: return RuntimeDbg.StackState.parser().parsePartialFrom(inputStream);
      case 1202: return RuntimeDbg.StackUsage.parser().parsePartialFrom(inputStream);
      case 1203: return RuntimeDbg.Assert.parser().parsePartialFrom(inputStream);
      case 1204: return RuntimeDbg.BuffersState.parser().parsePartialFrom(inputStream);
      case 1205: return RuntimeDbg.SomeData.parser().parsePartialFrom(inputStream);
      case 1206: return RuntimeDbg.RuntimeError.parser().parsePartialFrom(inputStream);
      case 1207: return RuntimeDbg.RuntimeSystemSnapshot.parser().parsePartialFrom(inputStream);
      case 2001: return EspSrv.ESP_WiFiRSSI.parser().parsePartialFrom(inputStream);
      case 2002: return EspSrv.ESP_Assert.parser().parsePartialFrom(inputStream);
      case 2003: return EspSrv.ESP_VersionReply.parser().parsePartialFrom(inputStream);
      case 2004: return EspSrv.ESP_FirmwareTaskReply.parser().parsePartialFrom(inputStream);
      case 2005: return EspSrv.ESP_UpdateResourcesReply.parser().parsePartialFrom(inputStream);
      case 2006: return EspSrv.ESP_SomeData.parser().parsePartialFrom(inputStream);
      case 2007: return EspSrv.ESP_RuntimeError.parser().parsePartialFrom(inputStream);
      case 4001: return RsMilitary.RsHelloFromDevice.parser().parsePartialFrom(inputStream);
      case 4002: return RsMilitary.RsReciveIr.parser().parsePartialFrom(inputStream);
      case 4004: return RsMilitary.RsButState.parser().parsePartialFrom(inputStream);
      case 4005: return RsMilitary.RsStressBeltSettings.parser().parsePartialFrom(inputStream);
      case 4006: return RsMilitary.RsStressBeltCheangeDamageMode.parser().parsePartialFrom(inputStream);
      case 4007: return RsMilitary.RsSlaveConnected.parser().parsePartialFrom(inputStream);
      case 4008: return RsMilitary.RsSlaveDisconnected.parser().parsePartialFrom(inputStream);
      case 4009: return RsMilitary.RsSlaveBatteryLevel.parser().parsePartialFrom(inputStream);
      case 4010: return RsMilitary.RsIlluminationLevel.parser().parsePartialFrom(inputStream);
      case 4011: return RsMilitary.RsSwitchState.parser().parsePartialFrom(inputStream);
      case 4012: return RsMilitary.RsGpsCoordinates.parser().parsePartialFrom(inputStream);
      case 4013: return RsMilitary.RsCompasData.parser().parsePartialFrom(inputStream);
      case 4014: return RsMilitary.RsStatusCompasIrEmiter.parser().parsePartialFrom(inputStream);
      case 4019: return RsMilitary.Azimuth.parser().parsePartialFrom(inputStream);
      case 4020: return RsMilitary.RsDeviceError.parser().parsePartialFrom(inputStream);
      case 5001: return WiredConnection.WiredHelloFromSlave.parser().parsePartialFrom(inputStream);
      case 5002: return WiredConnection.WiredStateByDevice.parser().parsePartialFrom(inputStream);
      case 5003: return WiredConnection.WiredInfoFromPyrotechny.parser().parsePartialFrom(inputStream);
      case 5004: return WiredConnection.WiredStateByIr.parser().parsePartialFrom(inputStream);
      case 5005: return WiredConnection.WiredInfoFromTargetShooter.parser().parsePartialFrom(inputStream);
      case 5006: return WiredConnection.WiredInfoMovingEvent.parser().parsePartialFrom(inputStream);
      case 5007: return WiredConnection.WiredInfoFromGrenadeThrower.parser().parsePartialFrom(inputStream);
      case 10001: return CommonMilitary.BatteryLevel.parser().parsePartialFrom(inputStream);
      case 10002: return CommonMilitary.GPSCoordinate.parser().parsePartialFrom(inputStream);
      case 10003: return CommonMilitary.SetTypeExercise.parser().parsePartialFrom(inputStream);
      case 10004: return CommonMilitary.SpatialPosition.parser().parsePartialFrom(inputStream);
      case 10201: return KitMilitary.StatById.parser().parsePartialFrom(inputStream);
      case 10202: return KitMilitary.StatByIdRepeated.parser().parsePartialFrom(inputStream);
      case 10203: return KitMilitary.SlaveBatteryLevel.parser().parsePartialFrom(inputStream);
      case 10204: return KitMilitary.StatFromKit.parser().parsePartialFrom(inputStream);
      case 10205: return KitMilitary.WeaponStat.parser().parsePartialFrom(inputStream);
      case 10206: return KitMilitary.KitSettings.parser().parsePartialFrom(inputStream);
      case 10207: return KitMilitary.StressBeltSettings.parser().parsePartialFrom(inputStream);
      case 10208: return KitMilitary.WeaponSettings.parser().parsePartialFrom(inputStream);
      case 10210: return KitMilitary.TankMineActivated.parser().parsePartialFrom(inputStream);
      case 10211: return KitMilitary.TankMineDeactivated.parser().parsePartialFrom(inputStream);
      case 10214: return KitMilitary.InfoFromHingedBlock.parser().parsePartialFrom(inputStream);
      case 10215: return KitMilitary.IrEmitterSettings.parser().parsePartialFrom(inputStream);
      case 10216: return KitMilitary.IrEmitterStatistic.parser().parsePartialFrom(inputStream);
      case 10217: return KitMilitary.SetTypeVehicle.parser().parsePartialFrom(inputStream);
      case 10218: return KitMilitary.MinesActivated.parser().parsePartialFrom(inputStream);
      case 10219: return KitMilitary.MinesDeactivated.parser().parsePartialFrom(inputStream);
      case 10220: return KitMilitary.ResponseQuantityBlocksPos.parser().parsePartialFrom(inputStream);
      case 10221: return KitMilitary.ResponseBlockByTimePos.parser().parsePartialFrom(inputStream);
      case 10222: return KitMilitary.IrCommutatorID.parser().parsePartialFrom(inputStream);
      case 10501: return PZRKMilitary.PzrkEvent.parser().parsePartialFrom(inputStream);
      case 10503: return PZRKMilitary.PzrkSetting.parser().parsePartialFrom(inputStream);
      case 10504: return PZRKMilitary.GpsInfoOfTargetPzrk.parser().parsePartialFrom(inputStream);
      case 10505: return PZRKMilitary.TargetPzrkConnected.parser().parsePartialFrom(inputStream);
      case 10506: return PZRKMilitary.TargetPzrkDisconnected.parser().parsePartialFrom(inputStream);
      case 10601: return AntiSniper.SettingAntiSniper.parser().parsePartialFrom(inputStream);
      case 10602: return AntiSniper.Command.parser().parsePartialFrom(inputStream);
      case 10603: return AntiSniper.AntiSniperError.parser().parsePartialFrom(inputStream);
      case 10801: return IndoorNavigation.DwmTagPosition.parser().parsePartialFrom(inputStream);
      case 10802: return IndoorNavigation.DwmAnchorCount.parser().parsePartialFrom(inputStream);
      case 10803: return IndoorNavigation.DwmAnchorList.parser().parsePartialFrom(inputStream);
      case 10804: return IndoorNavigation.DwmPositionFull.parser().parsePartialFrom(inputStream);
      default:
         return null;
      }
    }

    @Override
    public boolean dispatchMessage(ProtoServer.Connection connection, int commandId, Message message) {
      switch(commandId) {
      case 1: notifyHelloFromDevReceived(connection, (Base.HelloFromDev)message);
        return true;
      case 5: notifyChangeIdReceived(connection, (Base.ChangeId)message);
        return true;
      case 7: notifyPingReceived(connection);
        return true;
      case 8: notifySoundsInfoResponceReceived(connection, (Multimedia.SoundsInfoResponce)message);
        return true;
      case 9: notifyStateVolumeReceived(connection, (Multimedia.StateVolume)message);
        return true;
      case 10: notifyDisconnectingClientReceived(connection, (Base.DisconnectingClient)message);
        return true;
      case 33: notifySlavesInfoResponceReceived(connection, (Slave.SlavesInfoResponce)message);
        return true;
      case 34: notifySlaveDisconnectedReceived(connection, (Slave.SlaveDisconnected)message);
        return true;
      case 35: notifySlaveInfoReceived(connection, (Slave.SlaveInfo)message);
        return true;
      case 301: notifyFsInfoReplyReceived(connection, (Filesystem.FSInfoReply)message);
        return true;
      case 302: notifyFormatFsReplyReceived(connection, (Filesystem.FormatFSReply)message);
        return true;
      case 303: notifyLsDirReplyReceived(connection, (Filesystem.LsDirReply)message);
        return true;
      case 304: notifyFileInfoReplyReceived(connection, (Filesystem.FileInfoReply)message);
        return true;
      case 305: notifyDelFileReplyReceived(connection, (Filesystem.DelFileReply)message);
        return true;
      case 306: notifyReadFileReplyReceived(connection, (Filesystem.ReadFileReply)message);
        return true;
      case 307: notifyWriteFileReplyReceived(connection, (Filesystem.WriteFileReply)message);
        return true;
      case 308: notifyCalcMd5ReplyReceived(connection, (Filesystem.CalcMD5Reply)message);
        return true;
      case 501: notifyStatFromPtrkReceived(connection, (PTRKMilitary.StatFromPTRK)message);
        return true;
      case 502: notifyPtrkSettingsReceived(connection, (PTRKMilitary.PTRKSettings)message);
        return true;
      case 503: notifyReloadPtrkReceived(connection, (PTRKMilitary.ReloadPtrk)message);
        return true;
      case 504: notifyLaunchingRocketReceived(connection);
        return true;
      case 505: notifyStatusFlightRocketReceived(connection, (PTRKMilitary.StatusFlightRocket)message);
        return true;
      case 506: notifyStatusEndFlightRocketReceived(connection, (PTRKMilitary.StatusEndFlightRocket)message);
        return true;
      case 601: notifySettingsTargetReceived(connection, (TargetMilitary.SettingsTarget)message);
        return true;
      case 602: notifyStatisticsTargetReceived(connection, (TargetMilitary.StatisticsTarget)message);
        return true;
      case 603: notifyPositionOfTargetReceived(connection, (TargetMilitary.PositionOfTarget)message);
        return true;
      case 604: notifyErrorsOfTargetReceived(connection, (TargetMilitary.ErrorsOfTarget)message);
        return true;
      case 651: notifySettingsPanzerReceived(connection, (PanzerMilitary.SettingsPanzer)message);
        return true;
      case 652: notifyStatisticsPanzerGunReceived(connection, (PanzerMilitary.StatisticsPanzerGun)message);
        return true;
      case 653: notifyStatisticsPanzerCannonReceived(connection, (PanzerMilitary.StatisticsPanzerCannon)message);
        return true;
      case 701: notifyStopMovingCartReceived(connection);
        return true;
      case 801: notifyMineThrowerStatReceived(connection, (MineThrower.MineThrowerStat)message);
        return true;
      case 1001: notifyEspConnectToApReceived(connection, (Esp.ESPConnectToAP)message);
        return true;
      case 1002: notifyEspConnectToTcpReceived(connection, (Esp.ESPConnectToTCP)message);
        return true;
      case 1003: notifyEspSendByUdpReceived(connection, (Esp.ESPSendByUDP)message);
        return true;
      case 1004: notifyEspDiscoverServersReceived(connection, (Esp.ESPDiscoverServers)message);
        return true;
      case 1005: notifyEspSendLogByUdpReceived(connection, (Esp.ESPSendLogByUDP)message);
        return true;
      case 1006: notifyEspConnectToTcpReplyReceived(connection, (Esp.ESPConnectToTCPReply)message);
        return true;
      case 1007: notifyEspTcpConfirmationReceived(connection, (Esp.ESPTcpConfirmation)message);
        return true;
      case 1008: notifyEspGetRssiByNetworkNameReceived(connection, (Esp.ESPGetRssiByNetworkName)message);
        return true;
      case 1009: notifyEspScanWifiByChannelReceived(connection, (Esp.ESPScanWifiByChannel)message);
        return true;
      case 1010: notifyEspSetWifiAccessPointReceived(connection, (Esp.ESPSetWifiAccessPoint)message);
        return true;
      case 1011: notifyEspKillWifiAccessPointReceived(connection);
        return true;
      case 1101: notifyVersionReplyReceived(connection, (Firmware.VersionReply)message);
        return true;
      case 1103: notifyUpdateResourcesReplyReceived(connection, (Firmware.UpdateResourcesReply)message);
        return true;
      case 1104: notifyFirmwareTaskReplyReceived(connection, (Firmware.FirmwareTaskReply)message);
        return true;
      case 1201: notifyStackStateReceived(connection, (RuntimeDbg.StackState)message);
        return true;
      case 1202: notifyStackUsageReceived(connection, (RuntimeDbg.StackUsage)message);
        return true;
      case 1203: notifyAssertReceived(connection, (RuntimeDbg.Assert)message);
        return true;
      case 1204: notifyBuffersStateReceived(connection, (RuntimeDbg.BuffersState)message);
        return true;
      case 1205: notifySomeDataReceived(connection, (RuntimeDbg.SomeData)message);
        return true;
      case 1206: notifyRuntimeErrorReceived(connection, (RuntimeDbg.RuntimeError)message);
        return true;
      case 1207: notifyRuntimeSystemSnapshotReceived(connection, (RuntimeDbg.RuntimeSystemSnapshot)message);
        return true;
      case 2001: notifyEspWiFiRssiReceived(connection, (EspSrv.ESP_WiFiRSSI)message);
        return true;
      case 2002: notifyEspAssertReceived(connection, (EspSrv.ESP_Assert)message);
        return true;
      case 2003: notifyEspVersionReplyReceived(connection, (EspSrv.ESP_VersionReply)message);
        return true;
      case 2004: notifyEspFirmwareTaskReplyReceived(connection, (EspSrv.ESP_FirmwareTaskReply)message);
        return true;
      case 2005: notifyEspUpdateResourcesReplyReceived(connection, (EspSrv.ESP_UpdateResourcesReply)message);
        return true;
      case 2006: notifyEspSomeDataReceived(connection, (EspSrv.ESP_SomeData)message);
        return true;
      case 2007: notifyEspRuntimeErrorReceived(connection, (EspSrv.ESP_RuntimeError)message);
        return true;
      case 4001: notifyRsHelloFromDeviceReceived(connection, (RsMilitary.RsHelloFromDevice)message);
        return true;
      case 4002: notifyRsReciveIrReceived(connection, (RsMilitary.RsReciveIr)message);
        return true;
      case 4004: notifyRsButStateReceived(connection, (RsMilitary.RsButState)message);
        return true;
      case 4005: notifyRsStressBeltSettingsReceived(connection, (RsMilitary.RsStressBeltSettings)message);
        return true;
      case 4006: notifyRsStressBeltCheangeDamageModeReceived(connection, (RsMilitary.RsStressBeltCheangeDamageMode)message);
        return true;
      case 4007: notifyRsSlaveConnectedReceived(connection, (RsMilitary.RsSlaveConnected)message);
        return true;
      case 4008: notifyRsSlaveDisconnectedReceived(connection, (RsMilitary.RsSlaveDisconnected)message);
        return true;
      case 4009: notifyRsSlaveBatteryLevelReceived(connection, (RsMilitary.RsSlaveBatteryLevel)message);
        return true;
      case 4010: notifyRsIlluminationLevelReceived(connection, (RsMilitary.RsIlluminationLevel)message);
        return true;
      case 4011: notifyRsSwitchStateReceived(connection, (RsMilitary.RsSwitchState)message);
        return true;
      case 4012: notifyRsGpsCoordinatesReceived(connection, (RsMilitary.RsGpsCoordinates)message);
        return true;
      case 4013: notifyRsCompasDataReceived(connection, (RsMilitary.RsCompasData)message);
        return true;
      case 4014: notifyRsStatusCompasIrEmiterReceived(connection, (RsMilitary.RsStatusCompasIrEmiter)message);
        return true;
      case 4015: notifyRsPowerOnReceived(connection);
        return true;
      case 4016: notifyRsPowerOffReceived(connection);
        return true;
      case 4017: notifySetPositionComplitedReceived(connection);
        return true;
      case 4018: notifyRotationComplitedReceived(connection);
        return true;
      case 4019: notifyAzimuthReceived(connection, (RsMilitary.Azimuth)message);
        return true;
      case 4020: notifyRsDeviceErrorReceived(connection, (RsMilitary.RsDeviceError)message);
        return true;
      case 5001: notifyWiredHelloFromSlaveReceived(connection, (WiredConnection.WiredHelloFromSlave)message);
        return true;
      case 5002: notifyWiredStateByDeviceReceived(connection, (WiredConnection.WiredStateByDevice)message);
        return true;
      case 5003: notifyWiredInfoFromPyrotechnyReceived(connection, (WiredConnection.WiredInfoFromPyrotechny)message);
        return true;
      case 5004: notifyWiredStateByIrReceived(connection, (WiredConnection.WiredStateByIr)message);
        return true;
      case 5005: notifyWiredInfoFromTargetShooterReceived(connection, (WiredConnection.WiredInfoFromTargetShooter)message);
        return true;
      case 5006: notifyWiredInfoMovingEventReceived(connection, (WiredConnection.WiredInfoMovingEvent)message);
        return true;
      case 5007: notifyWiredInfoFromGrenadeThrowerReceived(connection, (WiredConnection.WiredInfoFromGrenadeThrower)message);
        return true;
      case 10001: notifyBatteryLevelReceived(connection, (CommonMilitary.BatteryLevel)message);
        return true;
      case 10002: notifyGpsCoordinateReceived(connection, (CommonMilitary.GPSCoordinate)message);
        return true;
      case 10003: notifySetTypeExerciseReceived(connection, (CommonMilitary.SetTypeExercise)message);
        return true;
      case 10004: notifySpatialPositionReceived(connection, (CommonMilitary.SpatialPosition)message);
        return true;
      case 10201: notifyStatByIdReceived(connection, (KitMilitary.StatById)message);
        return true;
      case 10202: notifyStatByIdRepeatedReceived(connection, (KitMilitary.StatByIdRepeated)message);
        return true;
      case 10203: notifySlaveBatteryLevelReceived(connection, (KitMilitary.SlaveBatteryLevel)message);
        return true;
      case 10204: notifyStatFromKitReceived(connection, (KitMilitary.StatFromKit)message);
        return true;
      case 10205: notifyWeaponStatReceived(connection, (KitMilitary.WeaponStat)message);
        return true;
      case 10206: notifyKitSettingsReceived(connection, (KitMilitary.KitSettings)message);
        return true;
      case 10207: notifyStressBeltSettingsReceived(connection, (KitMilitary.StressBeltSettings)message);
        return true;
      case 10208: notifyWeaponSettingsReceived(connection, (KitMilitary.WeaponSettings)message);
        return true;
      case 10209: notifyStatisticIsOverReceived(connection);
        return true;
      case 10210: notifyTankMineActivatedReceived(connection, (KitMilitary.TankMineActivated)message);
        return true;
      case 10211: notifyTankMineDeactivatedReceived(connection, (KitMilitary.TankMineDeactivated)message);
        return true;
      case 10212: notifyInfoActivatedMinesIsOverReceived(connection);
        return true;
      case 10213: notifyInfoDeactivatedMinesIsOverReceived(connection);
        return true;
      case 10214: notifyInfoFromHingedBlockReceived(connection, (KitMilitary.InfoFromHingedBlock)message);
        return true;
      case 10215: notifyIrEmitterSettingsReceived(connection, (KitMilitary.IrEmitterSettings)message);
        return true;
      case 10216: notifyIrEmitterStatisticReceived(connection, (KitMilitary.IrEmitterStatistic)message);
        return true;
      case 10217: notifySetTypeVehicleReceived(connection, (KitMilitary.SetTypeVehicle)message);
        return true;
      case 10218: notifyMinesActivatedReceived(connection, (KitMilitary.MinesActivated)message);
        return true;
      case 10219: notifyMinesDeactivatedReceived(connection, (KitMilitary.MinesDeactivated)message);
        return true;
      case 10220: notifyResponseQuantityBlocksPosReceived(connection, (KitMilitary.ResponseQuantityBlocksPos)message);
        return true;
      case 10221: notifyResponseBlockByTimePosReceived(connection, (KitMilitary.ResponseBlockByTimePos)message);
        return true;
      case 10222: notifyIrCommutatorIdReceived(connection, (KitMilitary.IrCommutatorID)message);
        return true;
      case 10501: notifyPzrkEventReceived(connection, (PZRKMilitary.PzrkEvent)message);
        return true;
      case 10502: notifyPzrkEventsIsOverReceived(connection);
        return true;
      case 10503: notifyPzrkSettingReceived(connection, (PZRKMilitary.PzrkSetting)message);
        return true;
      case 10504: notifyGpsInfoOfTargetPzrkReceived(connection, (PZRKMilitary.GpsInfoOfTargetPzrk)message);
        return true;
      case 10505: notifyTargetPzrkConnectedReceived(connection, (PZRKMilitary.TargetPzrkConnected)message);
        return true;
      case 10506: notifyTargetPzrkDisconnectedReceived(connection, (PZRKMilitary.TargetPzrkDisconnected)message);
        return true;
      case 10601: notifySettingAntiSniperReceived(connection, (AntiSniper.SettingAntiSniper)message);
        return true;
      case 10602: notifyCommandReceived(connection, (AntiSniper.Command)message);
        return true;
      case 10603: notifyAntiSniperErrorReceived(connection, (AntiSniper.AntiSniperError)message);
        return true;
      case 10801: notifyDwmTagPositionReceived(connection, (IndoorNavigation.DwmTagPosition)message);
        return true;
      case 10802: notifyDwmAnchorCountReceived(connection, (IndoorNavigation.DwmAnchorCount)message);
        return true;
      case 10803: notifyDwmAnchorListReceived(connection, (IndoorNavigation.DwmAnchorList)message);
        return true;
      case 10804: notifyDwmPositionFullReceived(connection, (IndoorNavigation.DwmPositionFull)message);
        return true;
      default:
         return false;
      }
    }

    @Override
    public void notifyOnConnected(ProtoServer.Connection connection) {
      EspConnection conn = new EspConnection(connection);
      connection.setApi(conn);

      OnConnectedListener localCopy = onConnectedListener;
      if (localCopy != null)
        localCopy.onConnected(conn);
    }

    @Override
    public void notifyOnError(ProtoServer.Connection connection, Throwable error) {
      OnErrorListener localCopy = onErrorListener;
      if (localCopy != null)
        localCopy.onError((Connection)connection.getApi(), error);
    }

    @Override
    public void notifyOnDisconnected(ProtoServer.Connection connection) {
      OnDisconnectedListener localCopy = onDisconnectedListener;
      if (localCopy != null)
        localCopy.onDisconnected((Connection)connection.getApi());
    }
  };

  static class EspConnection implements Connection {
    private ProtoServer.Connection mConnection;
    private ProtoServer mServer;
    private Object mAttachment;

    private EspConnection(ProtoServer.Connection connection) {
      mConnection = connection;
      mServer = connection.getServer();
    }

    @Override
    public boolean sendStartGame(Base.StartGame message) {
    	return mServer.sendCommand(mConnection, 3, message);
    }

    @Override
    public boolean sendStopGame() {
    	return mServer.sendCommand(mConnection, 4, null);
    }

    @Override
    public boolean sendPauseGame() {
    	return mServer.sendCommand(mConnection, 10, null);
    }

    @Override
    public boolean sendChangeId(Base.ChangeId message) {
    	return mServer.sendCommand(mConnection, 12, message);
    }

    @Override
    public boolean sendSetVolume(Multimedia.SetVolume message) {
    	return mServer.sendCommand(mConnection, 14, message);
    }

    @Override
    public boolean sendPing() {
    	return mServer.sendCommand(mConnection, 17, null);
    }

    @Override
    public boolean sendUpdateDev() {
    	return mServer.sendCommand(mConnection, 25, null);
    }

    @Override
    public boolean sendSetLanguage(Base.setLanguage message) {
    	return mServer.sendCommand(mConnection, 26, message);
    }

    @Override
    public boolean sendPlaySound(Multimedia.PlaySound message) {
    	return mServer.sendCommand(mConnection, 30, message);
    }

    @Override
    public boolean sendStopSound(Multimedia.StopSound message) {
    	return mServer.sendCommand(mConnection, 31, message);
    }

    @Override
    public boolean sendGetSoundsInfo() {
    	return mServer.sendCommand(mConnection, 32, null);
    }

    @Override
    public boolean sendSendDevType(Base.SendDevType message) {
    	return mServer.sendCommand(mConnection, 34, message);
    }

    @Override
    public boolean sendTurnOffDevice() {
    	return mServer.sendCommand(mConnection, 36, null);
    }

    @Override
    public boolean sendGetInfoSlaves() {
    	return mServer.sendCommand(mConnection, 37, null);
    }

    @Override
    public boolean sendFsInfo() {
    	return mServer.sendCommand(mConnection, 301, null);
    }

    @Override
    public boolean sendFormatFs() {
    	return mServer.sendCommand(mConnection, 302, null);
    }

    @Override
    public boolean sendLsDir(Filesystem.LsDir message) {
    	return mServer.sendCommand(mConnection, 303, message);
    }

    @Override
    public boolean sendFileInfo(Filesystem.FileInfo message) {
    	return mServer.sendCommand(mConnection, 304, message);
    }

    @Override
    public boolean sendDelFile(Filesystem.DelFile message) {
    	return mServer.sendCommand(mConnection, 305, message);
    }

    @Override
    public boolean sendReadFile(Filesystem.ReadFile message) {
    	return mServer.sendCommand(mConnection, 306, message);
    }

    @Override
    public boolean sendWriteFile(Filesystem.WriteFile message) {
    	return mServer.sendCommand(mConnection, 307, message);
    }

    @Override
    public boolean sendCalcMd5(Filesystem.CalcMD5 message) {
    	return mServer.sendCommand(mConnection, 308, message);
    }

    @Override
    public boolean sendStatFromPtrk(PTRKMilitary.StatFromPTRK message) {
    	return mServer.sendCommand(mConnection, 501, message);
    }

    @Override
    public boolean sendPtrkSettings(PTRKMilitary.PTRKSettings message) {
    	return mServer.sendCommand(mConnection, 502, message);
    }

    @Override
    public boolean sendReloadPtrk(PTRKMilitary.ReloadPtrk message) {
    	return mServer.sendCommand(mConnection, 503, message);
    }

    @Override
    public boolean sendSettingsTarget(TargetMilitary.SettingsTarget message) {
    	return mServer.sendCommand(mConnection, 601, message);
    }

    @Override
    public boolean sendShowTarget() {
    	return mServer.sendCommand(mConnection, 602, null);
    }

    @Override
    public boolean sendHideTarget() {
    	return mServer.sendCommand(mConnection, 603, null);
    }

    @Override
    public boolean sendStatisticsTarget(TargetMilitary.StatisticsTarget message) {
    	return mServer.sendCommand(mConnection, 604, message);
    }

    @Override
    public boolean sendResetError(TargetMilitary.ResetError message) {
    	return mServer.sendCommand(mConnection, 605, message);
    }

    @Override
    public boolean sendSettingsPanzer(PanzerMilitary.SettingsPanzer message) {
    	return mServer.sendCommand(mConnection, 651, message);
    }

    @Override
    public boolean sendStatisticsPanzerGun(PanzerMilitary.StatisticsPanzerGun message) {
    	return mServer.sendCommand(mConnection, 652, message);
    }

    @Override
    public boolean sendStatisticsPanzerCannon(PanzerMilitary.StatisticsPanzerCannon message) {
    	return mServer.sendCommand(mConnection, 653, message);
    }

    @Override
    public boolean sendGetStatisticsPanzerGun() {
    	return mServer.sendCommand(mConnection, 655, null);
    }

    @Override
    public boolean sendGetStatisticsPanzerCannon() {
    	return mServer.sendCommand(mConnection, 656, null);
    }

    @Override
    public boolean sendGetSettingsPanzer() {
    	return mServer.sendCommand(mConnection, 657, null);
    }

    @Override
    public boolean sendMovingCartForwardDirection() {
    	return mServer.sendCommand(mConnection, 701, null);
    }

    @Override
    public boolean sendMovingCartReverseDirection() {
    	return mServer.sendCommand(mConnection, 702, null);
    }

    @Override
    public boolean sendStopMovingCart() {
    	return mServer.sendCommand(mConnection, 703, null);
    }

    @Override
    public boolean sendMineThrowerSettings(MineThrower.MineThrowerSettings message) {
    	return mServer.sendCommand(mConnection, 801, message);
    }

    @Override
    public boolean sendEspConectionState(Esp.ESPConectionState message) {
    	return mServer.sendCommand(mConnection, 1001, message);
    }

    @Override
    public boolean sendEspConnectToTcpReply(Esp.ESPConnectToTCPReply message) {
    	return mServer.sendCommand(mConnection, 1002, message);
    }

    @Override
    public boolean sendEspTcpConfirmation(Esp.ESPTcpConfirmation message) {
    	return mServer.sendCommand(mConnection, 1003, message);
    }

    @Override
    public boolean sendEspServerDiscovered(Esp.ESPServerDiscovered message) {
    	return mServer.sendCommand(mConnection, 1004, message);
    }

    @Override
    public boolean sendEspRssiForNetworkName(Esp.ESPRssiForNetworkName message) {
    	return mServer.sendCommand(mConnection, 1005, message);
    }

    @Override
    public boolean sendEspWifiAccessPoint(Esp.ESPWifiAccessPoint message) {
    	return mServer.sendCommand(mConnection, 1006, message);
    }

    @Override
    public boolean sendEspKillWifiAccessPointReply(Esp.ESPKillWifiAccessPointReply message) {
    	return mServer.sendCommand(mConnection, 1007, message);
    }

    @Override
    public boolean sendReboot() {
    	return mServer.sendCommand(mConnection, 1101, null);
    }

    @Override
    public boolean sendVersionRequest() {
    	return mServer.sendCommand(mConnection, 1102, null);
    }

    @Override
    public boolean sendFirmwareTask(Firmware.FirmwareTask message) {
    	return mServer.sendCommand(mConnection, 1103, message);
    }

    @Override
    public boolean sendBeginUpdateResources() {
    	return mServer.sendCommand(mConnection, 1104, null);
    }

    @Override
    public boolean sendFinishUpdateResources() {
    	return mServer.sendCommand(mConnection, 1105, null);
    }

    @Override
    public boolean sendGetStack() {
    	return mServer.sendCommand(mConnection, 1201, null);
    }

    @Override
    public boolean sendGetBuffersState() {
    	return mServer.sendCommand(mConnection, 1202, null);
    }

    @Override
    public boolean sendSomeData(RuntimeDbg.SomeData message) {
    	return mServer.sendCommand(mConnection, 1203, message);
    }

    @Override
    public boolean sendRuntimeError(RuntimeDbg.RuntimeError message) {
    	return mServer.sendCommand(mConnection, 1204, message);
    }

    @Override
    public boolean sendRuntimeGetErrors() {
    	return mServer.sendCommand(mConnection, 1205, null);
    }

    @Override
    public boolean sendRuntimeClearErrorMessages() {
    	return mServer.sendCommand(mConnection, 1206, null);
    }

    @Override
    public boolean sendEspReboot() {
    	return mServer.sendCommand(mConnection, 2001, null);
    }

    @Override
    public boolean sendEspVersionRequest() {
    	return mServer.sendCommand(mConnection, 2002, null);
    }

    @Override
    public boolean sendEspFirmwareTask(EspSrv.ESP_FirmwareTask message) {
    	return mServer.sendCommand(mConnection, 2003, message);
    }

    @Override
    public boolean sendEspSomeData(EspSrv.ESP_SomeData message) {
    	return mServer.sendCommand(mConnection, 2005, message);
    }

    @Override
    public boolean sendEspRuntimeError(EspSrv.ESP_RuntimeError message) {
    	return mServer.sendCommand(mConnection, 2006, message);
    }

    @Override
    public boolean sendEspBeginUpdateResources() {
    	return mServer.sendCommand(mConnection, 2007, null);
    }

    @Override
    public boolean sendEspFinishUpdateResources() {
    	return mServer.sendCommand(mConnection, 2008, null);
    }

    @Override
    public boolean sendRsHelloFromMaster(RsMilitary.RsHelloFromMaster message) {
    	return mServer.sendCommand(mConnection, 4001, message);
    }

    @Override
    public boolean sendRsSendIr(RsMilitary.RsSendIr message) {
    	return mServer.sendCommand(mConnection, 4002, message);
    }

    @Override
    public boolean sendRsSystemCommand(RsMilitary.RsSystemCommand message) {
    	return mServer.sendCommand(mConnection, 4003, message);
    }

    @Override
    public boolean sendRsChangeId(RsMilitary.RsChangeID message) {
    	return mServer.sendCommand(mConnection, 4006, message);
    }

    @Override
    public boolean sendRsSetIndication(RsMilitary.RsSetIndication message) {
    	return mServer.sendCommand(mConnection, 4007, message);
    }

    @Override
    public boolean sendRsPowerOn() {
    	return mServer.sendCommand(mConnection, 4008, null);
    }

    @Override
    public boolean sendRsPowerOff() {
    	return mServer.sendCommand(mConnection, 4009, null);
    }

    @Override
    public boolean sendRsStressBeltSettings(RsMilitary.RsStressBeltSettings message) {
    	return mServer.sendCommand(mConnection, 4010, message);
    }

    @Override
    public boolean sendRsSendIrCustom(RsMilitary.RsSendIrCustom message) {
    	return mServer.sendCommand(mConnection, 4011, message);
    }

    @Override
    public boolean sendRsIlluminationLevelQuery() {
    	return mServer.sendCommand(mConnection, 4012, null);
    }

    @Override
    public boolean sendRsButtonsStateQuery() {
    	return mServer.sendCommand(mConnection, 4013, null);
    }

    @Override
    public boolean sendRsVisibleLaserOn(RsMilitary.RsVisibleLaserOn message) {
    	return mServer.sendCommand(mConnection, 4014, message);
    }

    @Override
    public boolean sendRsGetGps() {
    	return mServer.sendCommand(mConnection, 4015, null);
    }

    @Override
    public boolean sendRsGetCompas() {
    	return mServer.sendCommand(mConnection, 4016, null);
    }

    @Override
    public boolean sendRsGetStatus() {
    	return mServer.sendCommand(mConnection, 4017, null);
    }

    @Override
    public boolean sendPlaySoundToSlave(RsMilitary.PlaySoundToSlave message) {
    	return mServer.sendCommand(mConnection, 4020, message);
    }

    @Override
    public boolean sendSetPosition(RsMilitary.SetPosition message) {
    	return mServer.sendCommand(mConnection, 4021, message);
    }

    @Override
    public boolean sendBrakeOn() {
    	return mServer.sendCommand(mConnection, 4022, null);
    }

    @Override
    public boolean sendBrakeOff() {
    	return mServer.sendCommand(mConnection, 4023, null);
    }

    @Override
    public boolean sendRotationBySectorOnTime(RsMilitary.RotationBySectorOnTime message) {
    	return mServer.sendCommand(mConnection, 4024, message);
    }

    @Override
    public boolean sendStopRotation() {
    	return mServer.sendCommand(mConnection, 4025, null);
    }

    @Override
    public boolean sendWiredHelloFromMaster(WiredConnection.WiredHelloFromMaster message) {
    	return mServer.sendCommand(mConnection, 5001, message);
    }

    @Override
    public boolean sendWiredActionPyrotechny(WiredConnection.WiredActionPyrotechny message) {
    	return mServer.sendCommand(mConnection, 5002, message);
    }

    @Override
    public boolean sendWiredSettingsIrEmitter(WiredConnection.WiredSettingsIrEmitter message) {
    	return mServer.sendCommand(mConnection, 5003, message);
    }

    @Override
    public boolean sendWiredSendSequenceIrPackets(WiredConnection.WiredSendSequenceIrPackets message) {
    	return mServer.sendCommand(mConnection, 5004, message);
    }

    @Override
    public boolean sendWiredSendIrPacket(WiredConnection.WiredSendIrPacket message) {
    	return mServer.sendCommand(mConnection, 5005, message);
    }

    @Override
    public boolean sendWiredChangeId(WiredConnection.WiredChangeID message) {
    	return mServer.sendCommand(mConnection, 5006, message);
    }

    @Override
    public boolean sendWiredSettingsTargetShooter(WiredConnection.WiredSettingsTargetShooter message) {
    	return mServer.sendCommand(mConnection, 5007, message);
    }

    @Override
    public boolean sendWiredTargetShooterAction(WiredConnection.WiredTargetShooterAction message) {
    	return mServer.sendCommand(mConnection, 5008, message);
    }

    @Override
    public boolean sendWiredActionGrenadeThrower() {
    	return mServer.sendCommand(mConnection, 5009, null);
    }

    @Override
    public boolean sendWiredSetIndication(WiredConnection.WiredSetIndication message) {
    	return mServer.sendCommand(mConnection, 5010, message);
    }

    @Override
    public boolean sendWiredPlaySound(WiredConnection.WiredPlaySound message) {
    	return mServer.sendCommand(mConnection, 5011, message);
    }

    @Override
    public boolean sendWiredStopActions() {
    	return mServer.sendCommand(mConnection, 5012, null);
    }

    @Override
    public boolean sendGetBatteryLevel() {
    	return mServer.sendCommand(mConnection, 10001, null);
    }

    @Override
    public boolean sendGetSettings() {
    	return mServer.sendCommand(mConnection, 10002, null);
    }

    @Override
    public boolean sendChangeTeam(CommonMilitary.ChangeTeam message) {
    	return mServer.sendCommand(mConnection, 10003, message);
    }

    @Override
    public boolean sendKillPlayer(CommonMilitary.KillPlayer message) {
    	return mServer.sendCommand(mConnection, 10004, message);
    }

    @Override
    public boolean sendResetAllErrors() {
    	return mServer.sendCommand(mConnection, 10005, null);
    }

    @Override
    public boolean sendSetTypeExercise(CommonMilitary.SetTypeExercise message) {
    	return mServer.sendCommand(mConnection, 10006, message);
    }

    @Override
    public boolean sendStatFromKit(KitMilitary.StatFromKit message) {
    	return mServer.sendCommand(mConnection, 10201, message);
    }

    @Override
    public boolean sendWeaponStat(KitMilitary.WeaponStat message) {
    	return mServer.sendCommand(mConnection, 10202, message);
    }

    @Override
    public boolean sendKitSettings(KitMilitary.KitSettings message) {
    	return mServer.sendCommand(mConnection, 10203, message);
    }

    @Override
    public boolean sendStressBeltSettings(KitMilitary.StressBeltSettings message) {
    	return mServer.sendCommand(mConnection, 10204, message);
    }

    @Override
    public boolean sendWeaponSettings(KitMilitary.WeaponSettings message) {
    	return mServer.sendCommand(mConnection, 10205, message);
    }

    @Override
    public boolean sendGetAllStat() {
    	return mServer.sendCommand(mConnection, 10206, null);
    }

    @Override
    public boolean sendSilentMode(KitMilitary.SilentMode message) {
    	return mServer.sendCommand(mConnection, 10207, message);
    }

    @Override
    public boolean sendGetActivatedMines() {
    	return mServer.sendCommand(mConnection, 10208, null);
    }

    @Override
    public boolean sendGetDeactivatedMines() {
    	return mServer.sendCommand(mConnection, 10209, null);
    }

    @Override
    public boolean sendGetInfoFromHingedBlock(KitMilitary.GetInfoFromHingedBlock message) {
    	return mServer.sendCommand(mConnection, 10210, message);
    }

    @Override
    public boolean sendIrEmitterSettings(KitMilitary.IrEmitterSettings message) {
    	return mServer.sendCommand(mConnection, 10211, message);
    }

    @Override
    public boolean sendIrEmitterStatistic(KitMilitary.IrEmitterStatistic message) {
    	return mServer.sendCommand(mConnection, 10212, message);
    }

    @Override
    public boolean sendSetDamageAppropriateToWeapon(KitMilitary.SetDamageAppropriateToWeapon message) {
    	return mServer.sendCommand(mConnection, 10213, message);
    }

    @Override
    public boolean sendSaveTableDamage() {
    	return mServer.sendCommand(mConnection, 10214, null);
    }

    @Override
    public boolean sendSetTypeVehicle(KitMilitary.SetTypeVehicle message) {
    	return mServer.sendCommand(mConnection, 10215, message);
    }

    @Override
    public boolean sendGetQuantityBlocksPos(KitMilitary.GetQuantityBlocksPos message) {
    	return mServer.sendCommand(mConnection, 10216, message);
    }

    @Override
    public boolean sendGetBlockByTimePos(KitMilitary.GetBlockByTimePos message) {
    	return mServer.sendCommand(mConnection, 10217, message);
    }

    @Override
    public boolean sendDeleteBlocksPos(KitMilitary.DeleteBlocksPos message) {
    	return mServer.sendCommand(mConnection, 10218, message);
    }

    @Override
    public boolean sendGetAllEventsPzrk() {
    	return mServer.sendCommand(mConnection, 10501, null);
    }

    @Override
    public boolean sendPzrkSetting(PZRKMilitary.PzrkSetting message) {
    	return mServer.sendCommand(mConnection, 10502, message);
    }

    @Override
    public boolean sendSettingAntiSniper(AntiSniper.SettingAntiSniper message) {
    	return mServer.sendCommand(mConnection, 10601, message);
    }

    @Override
    public boolean sendCommand(AntiSniper.Command message) {
    	return mServer.sendCommand(mConnection, 10602, message);
    }

    @Override
    public boolean sendDefeatTarget() {
    	return mServer.sendCommand(mConnection, 10603, null);
    }

    @Override
    public boolean sendSetDwmPanId(IndoorNavigation.SetDwmPanId message) {
    	return mServer.sendCommand(mConnection, 10801, message);
    }

    @Override
    public void disconnect() {
      mServer.disconnectClient(mConnection);
    }

    @Override
    public Object getAttachment() {
      return mAttachment;
    }

    @Override
    public void setAttachment(Object attachment) {
      mAttachment = attachment;
    }

    @Override
    public int getConnectionId() {
      return mConnection.getId();
    }

    @Override
    public ProtoServer.Connection getServerConnection() {
      return mConnection;
    }

  }

}
