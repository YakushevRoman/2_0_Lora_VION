syntax="proto3";

import weak "forpost.proto";

// this is for java
option optimize_for = LITE_RUNTIME;

option go_package = "forpost_server";

enum StateBool{
	STATE_NON 		= 0; // не определено 
	STATE_TRUE 		= 1; // активно
	STATE_FALSE 	= 2; // не активно
}

enum ShootingModes{
	SINGLE_SHOOTING_MODE 	= 0;  
	BURST_FIRING_MODE  		= 1; 
	AUTOMATIC_FIRING_MODE 	= 2; 
}

// Обратная связь для статистики на экране
message StatFromServerToKit {
	option (s2c_id) = 18;
	
	int32 murders_number = 1; // Кол-во убийств врагов
	int32 hits_number = 2; // Кол-во попадания в врага
	uint32 points = 3; // количество очков у игрока
}

// От тагера к серверу - статистика тагера.
// От сервера к тагеру - какую статистику необходимо применить тагеру.
message StatFromKit {
	option (c2s_id) = 2;
	option (s2c_id) = 1;
	
	int32 kills = 2;            	// Суммарное кол-во смертей, в старом 71й байт
	int32 respawns = 3;         	// Кол-во возраждений, в старом 67 байт
	int32 aid_kit_number = 4;   	// Кол-во полученных аптечек, в старом 69й байт
	int32 add_clips_number = 5; 	// Кол-во добавлений магазинов, в старом 70й байт
	int32 add_ammo_number = 6;  	// Кол-во добалений патронов
	int32 current_health = 7;  		// Текущее кол-во жизней, в старом протоколе 64й байт
	int32 game_status = 8;      	// Игровое состояние: 0-не в игре, 1-в игре, 2-на паузе, 3-в сервисном режиме в старом протоколе 72й байт
	int32 team_color = 9;       	// DEPRECATED: Цвет команды, в старом протоколе 66й байт
	int32 serial_number = 10;   	// Серийный номер комплекта
	int32 curr_clips_number = 11; 	// Текущее кол-во магазинов, в старом протоколе 15й байт
	int32 curr_ammo_number = 12; 	// Текущее кол-во патронов, в старом протоколе 14й байт
	int32 last_kill_tager_id = 13;  // ID комплекта, который последний поразил жилет (обнуляется после отправки пакета). В старом протоколе 111й байт
	bool radiation_active = 16; 	// Игрок ранен радиацией (сбрасывается после отправки пакета). В старом протоколе 186й байт
	int32 kit_tick = 17; 			// millis from start kit (internal clock)
	int32 shots_number = 18; 		// количество произведенных выстрелов
	int32 battery_level = 19;		// уровень заряда батареи
	uint32 game_id = 20; 			// id current game
	bool cheat_detected = 21;		// обнаружено несанкционированное выключение слейва
	uint32 default_health = 22;		// количество жизней согласно настройкам
	uint32 numKilledPlayers = 23;	// количество убитых игроков этим игроком
	uint32 numHitsToPlayers = 24;	// количество попаданий в других игроков
}

// От тагера к серверу - текущие настройки комплекта.
// От сервера к тагеру - настройки, которые необходимо применить.
message SettingsArena2_5{
	option (c2s_id) = 3;
	option (s2c_id) = 2;
		
	int32 shots_in_auto_mode   = 1;         // Кол-во выстрелов в автоматическом режиме, в старом протоколе 82й байт
	int32 IR_strength          = 2;         // Сила ИК излучения, в старом протоколе 6й байт
	int32 IR_max_strength      = 3;         // Макс. сила ИК излучения при переключении пультом, в старом протоколе 8й байт DEPRECATED
	int32 IR_min_strength      = 4;         // Мин. сила ИК излучения при переключении пультом, в старом протоколе 7й байт DEPRECATED
	int32 sound_volume         = 5 [deprecated=true]; // Громкость звука, в старом протоколе 12,13й байт DEPRECATED
	int32 damage               = 6;         // Урон, в старом протоколе 9й байт
	bool  friendly_fire        = 7;         // Дружественный огонь, в старом протоколе 80й байт
	bool  resolution_change_shoot_mode = 8; // Разрешение смены режима стрельбы, в старом протоколе 3й байт
	bool  infinite_clips       = 9;         // Бесконечные магазины, в старом протоколе 81й байт
	int32 default_health       = 10;        // Стандартное кол-во жизней, в старом протоколе 65й байт
	int32 fire_rate            = 11;        // Скорострельность, в старом протоколе 10,11й байт
	int32 default_clips_number = 12;        // Стандартное кол-во магазинов, в старом протоколе 4й байт
	int32 default_ammo_number  = 13;        // Стандартное кол-во патронов, в старом протоколе 5й байт
	int32 shock_time           = 14;        // Время шока, в старом протоколе 83й байт
	int32 invulnerability_time = 15;        // Время неуязвимости, в старом протоколе 75й байт
	int32 reload_time          = 16;        // Время перезарядки, в старом протоколе 188й байт
	int32 autorespawn_time     = 17;        // Время автовозраждения, в старом протоколе 108й байт
	int32 kit_tick             = 18;        // millis from start kit (internal clock) DEPRECATED
	bool  inverse_mode         = 19;        // state of inverse mode
	bool  autoreload_mode      = 20;        // state of autoreload 
	bool  tsop_3D_mode         = 21;        // state of 3D tsop DEPRECATED
	bool  state_vobro_on_HB    = 22;        // state vibro on HB
	int32 role_of_player       = 23;        // Possible value: 0-default; 1-doctor; 2-vampire; 3-zomby; 4-hostage; 5-sniper; 6-stormrooper
	bool  touch_sensor_enable  = 24;        // State of touch sensor

	bool  draw_timer 			= 25;       // set true if need to draw timer on screen
	bool  draw_place      		= 26;       // set true if need to draw place on screen
	
	int32 regenerating_health   = 27;		// Количество восстанавливаемых жизней(за один тик регенерации). Передавать в формате Miles(1-15)
	int32 regeneration_period   = 28;		// Периодичность, с которой жизни восстанавливаются(в секундах)		
	int32 time_till_regeneration = 29;		// Отсрочка до начала регенерации(в секундах)	
	int32 invulnerability_on_respawn = 30;  // Время неуязвимости после перерождения(в секундах)
	int32 bleed_period  		 = 31;		// Периодичность, с которой жизни отнимаются(в секундах)
	int32 bleed_damage 			 = 32;		// Количество отнимаемых жизней(за один тик кровотечения). Передавать в формате Miles(1-15)

	bool  state_vibro_on_tag     = 33;    	// set true if need to turn on kickback on tag
 
    uint32 tsop_mode        	  = 34;    	// 0 - damage; 1 - ignore; 2 - deactivate
    uint32 auto_turn_off_timeout  = 35;    	// 0 - turn off should be in ms  !!!max 12h
    uint32 shots_till_overheat    = 36;    	// 0 - turn off        
    uint32 cooldown_time_overheat = 37;    	// timeout for back tager to normal state (ms)
    
	bool   allowed_hb_off		  = 38;	  	// Разрешение играть без повязки true - разрешено, false - запрещено.

	uint32 modification_time	  = 39;	   	// Time stamp tager
	
	bool differential_damage 	  = 40;     //включить/выключить дифференцированый урон

	int32 team_color			  = 41;     // Цвет команды, в старом протоколе 66й байт

	uint32 explosion_wave_lenght = 44; 		// on, off
    bool explosion		 		  = 45; 	// on, off
	uint32 explosion_power_ir	  = 46; 	// Мощность излучателей при взрыве.
	bool lumbago				  = 49;     // on, off
	bool takeDamageFromStressBelt = 50;		// on, off
	StateBool activateSideShotLight = 51; // будет ли загоратся боковая подсветка у TAGER_F05 во время стрельбы
}

// Возрождение комплекта
message Respawn{
	option (s2c_id) = 5;
}

// Команда насения урона радиацией
message Radiation{
	option (s2c_id) = 7;
	
	int32 damage = 1; // Урон радиации по Miles урону
}

// Удвоение жизней. Применится, если комплект в игровом состоянии
message DoubleHealth{
	option (s2c_id) = 8;
}

// Добавление жизней. Применится, если комплект в игровом состоянии
message AddHealth{
	option (s2c_id) = 9;
	
	int32 health_number = 1; // Кол-во пополняемых жизней
}

// Убить комплект. Применится, если комплект в игровом состоянии
message KillPlayer{
	option (s2c_id) = 11;
}

// Смена цвета комплекта. Если комплект находился в игре, автоматически остановится игра для текущего комплекта
message ChangeColor{
	option (s2c_id) = 13;
	
	int32 color = 1; // Цвет который нужно применить
}

message GetSettingsArena2_5{
	option (s2c_id) = 20;
}

message GetAllStatArena2_5{
	option (s2c_id) = 21;
}


// Возрождение комплекта
message ScoreAndPlace{
	option (s2c_id) = 27;

	int32 score  = 1;   // count of score
	int32 place  = 2;   // palce number
}

message SetPlayTime{
	option (s2c_id) = 28;
	
	int32 time_sec = 1;        // necessary value of sec to finish raund
}

//Смена состояния комплекта на "флагоносца" или на обычный режим(подтверждение смены состояния этим же сообщением)
message SetFlagState{
	option (c2s_id) = 4;
	option (s2c_id) = 29;

	bool has_flag = 1;//0 - обычный режим игры, 1 - флагоносец
	int32 id_flag = 2;
}

//Настройки для дифф урона по комплекту
message DiffDamage{
	option (s2c_id) = 35;

	int32 damagePercent_head       = 1;    // value of damage percent onto head from 0 to 300
	int32 damagePercent_bodyBack   = 2;    // value of damage percent onto body from 0 to 300
	int32 damagePercent_bodyFfront = 3;    // value of damage percent onto body from 0 to 300
	int32 damagePercent_leftArm    = 4;    // value of damage percent onto arm from 0 to 300
	int32 damagePercent_rightArm   = 5;    // value of damage percent onto arm from 0 to 300
    int32 damagePercent_tagger     = 6;    // value of damage percent onto tagger from 0 to 300
	int32 time_destroy_tagger      = 7;    // value of time destroy tagger from 0 to 254 sec	
}

//Логирование передачи по RF каналу
message StatusSubGhz{
	option (c2s_id) = 38;

	int32 dev_id_slave				= 1;	
	int32 number_send_packets		= 2;	
	int32 number_lost_packets		= 3;
	int32 number_reconnect			= 4;	
	fixed32 precent_not_confirm		= 5;	
	int32 AFC_slave					= 6;
	int32 value_shift_freq_slave	= 7;
	int32 value_rssi				= 8;
	int32 error_code				= 9;
}

//Включение доп. функций
message AdditionalFunctionality{
	option (c2s_id) =  12;
	option (s2c_id) = 39;

	bool lumbago 			= 1; // on, off
}

//Настройки для пресетов
message PresetSettings{
	option (c2s_id) = 13;
	option (s2c_id) = 40;	

	int32 radiation_damage				= 1; //урон от радиации: 1 - лечение при уроне радиацией; 0 - нет воздействия; 2 - урон от радиации;
	int32 medication_damage				= 2; //урон от радиации: 1 - лечение при уроне лечением; 0 - нет воздействия; 2 - урон от лечения;
	bool zombies_damage_change_team		= 3; //перекрашивание игрока в цвет своей команды при летальном уроне разрешено
	int32 percent_vampires				= 4; //процент вампиризма
	int32 role_player					= 5; //роль игрока
	int32 custom_preset_id    = 6; //пользовательский пресет
	bool zombie_infection     = 7; //при смертельном уроне делать жертву зомби

}

enum TypeWeaponsDamage {
	DEFAULT_TYPE 			= 0;
	TOMMY_GUN_TYPE			= 1;
	GRENADE_GUN_TYPE		= 2;
	SHOT_GUN_TYPE			= 3;
	PISTOL_GUN_TYPE			= 4;
	MEDICINE_TYPE			= 5;
	VAMPIRE_TYPE			= 6;
	ZOMBY_TYPE				= 7;
	RPK_GUN_TYPE			= 8;
	RADIATION_GUN_TYPE		= 9;
	HOSTAGE 				= 10;
}

message WeaponSettings{
	option (c2s_id) = 14;
	option (s2c_id) = 41;

	bool is_active_weapon1							= 1;  // первое оружие разрешено
	bool is_active_weapon2							= 2;  // второе оружие разрешено
	int32 damage_weapon1							= 3;  // урон первого оружия
	int32 damage_weapon2							= 4;  // урон второго оружия	
	TypeWeaponsDamage type_damage_weapon1			= 5;  // тип урона первого оружия
	TypeWeaponsDamage type_damage_weapon2			= 6;  // тип урона второго оружия
	uint32 recharge_time_weapon1					= 7;  // время перезарядки первого оружия
	uint32 recharge_time_weapon2					= 8;  // время перезарядки второго оружия
	bool  friendly_fire_weapon1						= 9;  // дружественный огонь первого оружия разрешен
	bool  friendly_fire_weapon2						= 10; // дружественный огонь второго оружия разрешен
	bool  infinite_clips_weapon1					= 11; // бесконечные обоймы первого оружия разрешены 
	bool  infinite_clips_weapon2					= 12; // бесконечные обоймы второго оружия разрешены
	uint32 clips_weapon1							= 13; // кол-во обойм первого оружия
	uint32 clips_weapon2							= 14; // кол-во обойм второго оружия
	uint32 ammo_weapon1								= 15; // кол-во патронов первого оружия
	uint32 ammo_weapon2								= 16; // кол-во патронов второго оружия
	uint32 shots_in_auto_mode_weapon1				= 17; // выстрелов в очереди первого оружия
	uint32 shots_in_auto_mode_weapon2				= 18; // выстрелов в очереди второго оружия
	uint32 rate_of_fire_weapon1						= 19; // скорострельность первого оружия
	uint32 rate_of_fire_weapon2						= 20; // скорострельность второго оружия
	int32 ir_power_weapon1          				= 21; // мощность ИК-излучения первого оружия, в старом протоколе 6й байт
	int32 ir_power_weapon2          				= 22; // мощность ИК-излучения второго оружия, в старом протоколе 6й байт
	bool autoreload_weapon1							= 23; // автоперезарядка первого оружия разрешена
	bool autoreload_weapon2							= 24; // автоперезарядка второго оружия разрешена
	bool touch_sensor_enable						= 25; // датчик второй руки разрешен
	bool kickback									= 26; // отдача разрешена	
	int32 auto_power_off_time						= 28; // время автовыключения оружия
	bool barrel_overheating							= 30; // перегрев ствола разрешен
	int32 cooling_time								= 31; // время охлаждения
	bool auto_power_off								= 33; // автовыключение разрешено
	int32 number_of_shot_for_overheat				= 35; // кол-во выстрелов для перегрева оружия
	ShootingModes defaultFiringModeWeapon1			= 36; // режим стрельбы который устанавливаться для первого оружия при старте игры
	ShootingModes defaultFiringModeWeapon2			= 37; // режим стрельбы который устанавливаться для второго оружия при старте игры
}

message BleedingSet{
	option (s2c_id) = 42;

	bool is_bleeding_active 			= 1;
}

//отправка времени изменения списка ID
message PlayersTableTimeStamp{
	option (c2s_id) = 15;

	uint32 time_stamp					= 1; // время изменения списка комплектов
}

//элемент ID комплекта
message DeviceTableEntity {
	uint32 id 							= 1; // ID комплекта
	uint32 team_color 					= 2; // цвет команды
};


enum PlayersTableFlags {
	PT_RESERVED 						= 0;
	PT_RESET	             			= 1; // (1<<0)
	PT_READ_ALL            				= 2; // (1<<1) not implemented
	PT_ADD								= 4; // (1<<2)
	PT_UPDATE							= 8; // (1<<3) not implemented
	PT_REMOVE                			= 16; // (1<<4) not implemented
	PT_READ                				= 32; // (1<<5) not implemented
	PT_RESPONSE            				= 64; // (1<<6) not implemented
}

enum PlayersTableDevType {
	PL_TAG = 0;
	PL_BOMBA_PRO = 1;
}

//отправка списка ID комплектов, которые участвуют в игре
message PlayersTable{
	option (s2c_id) = 43;
	option (c2s_id) = 16;
	
	repeated DeviceTableEntity list 	= 1; // список комплектов, которые участвуют в игре
	uint32 time_stamp 					= 2; // время изменения списка комплектов
	uint32 game_id 						= 3; // id current game
	uint32 flag 						= 4; // PlayerTableFlags
	PlayersTableDevType typeDev			= 5; // тип устройства id которого будет воспринемать устройство
};

message SetHealth{
	option (s2c_id) = 44;

	uint32 currentHealth = 1; // текущее здоровье комплекта 
};

message SetDefHealth{
	option (s2c_id) = 45;
	
	uint32 defaultHealth = 1; // здоровье по умолчанию (в currentHealth будет занесено defaultHealth после возрождения, рестарта игры итд.)
};

enum SpModSpecies{
	RANDOM			= 0;
	SM_NINJA		= 1;
	SM_DOCTOR		= 2;
	SM_SHIELD		= 3;
	SM_BOMBA		= 4;
	SM_ULT_DAMAGE	= 5;
}

message SuperModeSettings{
	option (s2c_id) = 47;
	option (c2s_id) = 17;
	
	SpModSpecies species		= 1; // выбор режима (супер способности)
	uint32 timeToActivate		= 2; // время нажатия для активации
	uint32 activityTime			= 3; // время в течении которого будет активен данный режим
	uint32 cooldown				= 4; // время перезарядки
	StateBool isActiv			= 5; // активен ли режим
};

message GetSuperModeSettings{
	option (s2c_id) = 48;
};

message StatusSuperMode{
	option (c2s_id) = 18;
	
	bool is_active = 1; //активирован ли супер режим
	SpModSpecies currentSpecie = 2; //текущий режим
};

message SettingsHealingRun{
	option (s2c_id) = 49;
	
	StateBool isActiv 	= 1; // активация данной возможности
	uint32 amountHealth = 2; // количество здоровья восполняемое игроку за один шаг
};

message SettingsNotAgr{
	option (s2c_id) = 50;
	
	StateBool isActiv = 1; // активация данной возможности
	uint32 percentageSensitivity = 2; // процент чуствительность детекции агрессии 
}

message MiTagStatus{
	option (c2s_id) = 19;
	
	uint32 stepCounter 	= 1; // счетчик шагов
	uint32 runCounter 	= 2; // счетчик "перебежек"
	uint32 stepRate 	= 3; // темп шагов 
	uint32 hitCounter	= 4; // счетчик ударов по тагеру	
};

message NotAgrStatus{
	option (c2s_id) = 20;
	
	bool aggressionDetected = 1; // зафиксирована ли агрессия
}

enum TypeCustomTestMode {
	CTM_UNKNOWN 			= 0; // будет воспринято как ошибку при приеме
	CTM_AUTOMATIC_FIRE		= 1; // активирует программную эмуляцию зажатия курка, и единоразово выставляет необходимые настройки
}

message CustomTestMode{
	option (s2c_id) = 150;
	
	StateBool isActiv	= 1; // включить или выключить выбранный режим
	TypeCustomTestMode mode	= 2; // режим тестирования
}
