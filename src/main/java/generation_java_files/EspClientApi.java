// Generated by the protocol buffer compiler. DO NOT EDIT!
// if you need to change something in code generator, please contact Alexander Lobas (alexanderlobas@yahoo.com)
package generation_java_files;

import build.generated.source.proto.main.java.Esp;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.Message;
import com.google.protobuf.MessageLite;
import server_backend.HandlerWrapper;
import server_backend.ProtoClient;
import server_backend.servers.UIThreadClientCommandDispatcher;

import java.io.IOException;

public class EspClientApi implements ProtoClient.ProtocolDispatcher {

    public EspClientApi(ProtoClient client, boolean callListenersInUIThread, HandlerWrapper handlerWrapper) {
        this.client = client;
        if (callListenersInUIThread)
            client.setProtocolDispatcher(new UIThreadClientCommandDispatcher(this, handlerWrapper));
        else
            client.setProtocolDispatcher(this);
    }

    private ProtoClient client;

    public boolean sendEspConnectToAp(Esp.ESPConnectToAP message) {
        return client.sendCommand(1001, message);
    }

    public boolean sendEspConnectToTcp(Esp.ESPConnectToTCP message) {
        return client.sendCommand(1002, message);
    }

    public boolean sendEspSendByUdp(Esp.ESPSendByUDP message) {
        return client.sendCommand(1003, message);
    }

    public boolean sendEspDiscoverServers(Esp.ESPDiscoverServers message) {
        return client.sendCommand(1004, message);
    }

    public boolean sendEspSendLogByUdp(Esp.ESPSendLogByUDP message) {
        return client.sendCommand(1005, message);
    }

    public boolean sendEspConnectToTcpReply(Esp.ESPConnectToTCPReply message) {
        return client.sendCommand(1006, message);
    }

    public boolean sendEspTcpConfirmation(Esp.ESPTcpConfirmation message) {
        return client.sendCommand(1007, message);
    }

    public boolean sendEspGetRssiByNetworkName(Esp.ESPGetRssiByNetworkName message) {
        return client.sendCommand(1008, message);
    }

    public boolean sendEspScanWifiByChannel(Esp.ESPScanWifiByChannel message) {
        return client.sendCommand(1009, message);
    }

    public boolean sendEspSetWifiAccessPoint(Esp.ESPSetWifiAccessPoint message) {
        return client.sendCommand(1010, message);
    }

    public boolean sendEspKillWifiAccessPoint() {
        return client.sendCommand(1011, null);
    }

    public void diconnect() {
        client.disconnect();
    }

    public ProtoClient getClient() {
        return client;
    }

    // Listeners interfaces for incoming messages

    public interface OnEspConectionStateListener {
        void onEspConectionStateReceived(Esp.ESPConectionState message);
    }

    public interface OnEspConnectToTcpReplyListener {
        void onEspConnectToTcpReplyReceived(Esp.ESPConnectToTCPReply message);
    }

    public interface OnEspTcpConfirmationListener {
        void onEspTcpConfirmationReceived(Esp.ESPTcpConfirmation message);
    }

    public interface OnEspServerDiscoveredListener {
        void onEspServerDiscoveredReceived(Esp.ESPServerDiscovered message);
    }

    public interface OnEspRssiForNetworkNameListener {
        void onEspRssiForNetworkNameReceived(Esp.ESPRssiForNetworkName message);
    }

    public interface OnEspWifiAccessPointListener {
        void onEspWifiAccessPointReceived(Esp.ESPWifiAccessPoint message);
    }

    public interface OnEspKillWifiAccessPointReplyListener {
        void onEspKillWifiAccessPointReplyReceived(Esp.ESPKillWifiAccessPointReply message);
    }

    public interface OnConnectedListener {
        void onConnected();
    }

    public interface OnErrorListener {
        void onError(Throwable error);
    }

    public interface OnDisconnectedListener {
        void onDisconnected();
    }


    private volatile OnEspConectionStateListener onEspConectionStateListener = null;
    private volatile OnEspConnectToTcpReplyListener onEspConnectToTcpReplyListener = null;
    private volatile OnEspTcpConfirmationListener onEspTcpConfirmationListener = null;
    private volatile OnEspServerDiscoveredListener onEspServerDiscoveredListener = null;
    private volatile OnEspRssiForNetworkNameListener onEspRssiForNetworkNameListener = null;
    private volatile OnEspWifiAccessPointListener onEspWifiAccessPointListener = null;
    private volatile OnEspKillWifiAccessPointReplyListener onEspKillWifiAccessPointReplyListener = null;
    private volatile OnConnectedListener onConnectedListener = null;
    private volatile OnErrorListener onErrorListener = null;
    private volatile OnDisconnectedListener onDisconnectedListener = null;

    private void notifyEspConectionStateReceived(Esp.ESPConectionState message) {
        OnEspConectionStateListener localCopy = onEspConectionStateListener;
        if (localCopy != null)
            localCopy.onEspConectionStateReceived(message);
    }

    private void notifyEspConnectToTcpReplyReceived(Esp.ESPConnectToTCPReply message) {
        OnEspConnectToTcpReplyListener localCopy = onEspConnectToTcpReplyListener;
        if (localCopy != null)
            localCopy.onEspConnectToTcpReplyReceived(message);
    }

    private void notifyEspTcpConfirmationReceived(Esp.ESPTcpConfirmation message) {
        OnEspTcpConfirmationListener localCopy = onEspTcpConfirmationListener;
        if (localCopy != null)
            localCopy.onEspTcpConfirmationReceived(message);
    }

    private void notifyEspServerDiscoveredReceived(Esp.ESPServerDiscovered message) {
        OnEspServerDiscoveredListener localCopy = onEspServerDiscoveredListener;
        if (localCopy != null)
            localCopy.onEspServerDiscoveredReceived(message);
    }

    private void notifyEspRssiForNetworkNameReceived(Esp.ESPRssiForNetworkName message) {
        OnEspRssiForNetworkNameListener localCopy = onEspRssiForNetworkNameListener;
        if (localCopy != null)
            localCopy.onEspRssiForNetworkNameReceived(message);
    }

    private void notifyEspWifiAccessPointReceived(Esp.ESPWifiAccessPoint message) {
        OnEspWifiAccessPointListener localCopy = onEspWifiAccessPointListener;
        if (localCopy != null)
            localCopy.onEspWifiAccessPointReceived(message);
    }

    private void notifyEspKillWifiAccessPointReplyReceived(Esp.ESPKillWifiAccessPointReply message) {
        OnEspKillWifiAccessPointReplyListener localCopy = onEspKillWifiAccessPointReplyListener;
        if (localCopy != null)
            localCopy.onEspKillWifiAccessPointReplyReceived(message);
    }


    @Override
    public void notifyOnConnected() {
        OnConnectedListener localCopy = this.onConnectedListener;
        if (localCopy != null)
            localCopy.onConnected();
    }

    @Override
    public void notifyOnError(Throwable error) {
        OnErrorListener localCopy = this.onErrorListener;
        if (localCopy != null)
            localCopy.onError(error);
    }

    @Override
    public void notifyOnDisconnected() {
        OnDisconnectedListener localCopy = this.onDisconnectedListener;
        if (localCopy != null)
            localCopy.onDisconnected();
    }


    public void setOnEspConectionStateListener(OnEspConectionStateListener listener) {
        onEspConectionStateListener = listener;
    }

    public void setOnEspConnectToTcpReplyListener(OnEspConnectToTcpReplyListener listener) {
        onEspConnectToTcpReplyListener = listener;
    }

    public void setOnEspTcpConfirmationListener(OnEspTcpConfirmationListener listener) {
        onEspTcpConfirmationListener = listener;
    }

    public void setOnEspServerDiscoveredListener(OnEspServerDiscoveredListener listener) {
        onEspServerDiscoveredListener = listener;
    }

    public void setOnEspRssiForNetworkNameListener(OnEspRssiForNetworkNameListener listener) {
        onEspRssiForNetworkNameListener = listener;
    }

    public void setOnEspWifiAccessPointListener(OnEspWifiAccessPointListener listener) {
        onEspWifiAccessPointListener = listener;
    }

    public void setOnEspKillWifiAccessPointReplyListener(OnEspKillWifiAccessPointReplyListener listener) {
        onEspKillWifiAccessPointReplyListener = listener;
    }


    public void setOnConnectedListener(OnConnectedListener listener) {
        this.onConnectedListener = listener;
    }

    public void setOnErrorListener(OnErrorListener listener) {
        this.onErrorListener = listener;
    }

    public void setOnDisconnectedListener(OnDisconnectedListener listener) {
        this.onDisconnectedListener = listener;
    }


    @Override
    public Message parseMessage(int commandId, CodedInputStream inputStream) throws IOException {
        switch (commandId) {
            case 1001:
                return Esp.ESPConectionState.parser().parsePartialFrom(inputStream);
            case 1002:
                return Esp.ESPConnectToTCPReply.parser().parsePartialFrom(inputStream);
            case 1003:
                return Esp.ESPTcpConfirmation.parser().parsePartialFrom(inputStream);
            case 1004:
                return Esp.ESPServerDiscovered.parser().parsePartialFrom(inputStream);
            case 1005:
                return Esp.ESPRssiForNetworkName.parser().parsePartialFrom(inputStream);
            case 1006:
                return Esp.ESPWifiAccessPoint.parser().parsePartialFrom(inputStream);
            case 1007:
                return Esp.ESPKillWifiAccessPointReply.parser().parsePartialFrom(inputStream);
            default:
                return null;
        }
    }

    @Override
    public void dispatchMessage(int commandId, MessageLite message) {
        switch (commandId) {
            case 1001:
                notifyEspConectionStateReceived((Esp.ESPConectionState) message);
                return;
            case 1002:
                notifyEspConnectToTcpReplyReceived((Esp.ESPConnectToTCPReply) message);
                return;
            case 1003:
                notifyEspTcpConfirmationReceived((Esp.ESPTcpConfirmation) message);
                return;
            case 1004:
                notifyEspServerDiscoveredReceived((Esp.ESPServerDiscovered) message);
                return;
            case 1005:
                notifyEspRssiForNetworkNameReceived((Esp.ESPRssiForNetworkName) message);
                return;
            case 1006:
                notifyEspWifiAccessPointReceived((Esp.ESPWifiAccessPoint) message);
                return;
            case 1007:
                notifyEspKillWifiAccessPointReplyReceived((Esp.ESPKillWifiAccessPointReply) message);
                return;
            default:
                return;
        }
    }

}
