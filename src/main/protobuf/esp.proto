syntax="proto3";

import weak "forpost.proto";

option optimize_for = LITE_RUNTIME;
option go_package = "forpost_server";

// Reserve [1000-1100) range for ESP <--> STM operations
option (c2s_base) = 1000;
option (s2c_base) = 1000;

enum ESPScanStatus{
   ESP_SCAN_OK = 0;
   ESP_SCAN_FAIL = 1;
   ESP_SCAN_PENDING = 2;
   ESP_SCAN_BUSY = 3;
   ESP_SCAN_CANCEL = 4;
}

// in STM <--> ESP communication we assume that
// server is ESP
// client is STM32


// STM -> ESP  messages

message ESPConnectToAP {
  option (c2s_id) = 1;
  option (txt_cmd) = "wfc";
  
	string net      = 1;
  string password = 2 [(txt_name) = "p"];
}

message ESPConnectToTCP {
  option (c2s_id) = 2;
  option (txt_cmd) = "tcpc";
  
	uint32 ip  = 1;
  int32 port = 2;
}

message ESPSendByUDP {
  option (c2s_id) = 3;
  option (txt_cmd) = "usnd";
	
  string ip  = 1;
  int32 port = 2;
  bytes data = 3;
}

message ESPDiscoverServers {
  option (c2s_id) = 4;
  option (txt_cmd) = "dssr";
  
  uint32 dev_type   = 1;
  bytes  serial_num = 2;
}

message ESPSendLogByUDP {
	option(c2s_id) = 5;
	
	string log_msg = 1;
	uint32 log_type = 2;
}

message ESPGetRssiByNetworkName {
  option(c2s_id) = 8;

  string network_name = 1;
}

message ESPScanWifiByChannel {
  option(c2s_id) = 9;
  option (txt_cmd) = "scan";

  uint32 channel_number = 1;
}

message ESPSetWifiAccessPoint {
  option(c2s_id) = 10;
  option (txt_cmd) = "apnt";
  uint32 channel_number = 1;
  int32 power = 2;
  uint32 timeout = 3;
  string network_name = 4; 
}

message ESPKillWifiAccessPoint {
  option(c2s_id) = 11;
  option (txt_cmd) = "kapn";
}

// ESP -> STM  messages

message ESPConectionState {
  option (s2c_id) = 1;
  option (txt_cmd) = "cs";
 
  int32 wifi_status = 1;
  int32 tcp_status = 2;
}

message ESPServerDiscovered {
  option(s2c_id) = 4;
  
  uint32 ip_addr   = 1;
  uint32 port      = 2;
  uint32 priority  = 3;
	string name      = 4;
	uint32 server_id = 5;
}

message ESPRssiForNetworkName {
  option (s2c_id) = 5;

  int32   value_rssi    = 1;
  string  network_name  = 2;
  uint32   network_channel = 3;
  uint32   error 		= 4;
}

message ESPWifiAccessPoint {
  option (s2c_id) = 6;
  uint32   error    = 1;
}

message ESPKillWifiAccessPointReply {
  option (s2c_id) = 7;
  uint32   error    = 1;
}

// Bidirectional ESP <-> STM  messages

message ESPConnectToTCPReply {
  option (s2c_id)  = 2;
	option (c2s_id)  = 6;
  option (txt_cmd) = "tcnr";

  int32 recv_bufsize = 1; 
}

message ESPTcpConfirmation {
  option (s2c_id)  = 3;
	option (c2s_id)  = 7;
  option (txt_cmd) = "tc";
	
  int32 confirmed = 1;
}
