// Generated by the protocol buffer compiler. DO NOT EDIT!
// if you need to change something in code generator, please contact Alexander Lobas (alexanderlobas@yahoo.com)
package generation_java_files;

import build.generated.source.proto.main.java.*;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.Message;
import com.google.protobuf.MessageLite;
import server_backend.HandlerWrapper;
import server_backend.ProtoClient;
import server_backend.servers.UIThreadClientCommandDispatcher;

import java.io.IOException;

public class AdditionalDeviceClientApi implements ProtoClient.ProtocolDispatcher {

  public AdditionalDeviceClientApi (ProtoClient client, boolean callListenersInUIThread, HandlerWrapper handlerWrapper) {
    this.client = client;
    if (callListenersInUIThread)
      client.setProtocolDispatcher(new UIThreadClientCommandDispatcher(this, handlerWrapper));
    else
      client.setProtocolDispatcher(this);
  }

  private ProtoClient client;

  public boolean sendHelloFromDev(ForpostServer.HelloFromDev message) {
  	return client.sendCommand(1, message);
  }

  public boolean sendStatFromKit(Tagger.StatFromKit message) {
  	return client.sendCommand(2, message);
  }

  public boolean sendSettingsArena25(Tagger.SettingsArena2_5 message) {
  	return client.sendCommand(3, message);
  }

  public boolean sendSetFlagState(Tagger.SetFlagState message) {
  	return client.sendCommand(4, message);
  }

  public boolean sendChangeId(ForpostServer.ChangeId message) {
  	return client.sendCommand(5, message);
  }

  public boolean sendStatById(ForpostServer.StatById message) {
  	return client.sendCommand(6, message);
  }

  public boolean sendPing() {
  	return client.sendCommand(7, null);
  }

  public boolean sendSoundsInfoResponce(ForpostServer.SoundsInfoResponce message) {
  	return client.sendCommand(8, message);
  }

  public boolean sendAdditionalFunctionality(Tagger.AdditionalFunctionality message) {
  	return client.sendCommand(12, message);
  }

  public boolean sendPresetSettings(Tagger.PresetSettings message) {
  	return client.sendCommand(13, message);
  }

  public boolean sendWeaponSettings(Tagger.WeaponSettings message) {
  	return client.sendCommand(14, message);
  }

  public boolean sendPlayersTableTimeStamp(Tagger.PlayersTableTimeStamp message) {
  	return client.sendCommand(15, message);
  }

  public boolean sendPlayersTable(Tagger.PlayersTable message) {
  	return client.sendCommand(16, message);
  }

  public boolean sendSuperModeSettings(Tagger.SuperModeSettings message) {
  	return client.sendCommand(17, message);
  }

  public boolean sendStatusSuperMode(Tagger.StatusSuperMode message) {
  	return client.sendCommand(18, message);
  }

  public boolean sendMiTagStatus(Tagger.MiTagStatus message) {
  	return client.sendCommand(19, message);
  }

  public boolean sendNotAgrStatus(Tagger.NotAgrStatus message) {
  	return client.sendCommand(20, message);
  }

  public boolean sendResponseBatteryLevel(ForpostServer.ResponseBatteryLevel message) {
  	return client.sendCommand(22, message);
  }

  public boolean sendError(ForpostServer.Error message) {
  	return client.sendCommand(23, message);
  }

  public boolean sendSetLanguage(ForpostServer.setLanguage message) {
  	return client.sendCommand(24, message);
  }

  public boolean sendSendDevType(ForpostServer.SendDevType message) {
  	return client.sendCommand(25, message);
  }

  public boolean sendLowLevelDeviceConfig(ForpostServer.LowLevelDeviceConfig message) {
  	return client.sendCommand(26, message);
  }

  public boolean sendSlavesInfoResponce(ForpostServer.SlavesInfoResponce message) {
  	return client.sendCommand(33, message);
  }

  public boolean sendSlaveDisconnected(ForpostServer.SlaveDisconnected message) {
  	return client.sendCommand(34, message);
  }

  public boolean sendSlaveInfo(ForpostServer.SlaveInfo message) {
  	return client.sendCommand(35, message);
  }

  public boolean sendStressBeltSettings(StressBelt.StressBeltSettings message) {
  	return client.sendCommand(36, message);
  }

  public boolean sendStressBeltCheangeDamageMode(StressBelt.StressBeltCheangeDamageMode message) {
  	return client.sendCommand(37, message);
  }

  public boolean sendStatusSubGhz(Tagger.StatusSubGhz message) {
  	return client.sendCommand(38, message);
  }

  public boolean sendWinTeamColor(AdditionalDevice.WinTeamColor message) {
  	return client.sendCommand(52, message);
  }

  public boolean sendCurrentCaptureColorTeam(AdditionalDevice.CurrentCaptureColorTeam message) {
  	return client.sendCommand(53, message);
  }

  public boolean sendCaptureRateInPercent(AdditionalDevice.CaptureRateInPercent message) {
  	return client.sendCommand(54, message);
  }

  public boolean sendTimeHoldByTeam(AdditionalDevice.TimeHoldByTeam message) {
  	return client.sendCommand(55, message);
  }

  public boolean sendRemainTimeToWin(AdditionalDevice.RemainTimeToWin message) {
  	return client.sendCommand(56, message);
  }

  public boolean sendCurrentHealth(AdditionalDevice.CurrentHealth message) {
  	return client.sendCommand(57, message);
  }

  public boolean sendGameStatusDev(AdditionalDevice.GameStatusDev message) {
  	return client.sendCommand(58, message);
  }

  public boolean sendFlagTaken(AdditionalDevice.FlagTaken message) {
  	return client.sendCommand(59, message);
  }

  public boolean sendFlagReceived(AdditionalDevice.FlagReceived message) {
  	return client.sendCommand(60, message);
  }

  public boolean sendFlagStat(AdditionalDevice.FlagStat message) {
  	return client.sendCommand(61, message);
  }

  public boolean sendBombStatus(AdditionalDevice.BombStatus message) {
  	return client.sendCommand(62, message);
  }

  public boolean sendBobmProActions(BombPro.bobmProActions message) {
  	return client.sendCommand(151, message);
  }

  public boolean sendBombProHasBeenExploded(BombPro.bombProHasBeenExploded message) {
  	return client.sendCommand(152, message);
  }

  public boolean sendBombProHasBeenInstalled(BombPro.bombProHasBeenInstalled message) {
  	return client.sendCommand(153, message);
  }

  public boolean sendBombProHasBeenDeinstalled(BombPro.bombProHasBeenDeinstalled message) {
  	return client.sendCommand(154, message);
  }

  public boolean sendBombProCheatHasBeenDetected(BombPro.bombProCheatHasBeenDetected message) {
  	return client.sendCommand(155, message);
  }

  public boolean sendBobmProSettings(BombPro.bobmProSettings message) {
  	return client.sendCommand(156, message);
  }

  public boolean sendFsInfoReply(Filesystem.FSInfoReply message) {
  	return client.sendCommand(301, message);
  }

  public boolean sendFormatFsReply(Filesystem.FormatFSReply message) {
  	return client.sendCommand(302, message);
  }

  public boolean sendLsDirReply(Filesystem.LsDirReply message) {
  	return client.sendCommand(303, message);
  }

  public boolean sendFileInfoReply(Filesystem.FileInfoReply message) {
  	return client.sendCommand(304, message);
  }

  public boolean sendDelFileReply(Filesystem.DelFileReply message) {
  	return client.sendCommand(305, message);
  }

  public boolean sendReadFileReply(Filesystem.ReadFileReply message) {
  	return client.sendCommand(306, message);
  }

  public boolean sendWriteFileReply(Filesystem.WriteFileReply message) {
  	return client.sendCommand(307, message);
  }

  public boolean sendCalcMd5Reply(Filesystem.CalcMD5Reply message) {
  	return client.sendCommand(308, message);
  }

  public boolean sendEspConnectToAp(Esp.ESPConnectToAP message) {
  	return client.sendCommand(1001, message);
  }

  public boolean sendEspConnectToTcp(Esp.ESPConnectToTCP message) {
  	return client.sendCommand(1002, message);
  }

  public boolean sendEspSendByUdp(Esp.ESPSendByUDP message) {
  	return client.sendCommand(1003, message);
  }

  public boolean sendEspDiscoverServers(Esp.ESPDiscoverServers message) {
  	return client.sendCommand(1004, message);
  }

  public boolean sendEspSendLogByUdp(Esp.ESPSendLogByUDP message) {
  	return client.sendCommand(1005, message);
  }

  public boolean sendEspConnectToTcpReply(Esp.ESPConnectToTCPReply message) {
  	return client.sendCommand(1006, message);
  }

  public boolean sendEspTcpConfirmation(Esp.ESPTcpConfirmation message) {
  	return client.sendCommand(1007, message);
  }

  public boolean sendEspGetRssiByNetworkName(Esp.ESPGetRssiByNetworkName message) {
  	return client.sendCommand(1008, message);
  }

  public boolean sendEspScanWifiByChannel(Esp.ESPScanWifiByChannel message) {
  	return client.sendCommand(1009, message);
  }

  public boolean sendEspSetWifiAccessPoint(Esp.ESPSetWifiAccessPoint message) {
  	return client.sendCommand(1010, message);
  }

  public boolean sendEspKillWifiAccessPoint() {
  	return client.sendCommand(1011, null);
  }

  public boolean sendVersionReply(Firmware.VersionReply message) {
  	return client.sendCommand(1101, message);
  }

  public boolean sendUpdateResourcesReply(Firmware.UpdateResourcesReply message) {
  	return client.sendCommand(1103, message);
  }

  public boolean sendFirmwareTaskReply(Firmware.FirmwareTaskReply message) {
  	return client.sendCommand(1104, message);
  }

  public boolean sendStackState(RuntimeDbg.StackState message) {
  	return client.sendCommand(1201, message);
  }

  public boolean sendStackUsage(RuntimeDbg.StackUsage message) {
  	return client.sendCommand(1202, message);
  }

  public boolean sendAssert(RuntimeDbg.Assert message) {
  	return client.sendCommand(1203, message);
  }

  public boolean sendBuffersState(RuntimeDbg.BuffersState message) {
  	return client.sendCommand(1204, message);
  }

  public boolean sendSomeData(RuntimeDbg.SomeData message) {
  	return client.sendCommand(1205, message);
  }

  public boolean sendRuntimeError(RuntimeDbg.RuntimeError message) {
  	return client.sendCommand(1206, message);
  }

  public boolean sendRuntimeSystemSnapshot(RuntimeDbg.RuntimeSystemSnapshot message) {
  	return client.sendCommand(1207, message);
  }

  public boolean sendEspWiFiRssi(EspSrv.ESP_WiFiRSSI message) {
  	return client.sendCommand(2001, message);
  }

  public boolean sendEspAssert(EspSrv.ESP_Assert message) {
  	return client.sendCommand(2002, message);
  }

  public boolean sendEspVersionReply(EspSrv.ESP_VersionReply message) {
  	return client.sendCommand(2003, message);
  }

  public boolean sendEspFirmwareTaskReply(EspSrv.ESP_FirmwareTaskReply message) {
  	return client.sendCommand(2004, message);
  }

  public boolean sendEspUpdateResourcesReply(EspSrv.ESP_UpdateResourcesReply message) {
  	return client.sendCommand(2005, message);
  }

  public boolean sendEspSomeData(EspSrv.ESP_SomeData message) {
  	return client.sendCommand(2006, message);
  }

  public boolean sendEspRuntimeError(EspSrv.ESP_RuntimeError message) {
  	return client.sendCommand(2007, message);
  }

  public boolean sendHelloFromSlave(VestRs485.HelloFromSlave message) {
  	return client.sendCommand(3201, message);
  }

  public boolean sendReciveIr(VestRs485.ReciveIr message) {
  	return client.sendCommand(3202, message);
  }

  public boolean sendStateBattery(VestRs485.StateBattery message) {
  	return client.sendCommand(3203, message);
  }

  public boolean sendPowerOnCommand() {
  	return client.sendCommand(3204, null);
  }

  public boolean sendPowerOffCommand() {
  	return client.sendCommand(3205, null);
  }

  public boolean sendStatePowerButton(VestRs485.StatePowerButton message) {
  	return client.sendCommand(3206, message);
  }

  public boolean sendStateCapacitiveSensor(VestRs485.StateCapacitiveSensor message) {
  	return client.sendCommand(3207, message);
  }

  public boolean sendDeviceErrorInformation(VestRs485.DeviceErrorInformation message) {
  	return client.sendCommand(3208, message);
  }

  public void diconnect() {
    client.disconnect();
  }

  public ProtoClient getClient() {
    return client;
  }

  // Listeners interfaces for incoming messages

  public interface OnStatFromKitListener {
    void onStatFromKitReceived(Tagger.StatFromKit message);
  }

  public interface OnSettingsArena25Listener {
    void onSettingsArena25Received(Tagger.SettingsArena2_5 message);
  }

  public interface OnStartGameListener {
    void onStartGameReceived(ForpostServer.StartGame message);
  }

  public interface OnStopGameListener {
    void onStopGameReceived();
  }

  public interface OnRespawnListener {
    void onRespawnReceived();
  }

  public interface OnReturnToDefSettingsListener {
    void onReturnToDefSettingsReceived();
  }

  public interface OnRadiationListener {
    void onRadiationReceived(Tagger.Radiation message);
  }

  public interface OnDoubleHealthListener {
    void onDoubleHealthReceived();
  }

  public interface OnAddHealthListener {
    void onAddHealthReceived(Tagger.AddHealth message);
  }

  public interface OnPauseGameListener {
    void onPauseGameReceived();
  }

  public interface OnKillPlayerListener {
    void onKillPlayerReceived();
  }

  public interface OnChangeIdListener {
    void onChangeIdReceived(ForpostServer.ChangeId message);
  }

  public interface OnChangeColorListener {
    void onChangeColorReceived(Tagger.ChangeColor message);
  }

  public interface OnSetVolumeListener {
    void onSetVolumeReceived(ForpostServer.SetVolume message);
  }

  public interface OnResetStatListener {
    void onResetStatReceived();
  }

  public interface OnMilesCommandListener {
    void onMilesCommandReceived(ForpostServer.MilesCommand message);
  }

  public interface OnPingListener {
    void onPingReceived();
  }

  public interface OnStatFromServerToKitListener {
    void onStatFromServerToKitReceived(Tagger.StatFromServerToKit message);
  }

  public interface OnStatByIdListener {
    void onStatByIdReceived(ForpostServer.StatById message);
  }

  public interface OnGetSettingsArena25Listener {
    void onGetSettingsArena25Received();
  }

  public interface OnGetAllStatArena25Listener {
    void onGetAllStatArena25Received();
  }

  public interface OnSetIRstrengthListener {
    void onSetIRstrengthReceived(ForpostServer.SetIRstrength message);
  }

  public interface OnGetBatteryLevelListener {
    void onGetBatteryLevelReceived();
  }

  public interface OnSetBrightnesListener {
    void onSetBrightnesReceived(ForpostServer.SetBrightnes message);
  }

  public interface OnUpdateDevListener {
    void onUpdateDevReceived();
  }

  public interface OnSetLanguageListener {
    void onSetLanguageReceived(ForpostServer.setLanguage message);
  }

  public interface OnScoreAndPlaceListener {
    void onScoreAndPlaceReceived(Tagger.ScoreAndPlace message);
  }

  public interface OnSetPlayTimeListener {
    void onSetPlayTimeReceived(Tagger.SetPlayTime message);
  }

  public interface OnSetFlagStateListener {
    void onSetFlagStateReceived(Tagger.SetFlagState message);
  }

  public interface OnPlaySoundListener {
    void onPlaySoundReceived(ForpostServer.PlaySound message);
  }

  public interface OnStopSoundListener {
    void onStopSoundReceived(ForpostServer.StopSound message);
  }

  public interface OnGetSoundsInfoListener {
    void onGetSoundsInfoReceived();
  }

  public interface OnSendDevTypeListener {
    void onSendDevTypeReceived(ForpostServer.SendDevType message);
  }

  public interface OnDiffDamageListener {
    void onDiffDamageReceived(Tagger.DiffDamage message);
  }

  public interface OnTurnOffDeviceListener {
    void onTurnOffDeviceReceived();
  }

  public interface OnGetInfoSlavesListener {
    void onGetInfoSlavesReceived();
  }

  public interface OnSetGameIdListener {
    void onSetGameIdReceived(ForpostServer.SetGameId message);
  }

  public interface OnAdditionalFunctionalityListener {
    void onAdditionalFunctionalityReceived(Tagger.AdditionalFunctionality message);
  }

  public interface OnPresetSettingsListener {
    void onPresetSettingsReceived(Tagger.PresetSettings message);
  }

  public interface OnWeaponSettingsListener {
    void onWeaponSettingsReceived(Tagger.WeaponSettings message);
  }

  public interface OnBleedingSetListener {
    void onBleedingSetReceived(Tagger.BleedingSet message);
  }

  public interface OnPlayersTableListener {
    void onPlayersTableReceived(Tagger.PlayersTable message);
  }

  public interface OnSetHealthListener {
    void onSetHealthReceived(Tagger.SetHealth message);
  }

  public interface OnSetDefHealthListener {
    void onSetDefHealthReceived(Tagger.SetDefHealth message);
  }

  public interface OnStressBeltSettingsListener {
    void onStressBeltSettingsReceived(StressBelt.StressBeltSettings message);
  }

  public interface OnSuperModeSettingsListener {
    void onSuperModeSettingsReceived(Tagger.SuperModeSettings message);
  }

  public interface OnGetSuperModeSettingsListener {
    void onGetSuperModeSettingsReceived();
  }

  public interface OnSettingsHealingRunListener {
    void onSettingsHealingRunReceived(Tagger.SettingsHealingRun message);
  }

  public interface OnSettingsNotAgrListener {
    void onSettingsNotAgrReceived(Tagger.SettingsNotAgr message);
  }

  public interface OnSettingsRadiationOrMedicineModeListener {
    void onSettingsRadiationOrMedicineModeReceived(AdditionalDevice.SettingsRadiationOrMedicineMode message);
  }

  public interface OnSettingsRespawnModeListener {
    void onSettingsRespawnModeReceived(AdditionalDevice.SettingsRespawnMode message);
  }

  public interface OnSettingsAmmoModeListener {
    void onSettingsAmmoModeReceived(AdditionalDevice.SettingsAmmoMode message);
  }

  public interface OnSettingsControlPointListener {
    void onSettingsControlPointReceived(AdditionalDevice.SettingsControlPoint message);
  }

  public interface OnSettingsBazeModeListener {
    void onSettingsBazeModeReceived(AdditionalDevice.SettingsBazeMode message);
  }

  public interface OnSettingsRandomModeListener {
    void onSettingsRandomModeReceived(AdditionalDevice.SettingsRandomMode message);
  }

  public interface OnSettingsBonusModeListener {
    void onSettingsBonusModeReceived(AdditionalDevice.SettingsBonusMode message);
  }

  public interface OnSettingsTimeCaptureListener {
    void onSettingsTimeCaptureReceived(AdditionalDevice.SettingsTimeCapture message);
  }

  public interface OnSettingsCaptureByShotListener {
    void onSettingsCaptureByShotReceived(AdditionalDevice.SettingsCaptureByShot message);
  }

  public interface OnSettingsTugOfWarListener {
    void onSettingsTugOfWarReceived(AdditionalDevice.SettingsTugOfWar message);
  }

  public interface OnSettingsThreePersonListener {
    void onSettingsThreePersonReceived(AdditionalDevice.SettingsThreePerson message);
  }

  public interface OnSettingsCaptureFlagListener {
    void onSettingsCaptureFlagReceived(AdditionalDevice.SettingsCaptureFlag message);
  }

  public interface OnCurrentCaptureColorTeamListener {
    void onCurrentCaptureColorTeamReceived(AdditionalDevice.CurrentCaptureColorTeam message);
  }

  public interface OnCaptureRateInPercentListener {
    void onCaptureRateInPercentReceived(AdditionalDevice.CaptureRateInPercent message);
  }

  public interface OnTimeHoldByTeamListener {
    void onTimeHoldByTeamReceived(AdditionalDevice.TimeHoldByTeam message);
  }

  public interface OnRemainTimeToWinListener {
    void onRemainTimeToWinReceived(AdditionalDevice.RemainTimeToWin message);
  }

  public interface OnCurrentHealthListener {
    void onCurrentHealthReceived(AdditionalDevice.CurrentHealth message);
  }

  public interface OnSettingsCtfModeListener {
    void onSettingsCtfModeReceived(AdditionalDevice.SettingsCTFMode message);
  }

  public interface OnGenerateFlagListener {
    void onGenerateFlagReceived(AdditionalDevice.GenerateFlag message);
  }

  public interface OnFlagStatListener {
    void onFlagStatReceived(AdditionalDevice.FlagStat message);
  }

  public interface OnSettingsBombModeListener {
    void onSettingsBombModeReceived(AdditionalDevice.SettingsBombMode message);
  }

  public interface OnLowLevelDeviceConfigListener {
    void onLowLevelDeviceConfigReceived(ForpostServer.LowLevelDeviceConfig message);
  }

  public interface OnCustomTestModeListener {
    void onCustomTestModeReceived(Tagger.CustomTestMode message);
  }

  public interface OnBobmProSettingsListener {
    void onBobmProSettingsReceived(BombPro.bobmProSettings message);
  }

  public interface OnBobmProBreakActionsListener {
    void onBobmProBreakActionsReceived();
  }

  public interface OnBombPlayersTableListener {
    void onBombPlayersTableReceived(BombPro.bombPlayersTable message);
  }

  public interface OnFsInfoListener {
    void onFsInfoReceived();
  }

  public interface OnFormatFsListener {
    void onFormatFsReceived();
  }

  public interface OnLsDirListener {
    void onLsDirReceived(Filesystem.LsDir message);
  }

  public interface OnFileInfoListener {
    void onFileInfoReceived(Filesystem.FileInfo message);
  }

  public interface OnDelFileListener {
    void onDelFileReceived(Filesystem.DelFile message);
  }

  public interface OnReadFileListener {
    void onReadFileReceived(Filesystem.ReadFile message);
  }

  public interface OnWriteFileListener {
    void onWriteFileReceived(Filesystem.WriteFile message);
  }

  public interface OnCalcMd5Listener {
    void onCalcMd5Received(Filesystem.CalcMD5 message);
  }

  public interface OnEspConectionStateListener {
    void onEspConectionStateReceived(Esp.ESPConectionState message);
  }

  public interface OnEspConnectToTcpReplyListener {
    void onEspConnectToTcpReplyReceived(Esp.ESPConnectToTCPReply message);
  }

  public interface OnEspTcpConfirmationListener {
    void onEspTcpConfirmationReceived(Esp.ESPTcpConfirmation message);
  }

  public interface OnEspServerDiscoveredListener {
    void onEspServerDiscoveredReceived(Esp.ESPServerDiscovered message);
  }

  public interface OnEspRssiForNetworkNameListener {
    void onEspRssiForNetworkNameReceived(Esp.ESPRssiForNetworkName message);
  }

  public interface OnEspWifiAccessPointListener {
    void onEspWifiAccessPointReceived(Esp.ESPWifiAccessPoint message);
  }

  public interface OnEspKillWifiAccessPointReplyListener {
    void onEspKillWifiAccessPointReplyReceived(Esp.ESPKillWifiAccessPointReply message);
  }

  public interface OnRebootListener {
    void onRebootReceived();
  }

  public interface OnVersionRequestListener {
    void onVersionRequestReceived();
  }

  public interface OnFirmwareTaskListener {
    void onFirmwareTaskReceived(Firmware.FirmwareTask message);
  }

  public interface OnBeginUpdateResourcesListener {
    void onBeginUpdateResourcesReceived();
  }

  public interface OnFinishUpdateResourcesListener {
    void onFinishUpdateResourcesReceived();
  }

  public interface OnGetStackListener {
    void onGetStackReceived();
  }

  public interface OnGetBuffersStateListener {
    void onGetBuffersStateReceived();
  }

  public interface OnSomeDataListener {
    void onSomeDataReceived(RuntimeDbg.SomeData message);
  }

  public interface OnRuntimeErrorListener {
    void onRuntimeErrorReceived(RuntimeDbg.RuntimeError message);
  }

  public interface OnRuntimeGetErrorsListener {
    void onRuntimeGetErrorsReceived();
  }

  public interface OnRuntimeClearErrorMessagesListener {
    void onRuntimeClearErrorMessagesReceived();
  }

  public interface OnEspRebootListener {
    void onEspRebootReceived();
  }

  public interface OnEspVersionRequestListener {
    void onEspVersionRequestReceived();
  }

  public interface OnEspFirmwareTaskListener {
    void onEspFirmwareTaskReceived(EspSrv.ESP_FirmwareTask message);
  }

  public interface OnEspSomeDataListener {
    void onEspSomeDataReceived(EspSrv.ESP_SomeData message);
  }

  public interface OnEspRuntimeErrorListener {
    void onEspRuntimeErrorReceived(EspSrv.ESP_RuntimeError message);
  }

  public interface OnEspBeginUpdateResourcesListener {
    void onEspBeginUpdateResourcesReceived();
  }

  public interface OnEspFinishUpdateResourcesListener {
    void onEspFinishUpdateResourcesReceived();
  }

  public interface OnHelloFromMasterListener {
    void onHelloFromMasterReceived(VestRs485.HelloFromMaster message);
  }

  public interface OnSettingsVestListener {
    void onSettingsVestReceived(VestRs485.SettingsVest message);
  }

  public interface OnSetStateIndicationListener {
    void onSetStateIndicationReceived(VestRs485.SetStateIndication message);
  }

  public interface OnSetEventIndicationListener {
    void onSetEventIndicationReceived(VestRs485.SetEventIndication message);
  }

  public interface OnSendIrListener {
    void onSendIrReceived(VestRs485.SendIr message);
  }

  public interface OnVibroListener {
    void onVibroReceived(VestRs485.Vibro message);
  }

  public interface OnPlaySoundToSlaveListener {
    void onPlaySoundToSlaveReceived(VestRs485.PlaySoundToSlave message);
  }

  public interface OnSystemCommandListener {
    void onSystemCommandReceived(VestRs485.SystemCommand message);
  }

  public interface OnGetStatePowerButtonOnSlaveListener {
    void onGetStatePowerButtonOnSlaveReceived();
  }

  public interface OnSetLanguageOnSlaveListener {
    void onSetLanguageOnSlaveReceived(VestRs485.SetLanguageOnSlave message);
  }

  public interface OnServerConnectionStatusListener {
    void onServerConnectionStatusReceived(VestRs485.ServerConnectionStatus message);
  }

  public interface OnPowerOnCommandListener {
    void onPowerOnCommandReceived();
  }

  public interface OnPowerOffCommandListener {
    void onPowerOffCommandReceived();
  }

  public interface OnConnectedListener {
    void onConnected();
  }

  public interface OnErrorListener {
    void onError(Throwable error);
  }

  public interface OnDisconnectedListener {
    void onDisconnected();
  }


  private volatile OnStatFromKitListener onStatFromKitListener = null;
  private volatile OnSettingsArena25Listener onSettingsArena25Listener = null;
  private volatile OnStartGameListener onStartGameListener = null;
  private volatile OnStopGameListener onStopGameListener = null;
  private volatile OnRespawnListener onRespawnListener = null;
  private volatile OnReturnToDefSettingsListener onReturnToDefSettingsListener = null;
  private volatile OnRadiationListener onRadiationListener = null;
  private volatile OnDoubleHealthListener onDoubleHealthListener = null;
  private volatile OnAddHealthListener onAddHealthListener = null;
  private volatile OnPauseGameListener onPauseGameListener = null;
  private volatile OnKillPlayerListener onKillPlayerListener = null;
  private volatile OnChangeIdListener onChangeIdListener = null;
  private volatile OnChangeColorListener onChangeColorListener = null;
  private volatile OnSetVolumeListener onSetVolumeListener = null;
  private volatile OnResetStatListener onResetStatListener = null;
  private volatile OnMilesCommandListener onMilesCommandListener = null;
  private volatile OnPingListener onPingListener = null;
  private volatile OnStatFromServerToKitListener onStatFromServerToKitListener = null;
  private volatile OnStatByIdListener onStatByIdListener = null;
  private volatile OnGetSettingsArena25Listener onGetSettingsArena25Listener = null;
  private volatile OnGetAllStatArena25Listener onGetAllStatArena25Listener = null;
  private volatile OnSetIRstrengthListener onSetIRstrengthListener = null;
  private volatile OnGetBatteryLevelListener onGetBatteryLevelListener = null;
  private volatile OnSetBrightnesListener onSetBrightnesListener = null;
  private volatile OnUpdateDevListener onUpdateDevListener = null;
  private volatile OnSetLanguageListener onSetLanguageListener = null;
  private volatile OnScoreAndPlaceListener onScoreAndPlaceListener = null;
  private volatile OnSetPlayTimeListener onSetPlayTimeListener = null;
  private volatile OnSetFlagStateListener onSetFlagStateListener = null;
  private volatile OnPlaySoundListener onPlaySoundListener = null;
  private volatile OnStopSoundListener onStopSoundListener = null;
  private volatile OnGetSoundsInfoListener onGetSoundsInfoListener = null;
  private volatile OnSendDevTypeListener onSendDevTypeListener = null;
  private volatile OnDiffDamageListener onDiffDamageListener = null;
  private volatile OnTurnOffDeviceListener onTurnOffDeviceListener = null;
  private volatile OnGetInfoSlavesListener onGetInfoSlavesListener = null;
  private volatile OnSetGameIdListener onSetGameIdListener = null;
  private volatile OnAdditionalFunctionalityListener onAdditionalFunctionalityListener = null;
  private volatile OnPresetSettingsListener onPresetSettingsListener = null;
  private volatile OnWeaponSettingsListener onWeaponSettingsListener = null;
  private volatile OnBleedingSetListener onBleedingSetListener = null;
  private volatile OnPlayersTableListener onPlayersTableListener = null;
  private volatile OnSetHealthListener onSetHealthListener = null;
  private volatile OnSetDefHealthListener onSetDefHealthListener = null;
  private volatile OnStressBeltSettingsListener onStressBeltSettingsListener = null;
  private volatile OnSuperModeSettingsListener onSuperModeSettingsListener = null;
  private volatile OnGetSuperModeSettingsListener onGetSuperModeSettingsListener = null;
  private volatile OnSettingsHealingRunListener onSettingsHealingRunListener = null;
  private volatile OnSettingsNotAgrListener onSettingsNotAgrListener = null;
  private volatile OnSettingsRadiationOrMedicineModeListener onSettingsRadiationOrMedicineModeListener = null;
  private volatile OnSettingsRespawnModeListener onSettingsRespawnModeListener = null;
  private volatile OnSettingsAmmoModeListener onSettingsAmmoModeListener = null;
  private volatile OnSettingsControlPointListener onSettingsControlPointListener = null;
  private volatile OnSettingsBazeModeListener onSettingsBazeModeListener = null;
  private volatile OnSettingsRandomModeListener onSettingsRandomModeListener = null;
  private volatile OnSettingsBonusModeListener onSettingsBonusModeListener = null;
  private volatile OnSettingsTimeCaptureListener onSettingsTimeCaptureListener = null;
  private volatile OnSettingsCaptureByShotListener onSettingsCaptureByShotListener = null;
  private volatile OnSettingsTugOfWarListener onSettingsTugOfWarListener = null;
  private volatile OnSettingsThreePersonListener onSettingsThreePersonListener = null;
  private volatile OnSettingsCaptureFlagListener onSettingsCaptureFlagListener = null;
  private volatile OnCurrentCaptureColorTeamListener onCurrentCaptureColorTeamListener = null;
  private volatile OnCaptureRateInPercentListener onCaptureRateInPercentListener = null;
  private volatile OnTimeHoldByTeamListener onTimeHoldByTeamListener = null;
  private volatile OnRemainTimeToWinListener onRemainTimeToWinListener = null;
  private volatile OnCurrentHealthListener onCurrentHealthListener = null;
  private volatile OnSettingsCtfModeListener onSettingsCtfModeListener = null;
  private volatile OnGenerateFlagListener onGenerateFlagListener = null;
  private volatile OnFlagStatListener onFlagStatListener = null;
  private volatile OnSettingsBombModeListener onSettingsBombModeListener = null;
  private volatile OnLowLevelDeviceConfigListener onLowLevelDeviceConfigListener = null;
  private volatile OnCustomTestModeListener onCustomTestModeListener = null;
  private volatile OnBobmProSettingsListener onBobmProSettingsListener = null;
  private volatile OnBobmProBreakActionsListener onBobmProBreakActionsListener = null;
  private volatile OnBombPlayersTableListener onBombPlayersTableListener = null;
  private volatile OnFsInfoListener onFsInfoListener = null;
  private volatile OnFormatFsListener onFormatFsListener = null;
  private volatile OnLsDirListener onLsDirListener = null;
  private volatile OnFileInfoListener onFileInfoListener = null;
  private volatile OnDelFileListener onDelFileListener = null;
  private volatile OnReadFileListener onReadFileListener = null;
  private volatile OnWriteFileListener onWriteFileListener = null;
  private volatile OnCalcMd5Listener onCalcMd5Listener = null;
  private volatile OnEspConectionStateListener onEspConectionStateListener = null;
  private volatile OnEspConnectToTcpReplyListener onEspConnectToTcpReplyListener = null;
  private volatile OnEspTcpConfirmationListener onEspTcpConfirmationListener = null;
  private volatile OnEspServerDiscoveredListener onEspServerDiscoveredListener = null;
  private volatile OnEspRssiForNetworkNameListener onEspRssiForNetworkNameListener = null;
  private volatile OnEspWifiAccessPointListener onEspWifiAccessPointListener = null;
  private volatile OnEspKillWifiAccessPointReplyListener onEspKillWifiAccessPointReplyListener = null;
  private volatile OnRebootListener onRebootListener = null;
  private volatile OnVersionRequestListener onVersionRequestListener = null;
  private volatile OnFirmwareTaskListener onFirmwareTaskListener = null;
  private volatile OnBeginUpdateResourcesListener onBeginUpdateResourcesListener = null;
  private volatile OnFinishUpdateResourcesListener onFinishUpdateResourcesListener = null;
  private volatile OnGetStackListener onGetStackListener = null;
  private volatile OnGetBuffersStateListener onGetBuffersStateListener = null;
  private volatile OnSomeDataListener onSomeDataListener = null;
  private volatile OnRuntimeErrorListener onRuntimeErrorListener = null;
  private volatile OnRuntimeGetErrorsListener onRuntimeGetErrorsListener = null;
  private volatile OnRuntimeClearErrorMessagesListener onRuntimeClearErrorMessagesListener = null;
  private volatile OnEspRebootListener onEspRebootListener = null;
  private volatile OnEspVersionRequestListener onEspVersionRequestListener = null;
  private volatile OnEspFirmwareTaskListener onEspFirmwareTaskListener = null;
  private volatile OnEspSomeDataListener onEspSomeDataListener = null;
  private volatile OnEspRuntimeErrorListener onEspRuntimeErrorListener = null;
  private volatile OnEspBeginUpdateResourcesListener onEspBeginUpdateResourcesListener = null;
  private volatile OnEspFinishUpdateResourcesListener onEspFinishUpdateResourcesListener = null;
  private volatile OnHelloFromMasterListener onHelloFromMasterListener = null;
  private volatile OnSettingsVestListener onSettingsVestListener = null;
  private volatile OnSetStateIndicationListener onSetStateIndicationListener = null;
  private volatile OnSetEventIndicationListener onSetEventIndicationListener = null;
  private volatile OnSendIrListener onSendIrListener = null;
  private volatile OnVibroListener onVibroListener = null;
  private volatile OnPlaySoundToSlaveListener onPlaySoundToSlaveListener = null;
  private volatile OnSystemCommandListener onSystemCommandListener = null;
  private volatile OnGetStatePowerButtonOnSlaveListener onGetStatePowerButtonOnSlaveListener = null;
  private volatile OnSetLanguageOnSlaveListener onSetLanguageOnSlaveListener = null;
  private volatile OnServerConnectionStatusListener onServerConnectionStatusListener = null;
  private volatile OnPowerOnCommandListener onPowerOnCommandListener = null;
  private volatile OnPowerOffCommandListener onPowerOffCommandListener = null;
  private volatile OnConnectedListener onConnectedListener = null;
  private volatile OnErrorListener onErrorListener = null;
  private volatile OnDisconnectedListener onDisconnectedListener = null;

  private void notifyStatFromKitReceived(Tagger.StatFromKit message) {
    OnStatFromKitListener localCopy = onStatFromKitListener;
    if (localCopy != null)
      localCopy.onStatFromKitReceived(message);
  }

  private void notifySettingsArena25Received(Tagger.SettingsArena2_5 message) {
    OnSettingsArena25Listener localCopy = onSettingsArena25Listener;
    if (localCopy != null)
      localCopy.onSettingsArena25Received(message);
  }

  private void notifyStartGameReceived(ForpostServer.StartGame message) {
    OnStartGameListener localCopy = onStartGameListener;
    if (localCopy != null)
      localCopy.onStartGameReceived(message);
  }

  private void notifyStopGameReceived() {
    OnStopGameListener localCopy = onStopGameListener;
    if (localCopy != null)
      localCopy.onStopGameReceived();
  }

  private void notifyRespawnReceived() {
    OnRespawnListener localCopy = onRespawnListener;
    if (localCopy != null)
      localCopy.onRespawnReceived();
  }

  private void notifyReturnToDefSettingsReceived() {
    OnReturnToDefSettingsListener localCopy = onReturnToDefSettingsListener;
    if (localCopy != null)
      localCopy.onReturnToDefSettingsReceived();
  }

  private void notifyRadiationReceived(Tagger.Radiation message) {
    OnRadiationListener localCopy = onRadiationListener;
    if (localCopy != null)
      localCopy.onRadiationReceived(message);
  }

  private void notifyDoubleHealthReceived() {
    OnDoubleHealthListener localCopy = onDoubleHealthListener;
    if (localCopy != null)
      localCopy.onDoubleHealthReceived();
  }

  private void notifyAddHealthReceived(Tagger.AddHealth message) {
    OnAddHealthListener localCopy = onAddHealthListener;
    if (localCopy != null)
      localCopy.onAddHealthReceived(message);
  }

  private void notifyPauseGameReceived() {
    OnPauseGameListener localCopy = onPauseGameListener;
    if (localCopy != null)
      localCopy.onPauseGameReceived();
  }

  private void notifyKillPlayerReceived() {
    OnKillPlayerListener localCopy = onKillPlayerListener;
    if (localCopy != null)
      localCopy.onKillPlayerReceived();
  }

  private void notifyChangeIdReceived(ForpostServer.ChangeId message) {
    OnChangeIdListener localCopy = onChangeIdListener;
    if (localCopy != null)
      localCopy.onChangeIdReceived(message);
  }

  private void notifyChangeColorReceived(Tagger.ChangeColor message) {
    OnChangeColorListener localCopy = onChangeColorListener;
    if (localCopy != null)
      localCopy.onChangeColorReceived(message);
  }

  private void notifySetVolumeReceived(ForpostServer.SetVolume message) {
    OnSetVolumeListener localCopy = onSetVolumeListener;
    if (localCopy != null)
      localCopy.onSetVolumeReceived(message);
  }

  private void notifyResetStatReceived() {
    OnResetStatListener localCopy = onResetStatListener;
    if (localCopy != null)
      localCopy.onResetStatReceived();
  }

  private void notifyMilesCommandReceived(ForpostServer.MilesCommand message) {
    OnMilesCommandListener localCopy = onMilesCommandListener;
    if (localCopy != null)
      localCopy.onMilesCommandReceived(message);
  }

  private void notifyPingReceived() {
    OnPingListener localCopy = onPingListener;
    if (localCopy != null)
      localCopy.onPingReceived();
  }

  private void notifyStatFromServerToKitReceived(Tagger.StatFromServerToKit message) {
    OnStatFromServerToKitListener localCopy = onStatFromServerToKitListener;
    if (localCopy != null)
      localCopy.onStatFromServerToKitReceived(message);
  }

  private void notifyStatByIdReceived(ForpostServer.StatById message) {
    OnStatByIdListener localCopy = onStatByIdListener;
    if (localCopy != null)
      localCopy.onStatByIdReceived(message);
  }

  private void notifyGetSettingsArena25Received() {
    OnGetSettingsArena25Listener localCopy = onGetSettingsArena25Listener;
    if (localCopy != null)
      localCopy.onGetSettingsArena25Received();
  }

  private void notifyGetAllStatArena25Received() {
    OnGetAllStatArena25Listener localCopy = onGetAllStatArena25Listener;
    if (localCopy != null)
      localCopy.onGetAllStatArena25Received();
  }

  private void notifySetIRstrengthReceived(ForpostServer.SetIRstrength message) {
    OnSetIRstrengthListener localCopy = onSetIRstrengthListener;
    if (localCopy != null)
      localCopy.onSetIRstrengthReceived(message);
  }

  private void notifyGetBatteryLevelReceived() {
    OnGetBatteryLevelListener localCopy = onGetBatteryLevelListener;
    if (localCopy != null)
      localCopy.onGetBatteryLevelReceived();
  }

  private void notifySetBrightnesReceived(ForpostServer.SetBrightnes message) {
    OnSetBrightnesListener localCopy = onSetBrightnesListener;
    if (localCopy != null)
      localCopy.onSetBrightnesReceived(message);
  }

  private void notifyUpdateDevReceived() {
    OnUpdateDevListener localCopy = onUpdateDevListener;
    if (localCopy != null)
      localCopy.onUpdateDevReceived();
  }

  private void notifySetLanguageReceived(ForpostServer.setLanguage message) {
    OnSetLanguageListener localCopy = onSetLanguageListener;
    if (localCopy != null)
      localCopy.onSetLanguageReceived(message);
  }

  private void notifyScoreAndPlaceReceived(Tagger.ScoreAndPlace message) {
    OnScoreAndPlaceListener localCopy = onScoreAndPlaceListener;
    if (localCopy != null)
      localCopy.onScoreAndPlaceReceived(message);
  }

  private void notifySetPlayTimeReceived(Tagger.SetPlayTime message) {
    OnSetPlayTimeListener localCopy = onSetPlayTimeListener;
    if (localCopy != null)
      localCopy.onSetPlayTimeReceived(message);
  }

  private void notifySetFlagStateReceived(Tagger.SetFlagState message) {
    OnSetFlagStateListener localCopy = onSetFlagStateListener;
    if (localCopy != null)
      localCopy.onSetFlagStateReceived(message);
  }

  private void notifyPlaySoundReceived(ForpostServer.PlaySound message) {
    OnPlaySoundListener localCopy = onPlaySoundListener;
    if (localCopy != null)
      localCopy.onPlaySoundReceived(message);
  }

  private void notifyStopSoundReceived(ForpostServer.StopSound message) {
    OnStopSoundListener localCopy = onStopSoundListener;
    if (localCopy != null)
      localCopy.onStopSoundReceived(message);
  }

  private void notifyGetSoundsInfoReceived() {
    OnGetSoundsInfoListener localCopy = onGetSoundsInfoListener;
    if (localCopy != null)
      localCopy.onGetSoundsInfoReceived();
  }

  private void notifySendDevTypeReceived(ForpostServer.SendDevType message) {
    OnSendDevTypeListener localCopy = onSendDevTypeListener;
    if (localCopy != null)
      localCopy.onSendDevTypeReceived(message);
  }

  private void notifyDiffDamageReceived(Tagger.DiffDamage message) {
    OnDiffDamageListener localCopy = onDiffDamageListener;
    if (localCopy != null)
      localCopy.onDiffDamageReceived(message);
  }

  private void notifyTurnOffDeviceReceived() {
    OnTurnOffDeviceListener localCopy = onTurnOffDeviceListener;
    if (localCopy != null)
      localCopy.onTurnOffDeviceReceived();
  }

  private void notifyGetInfoSlavesReceived() {
    OnGetInfoSlavesListener localCopy = onGetInfoSlavesListener;
    if (localCopy != null)
      localCopy.onGetInfoSlavesReceived();
  }

  private void notifySetGameIdReceived(ForpostServer.SetGameId message) {
    OnSetGameIdListener localCopy = onSetGameIdListener;
    if (localCopy != null)
      localCopy.onSetGameIdReceived(message);
  }

  private void notifyAdditionalFunctionalityReceived(Tagger.AdditionalFunctionality message) {
    OnAdditionalFunctionalityListener localCopy = onAdditionalFunctionalityListener;
    if (localCopy != null)
      localCopy.onAdditionalFunctionalityReceived(message);
  }

  private void notifyPresetSettingsReceived(Tagger.PresetSettings message) {
    OnPresetSettingsListener localCopy = onPresetSettingsListener;
    if (localCopy != null)
      localCopy.onPresetSettingsReceived(message);
  }

  private void notifyWeaponSettingsReceived(Tagger.WeaponSettings message) {
    OnWeaponSettingsListener localCopy = onWeaponSettingsListener;
    if (localCopy != null)
      localCopy.onWeaponSettingsReceived(message);
  }

  private void notifyBleedingSetReceived(Tagger.BleedingSet message) {
    OnBleedingSetListener localCopy = onBleedingSetListener;
    if (localCopy != null)
      localCopy.onBleedingSetReceived(message);
  }

  private void notifyPlayersTableReceived(Tagger.PlayersTable message) {
    OnPlayersTableListener localCopy = onPlayersTableListener;
    if (localCopy != null)
      localCopy.onPlayersTableReceived(message);
  }

  private void notifySetHealthReceived(Tagger.SetHealth message) {
    OnSetHealthListener localCopy = onSetHealthListener;
    if (localCopy != null)
      localCopy.onSetHealthReceived(message);
  }

  private void notifySetDefHealthReceived(Tagger.SetDefHealth message) {
    OnSetDefHealthListener localCopy = onSetDefHealthListener;
    if (localCopy != null)
      localCopy.onSetDefHealthReceived(message);
  }

  private void notifyStressBeltSettingsReceived(StressBelt.StressBeltSettings message) {
    OnStressBeltSettingsListener localCopy = onStressBeltSettingsListener;
    if (localCopy != null)
      localCopy.onStressBeltSettingsReceived(message);
  }

  private void notifySuperModeSettingsReceived(Tagger.SuperModeSettings message) {
    OnSuperModeSettingsListener localCopy = onSuperModeSettingsListener;
    if (localCopy != null)
      localCopy.onSuperModeSettingsReceived(message);
  }

  private void notifyGetSuperModeSettingsReceived() {
    OnGetSuperModeSettingsListener localCopy = onGetSuperModeSettingsListener;
    if (localCopy != null)
      localCopy.onGetSuperModeSettingsReceived();
  }

  private void notifySettingsHealingRunReceived(Tagger.SettingsHealingRun message) {
    OnSettingsHealingRunListener localCopy = onSettingsHealingRunListener;
    if (localCopy != null)
      localCopy.onSettingsHealingRunReceived(message);
  }

  private void notifySettingsNotAgrReceived(Tagger.SettingsNotAgr message) {
    OnSettingsNotAgrListener localCopy = onSettingsNotAgrListener;
    if (localCopy != null)
      localCopy.onSettingsNotAgrReceived(message);
  }

  private void notifySettingsRadiationOrMedicineModeReceived(AdditionalDevice.SettingsRadiationOrMedicineMode message) {
    OnSettingsRadiationOrMedicineModeListener localCopy = onSettingsRadiationOrMedicineModeListener;
    if (localCopy != null)
      localCopy.onSettingsRadiationOrMedicineModeReceived(message);
  }

  private void notifySettingsRespawnModeReceived(AdditionalDevice.SettingsRespawnMode message) {
    OnSettingsRespawnModeListener localCopy = onSettingsRespawnModeListener;
    if (localCopy != null)
      localCopy.onSettingsRespawnModeReceived(message);
  }

  private void notifySettingsAmmoModeReceived(AdditionalDevice.SettingsAmmoMode message) {
    OnSettingsAmmoModeListener localCopy = onSettingsAmmoModeListener;
    if (localCopy != null)
      localCopy.onSettingsAmmoModeReceived(message);
  }

  private void notifySettingsControlPointReceived(AdditionalDevice.SettingsControlPoint message) {
    OnSettingsControlPointListener localCopy = onSettingsControlPointListener;
    if (localCopy != null)
      localCopy.onSettingsControlPointReceived(message);
  }

  private void notifySettingsBazeModeReceived(AdditionalDevice.SettingsBazeMode message) {
    OnSettingsBazeModeListener localCopy = onSettingsBazeModeListener;
    if (localCopy != null)
      localCopy.onSettingsBazeModeReceived(message);
  }

  private void notifySettingsRandomModeReceived(AdditionalDevice.SettingsRandomMode message) {
    OnSettingsRandomModeListener localCopy = onSettingsRandomModeListener;
    if (localCopy != null)
      localCopy.onSettingsRandomModeReceived(message);
  }

  private void notifySettingsBonusModeReceived(AdditionalDevice.SettingsBonusMode message) {
    OnSettingsBonusModeListener localCopy = onSettingsBonusModeListener;
    if (localCopy != null)
      localCopy.onSettingsBonusModeReceived(message);
  }

  private void notifySettingsTimeCaptureReceived(AdditionalDevice.SettingsTimeCapture message) {
    OnSettingsTimeCaptureListener localCopy = onSettingsTimeCaptureListener;
    if (localCopy != null)
      localCopy.onSettingsTimeCaptureReceived(message);
  }

  private void notifySettingsCaptureByShotReceived(AdditionalDevice.SettingsCaptureByShot message) {
    OnSettingsCaptureByShotListener localCopy = onSettingsCaptureByShotListener;
    if (localCopy != null)
      localCopy.onSettingsCaptureByShotReceived(message);
  }

  private void notifySettingsTugOfWarReceived(AdditionalDevice.SettingsTugOfWar message) {
    OnSettingsTugOfWarListener localCopy = onSettingsTugOfWarListener;
    if (localCopy != null)
      localCopy.onSettingsTugOfWarReceived(message);
  }

  private void notifySettingsThreePersonReceived(AdditionalDevice.SettingsThreePerson message) {
    OnSettingsThreePersonListener localCopy = onSettingsThreePersonListener;
    if (localCopy != null)
      localCopy.onSettingsThreePersonReceived(message);
  }

  private void notifySettingsCaptureFlagReceived(AdditionalDevice.SettingsCaptureFlag message) {
    OnSettingsCaptureFlagListener localCopy = onSettingsCaptureFlagListener;
    if (localCopy != null)
      localCopy.onSettingsCaptureFlagReceived(message);
  }

  private void notifyCurrentCaptureColorTeamReceived(AdditionalDevice.CurrentCaptureColorTeam message) {
    OnCurrentCaptureColorTeamListener localCopy = onCurrentCaptureColorTeamListener;
    if (localCopy != null)
      localCopy.onCurrentCaptureColorTeamReceived(message);
  }

  private void notifyCaptureRateInPercentReceived(AdditionalDevice.CaptureRateInPercent message) {
    OnCaptureRateInPercentListener localCopy = onCaptureRateInPercentListener;
    if (localCopy != null)
      localCopy.onCaptureRateInPercentReceived(message);
  }

  private void notifyTimeHoldByTeamReceived(AdditionalDevice.TimeHoldByTeam message) {
    OnTimeHoldByTeamListener localCopy = onTimeHoldByTeamListener;
    if (localCopy != null)
      localCopy.onTimeHoldByTeamReceived(message);
  }

  private void notifyRemainTimeToWinReceived(AdditionalDevice.RemainTimeToWin message) {
    OnRemainTimeToWinListener localCopy = onRemainTimeToWinListener;
    if (localCopy != null)
      localCopy.onRemainTimeToWinReceived(message);
  }

  private void notifyCurrentHealthReceived(AdditionalDevice.CurrentHealth message) {
    OnCurrentHealthListener localCopy = onCurrentHealthListener;
    if (localCopy != null)
      localCopy.onCurrentHealthReceived(message);
  }

  private void notifySettingsCtfModeReceived(AdditionalDevice.SettingsCTFMode message) {
    OnSettingsCtfModeListener localCopy = onSettingsCtfModeListener;
    if (localCopy != null)
      localCopy.onSettingsCtfModeReceived(message);
  }

  private void notifyGenerateFlagReceived(AdditionalDevice.GenerateFlag message) {
    OnGenerateFlagListener localCopy = onGenerateFlagListener;
    if (localCopy != null)
      localCopy.onGenerateFlagReceived(message);
  }

  private void notifyFlagStatReceived(AdditionalDevice.FlagStat message) {
    OnFlagStatListener localCopy = onFlagStatListener;
    if (localCopy != null)
      localCopy.onFlagStatReceived(message);
  }

  private void notifySettingsBombModeReceived(AdditionalDevice.SettingsBombMode message) {
    OnSettingsBombModeListener localCopy = onSettingsBombModeListener;
    if (localCopy != null)
      localCopy.onSettingsBombModeReceived(message);
  }

  private void notifyLowLevelDeviceConfigReceived(ForpostServer.LowLevelDeviceConfig message) {
    OnLowLevelDeviceConfigListener localCopy = onLowLevelDeviceConfigListener;
    if (localCopy != null)
      localCopy.onLowLevelDeviceConfigReceived(message);
  }

  private void notifyCustomTestModeReceived(Tagger.CustomTestMode message) {
    OnCustomTestModeListener localCopy = onCustomTestModeListener;
    if (localCopy != null)
      localCopy.onCustomTestModeReceived(message);
  }

  private void notifyBobmProSettingsReceived(BombPro.bobmProSettings message) {
    OnBobmProSettingsListener localCopy = onBobmProSettingsListener;
    if (localCopy != null)
      localCopy.onBobmProSettingsReceived(message);
  }

  private void notifyBobmProBreakActionsReceived() {
    OnBobmProBreakActionsListener localCopy = onBobmProBreakActionsListener;
    if (localCopy != null)
      localCopy.onBobmProBreakActionsReceived();
  }

  private void notifyBombPlayersTableReceived(BombPro.bombPlayersTable message) {
    OnBombPlayersTableListener localCopy = onBombPlayersTableListener;
    if (localCopy != null)
      localCopy.onBombPlayersTableReceived(message);
  }

  private void notifyFsInfoReceived() {
    OnFsInfoListener localCopy = onFsInfoListener;
    if (localCopy != null)
      localCopy.onFsInfoReceived();
  }

  private void notifyFormatFsReceived() {
    OnFormatFsListener localCopy = onFormatFsListener;
    if (localCopy != null)
      localCopy.onFormatFsReceived();
  }

  private void notifyLsDirReceived(Filesystem.LsDir message) {
    OnLsDirListener localCopy = onLsDirListener;
    if (localCopy != null)
      localCopy.onLsDirReceived(message);
  }

  private void notifyFileInfoReceived(Filesystem.FileInfo message) {
    OnFileInfoListener localCopy = onFileInfoListener;
    if (localCopy != null)
      localCopy.onFileInfoReceived(message);
  }

  private void notifyDelFileReceived(Filesystem.DelFile message) {
    OnDelFileListener localCopy = onDelFileListener;
    if (localCopy != null)
      localCopy.onDelFileReceived(message);
  }

  private void notifyReadFileReceived(Filesystem.ReadFile message) {
    OnReadFileListener localCopy = onReadFileListener;
    if (localCopy != null)
      localCopy.onReadFileReceived(message);
  }

  private void notifyWriteFileReceived(Filesystem.WriteFile message) {
    OnWriteFileListener localCopy = onWriteFileListener;
    if (localCopy != null)
      localCopy.onWriteFileReceived(message);
  }

  private void notifyCalcMd5Received(Filesystem.CalcMD5 message) {
    OnCalcMd5Listener localCopy = onCalcMd5Listener;
    if (localCopy != null)
      localCopy.onCalcMd5Received(message);
  }

  private void notifyEspConectionStateReceived(Esp.ESPConectionState message) {
    OnEspConectionStateListener localCopy = onEspConectionStateListener;
    if (localCopy != null)
      localCopy.onEspConectionStateReceived(message);
  }

  private void notifyEspConnectToTcpReplyReceived(Esp.ESPConnectToTCPReply message) {
    OnEspConnectToTcpReplyListener localCopy = onEspConnectToTcpReplyListener;
    if (localCopy != null)
      localCopy.onEspConnectToTcpReplyReceived(message);
  }

  private void notifyEspTcpConfirmationReceived(Esp.ESPTcpConfirmation message) {
    OnEspTcpConfirmationListener localCopy = onEspTcpConfirmationListener;
    if (localCopy != null)
      localCopy.onEspTcpConfirmationReceived(message);
  }

  private void notifyEspServerDiscoveredReceived(Esp.ESPServerDiscovered message) {
    OnEspServerDiscoveredListener localCopy = onEspServerDiscoveredListener;
    if (localCopy != null)
      localCopy.onEspServerDiscoveredReceived(message);
  }

  private void notifyEspRssiForNetworkNameReceived(Esp.ESPRssiForNetworkName message) {
    OnEspRssiForNetworkNameListener localCopy = onEspRssiForNetworkNameListener;
    if (localCopy != null)
      localCopy.onEspRssiForNetworkNameReceived(message);
  }

  private void notifyEspWifiAccessPointReceived(Esp.ESPWifiAccessPoint message) {
    OnEspWifiAccessPointListener localCopy = onEspWifiAccessPointListener;
    if (localCopy != null)
      localCopy.onEspWifiAccessPointReceived(message);
  }

  private void notifyEspKillWifiAccessPointReplyReceived(Esp.ESPKillWifiAccessPointReply message) {
    OnEspKillWifiAccessPointReplyListener localCopy = onEspKillWifiAccessPointReplyListener;
    if (localCopy != null)
      localCopy.onEspKillWifiAccessPointReplyReceived(message);
  }

  private void notifyRebootReceived() {
    OnRebootListener localCopy = onRebootListener;
    if (localCopy != null)
      localCopy.onRebootReceived();
  }

  private void notifyVersionRequestReceived() {
    OnVersionRequestListener localCopy = onVersionRequestListener;
    if (localCopy != null)
      localCopy.onVersionRequestReceived();
  }

  private void notifyFirmwareTaskReceived(Firmware.FirmwareTask message) {
    OnFirmwareTaskListener localCopy = onFirmwareTaskListener;
    if (localCopy != null)
      localCopy.onFirmwareTaskReceived(message);
  }

  private void notifyBeginUpdateResourcesReceived() {
    OnBeginUpdateResourcesListener localCopy = onBeginUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onBeginUpdateResourcesReceived();
  }

  private void notifyFinishUpdateResourcesReceived() {
    OnFinishUpdateResourcesListener localCopy = onFinishUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onFinishUpdateResourcesReceived();
  }

  private void notifyGetStackReceived() {
    OnGetStackListener localCopy = onGetStackListener;
    if (localCopy != null)
      localCopy.onGetStackReceived();
  }

  private void notifyGetBuffersStateReceived() {
    OnGetBuffersStateListener localCopy = onGetBuffersStateListener;
    if (localCopy != null)
      localCopy.onGetBuffersStateReceived();
  }

  private void notifySomeDataReceived(RuntimeDbg.SomeData message) {
    OnSomeDataListener localCopy = onSomeDataListener;
    if (localCopy != null)
      localCopy.onSomeDataReceived(message);
  }

  private void notifyRuntimeErrorReceived(RuntimeDbg.RuntimeError message) {
    OnRuntimeErrorListener localCopy = onRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onRuntimeErrorReceived(message);
  }

  private void notifyRuntimeGetErrorsReceived() {
    OnRuntimeGetErrorsListener localCopy = onRuntimeGetErrorsListener;
    if (localCopy != null)
      localCopy.onRuntimeGetErrorsReceived();
  }

  private void notifyRuntimeClearErrorMessagesReceived() {
    OnRuntimeClearErrorMessagesListener localCopy = onRuntimeClearErrorMessagesListener;
    if (localCopy != null)
      localCopy.onRuntimeClearErrorMessagesReceived();
  }

  private void notifyEspRebootReceived() {
    OnEspRebootListener localCopy = onEspRebootListener;
    if (localCopy != null)
      localCopy.onEspRebootReceived();
  }

  private void notifyEspVersionRequestReceived() {
    OnEspVersionRequestListener localCopy = onEspVersionRequestListener;
    if (localCopy != null)
      localCopy.onEspVersionRequestReceived();
  }

  private void notifyEspFirmwareTaskReceived(EspSrv.ESP_FirmwareTask message) {
    OnEspFirmwareTaskListener localCopy = onEspFirmwareTaskListener;
    if (localCopy != null)
      localCopy.onEspFirmwareTaskReceived(message);
  }

  private void notifyEspSomeDataReceived(EspSrv.ESP_SomeData message) {
    OnEspSomeDataListener localCopy = onEspSomeDataListener;
    if (localCopy != null)
      localCopy.onEspSomeDataReceived(message);
  }

  private void notifyEspRuntimeErrorReceived(EspSrv.ESP_RuntimeError message) {
    OnEspRuntimeErrorListener localCopy = onEspRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onEspRuntimeErrorReceived(message);
  }

  private void notifyEspBeginUpdateResourcesReceived() {
    OnEspBeginUpdateResourcesListener localCopy = onEspBeginUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onEspBeginUpdateResourcesReceived();
  }

  private void notifyEspFinishUpdateResourcesReceived() {
    OnEspFinishUpdateResourcesListener localCopy = onEspFinishUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onEspFinishUpdateResourcesReceived();
  }

  private void notifyHelloFromMasterReceived(VestRs485.HelloFromMaster message) {
    OnHelloFromMasterListener localCopy = onHelloFromMasterListener;
    if (localCopy != null)
      localCopy.onHelloFromMasterReceived(message);
  }

  private void notifySettingsVestReceived(VestRs485.SettingsVest message) {
    OnSettingsVestListener localCopy = onSettingsVestListener;
    if (localCopy != null)
      localCopy.onSettingsVestReceived(message);
  }

  private void notifySetStateIndicationReceived(VestRs485.SetStateIndication message) {
    OnSetStateIndicationListener localCopy = onSetStateIndicationListener;
    if (localCopy != null)
      localCopy.onSetStateIndicationReceived(message);
  }

  private void notifySetEventIndicationReceived(VestRs485.SetEventIndication message) {
    OnSetEventIndicationListener localCopy = onSetEventIndicationListener;
    if (localCopy != null)
      localCopy.onSetEventIndicationReceived(message);
  }

  private void notifySendIrReceived(VestRs485.SendIr message) {
    OnSendIrListener localCopy = onSendIrListener;
    if (localCopy != null)
      localCopy.onSendIrReceived(message);
  }

  private void notifyVibroReceived(VestRs485.Vibro message) {
    OnVibroListener localCopy = onVibroListener;
    if (localCopy != null)
      localCopy.onVibroReceived(message);
  }

  private void notifyPlaySoundToSlaveReceived(VestRs485.PlaySoundToSlave message) {
    OnPlaySoundToSlaveListener localCopy = onPlaySoundToSlaveListener;
    if (localCopy != null)
      localCopy.onPlaySoundToSlaveReceived(message);
  }

  private void notifySystemCommandReceived(VestRs485.SystemCommand message) {
    OnSystemCommandListener localCopy = onSystemCommandListener;
    if (localCopy != null)
      localCopy.onSystemCommandReceived(message);
  }

  private void notifyGetStatePowerButtonOnSlaveReceived() {
    OnGetStatePowerButtonOnSlaveListener localCopy = onGetStatePowerButtonOnSlaveListener;
    if (localCopy != null)
      localCopy.onGetStatePowerButtonOnSlaveReceived();
  }

  private void notifySetLanguageOnSlaveReceived(VestRs485.SetLanguageOnSlave message) {
    OnSetLanguageOnSlaveListener localCopy = onSetLanguageOnSlaveListener;
    if (localCopy != null)
      localCopy.onSetLanguageOnSlaveReceived(message);
  }

  private void notifyServerConnectionStatusReceived(VestRs485.ServerConnectionStatus message) {
    OnServerConnectionStatusListener localCopy = onServerConnectionStatusListener;
    if (localCopy != null)
      localCopy.onServerConnectionStatusReceived(message);
  }

  private void notifyPowerOnCommandReceived() {
    OnPowerOnCommandListener localCopy = onPowerOnCommandListener;
    if (localCopy != null)
      localCopy.onPowerOnCommandReceived();
  }

  private void notifyPowerOffCommandReceived() {
    OnPowerOffCommandListener localCopy = onPowerOffCommandListener;
    if (localCopy != null)
      localCopy.onPowerOffCommandReceived();
  }


  @Override
  public void notifyOnConnected() {
    OnConnectedListener localCopy = this.onConnectedListener;
    if (localCopy != null)
      localCopy.onConnected();
  }

  @Override
  public void notifyOnError(Throwable error) {
    OnErrorListener localCopy = this.onErrorListener;
    if (localCopy != null)
      localCopy.onError(error);
  }

  @Override
  public void notifyOnDisconnected() {
    OnDisconnectedListener localCopy = this.onDisconnectedListener;
    if (localCopy != null)
      localCopy.onDisconnected();
  }


  public void setOnStatFromKitListener(OnStatFromKitListener listener)
  {
    onStatFromKitListener = listener;
  }

  public void setOnSettingsArena25Listener(OnSettingsArena25Listener listener)
  {
    onSettingsArena25Listener = listener;
  }

  public void setOnStartGameListener(OnStartGameListener listener)
  {
    onStartGameListener = listener;
  }

  public void setOnStopGameListener(OnStopGameListener listener)
  {
    onStopGameListener = listener;
  }

  public void setOnRespawnListener(OnRespawnListener listener)
  {
    onRespawnListener = listener;
  }

  public void setOnReturnToDefSettingsListener(OnReturnToDefSettingsListener listener)
  {
    onReturnToDefSettingsListener = listener;
  }

  public void setOnRadiationListener(OnRadiationListener listener)
  {
    onRadiationListener = listener;
  }

  public void setOnDoubleHealthListener(OnDoubleHealthListener listener)
  {
    onDoubleHealthListener = listener;
  }

  public void setOnAddHealthListener(OnAddHealthListener listener)
  {
    onAddHealthListener = listener;
  }

  public void setOnPauseGameListener(OnPauseGameListener listener)
  {
    onPauseGameListener = listener;
  }

  public void setOnKillPlayerListener(OnKillPlayerListener listener)
  {
    onKillPlayerListener = listener;
  }

  public void setOnChangeIdListener(OnChangeIdListener listener)
  {
    onChangeIdListener = listener;
  }

  public void setOnChangeColorListener(OnChangeColorListener listener)
  {
    onChangeColorListener = listener;
  }

  public void setOnSetVolumeListener(OnSetVolumeListener listener)
  {
    onSetVolumeListener = listener;
  }

  public void setOnResetStatListener(OnResetStatListener listener)
  {
    onResetStatListener = listener;
  }

  public void setOnMilesCommandListener(OnMilesCommandListener listener)
  {
    onMilesCommandListener = listener;
  }

  public void setOnPingListener(OnPingListener listener)
  {
    onPingListener = listener;
  }

  public void setOnStatFromServerToKitListener(OnStatFromServerToKitListener listener)
  {
    onStatFromServerToKitListener = listener;
  }

  public void setOnStatByIdListener(OnStatByIdListener listener)
  {
    onStatByIdListener = listener;
  }

  public void setOnGetSettingsArena25Listener(OnGetSettingsArena25Listener listener)
  {
    onGetSettingsArena25Listener = listener;
  }

  public void setOnGetAllStatArena25Listener(OnGetAllStatArena25Listener listener)
  {
    onGetAllStatArena25Listener = listener;
  }

  public void setOnSetIRstrengthListener(OnSetIRstrengthListener listener)
  {
    onSetIRstrengthListener = listener;
  }

  public void setOnGetBatteryLevelListener(OnGetBatteryLevelListener listener)
  {
    onGetBatteryLevelListener = listener;
  }

  public void setOnSetBrightnesListener(OnSetBrightnesListener listener)
  {
    onSetBrightnesListener = listener;
  }

  public void setOnUpdateDevListener(OnUpdateDevListener listener)
  {
    onUpdateDevListener = listener;
  }

  public void setOnSetLanguageListener(OnSetLanguageListener listener)
  {
    onSetLanguageListener = listener;
  }

  public void setOnScoreAndPlaceListener(OnScoreAndPlaceListener listener)
  {
    onScoreAndPlaceListener = listener;
  }

  public void setOnSetPlayTimeListener(OnSetPlayTimeListener listener)
  {
    onSetPlayTimeListener = listener;
  }

  public void setOnSetFlagStateListener(OnSetFlagStateListener listener)
  {
    onSetFlagStateListener = listener;
  }

  public void setOnPlaySoundListener(OnPlaySoundListener listener)
  {
    onPlaySoundListener = listener;
  }

  public void setOnStopSoundListener(OnStopSoundListener listener)
  {
    onStopSoundListener = listener;
  }

  public void setOnGetSoundsInfoListener(OnGetSoundsInfoListener listener)
  {
    onGetSoundsInfoListener = listener;
  }

  public void setOnSendDevTypeListener(OnSendDevTypeListener listener)
  {
    onSendDevTypeListener = listener;
  }

  public void setOnDiffDamageListener(OnDiffDamageListener listener)
  {
    onDiffDamageListener = listener;
  }

  public void setOnTurnOffDeviceListener(OnTurnOffDeviceListener listener)
  {
    onTurnOffDeviceListener = listener;
  }

  public void setOnGetInfoSlavesListener(OnGetInfoSlavesListener listener)
  {
    onGetInfoSlavesListener = listener;
  }

  public void setOnSetGameIdListener(OnSetGameIdListener listener)
  {
    onSetGameIdListener = listener;
  }

  public void setOnAdditionalFunctionalityListener(OnAdditionalFunctionalityListener listener)
  {
    onAdditionalFunctionalityListener = listener;
  }

  public void setOnPresetSettingsListener(OnPresetSettingsListener listener)
  {
    onPresetSettingsListener = listener;
  }

  public void setOnWeaponSettingsListener(OnWeaponSettingsListener listener)
  {
    onWeaponSettingsListener = listener;
  }

  public void setOnBleedingSetListener(OnBleedingSetListener listener)
  {
    onBleedingSetListener = listener;
  }

  public void setOnPlayersTableListener(OnPlayersTableListener listener)
  {
    onPlayersTableListener = listener;
  }

  public void setOnSetHealthListener(OnSetHealthListener listener)
  {
    onSetHealthListener = listener;
  }

  public void setOnSetDefHealthListener(OnSetDefHealthListener listener)
  {
    onSetDefHealthListener = listener;
  }

  public void setOnStressBeltSettingsListener(OnStressBeltSettingsListener listener)
  {
    onStressBeltSettingsListener = listener;
  }

  public void setOnSuperModeSettingsListener(OnSuperModeSettingsListener listener)
  {
    onSuperModeSettingsListener = listener;
  }

  public void setOnGetSuperModeSettingsListener(OnGetSuperModeSettingsListener listener)
  {
    onGetSuperModeSettingsListener = listener;
  }

  public void setOnSettingsHealingRunListener(OnSettingsHealingRunListener listener)
  {
    onSettingsHealingRunListener = listener;
  }

  public void setOnSettingsNotAgrListener(OnSettingsNotAgrListener listener)
  {
    onSettingsNotAgrListener = listener;
  }

  public void setOnSettingsRadiationOrMedicineModeListener(OnSettingsRadiationOrMedicineModeListener listener)
  {
    onSettingsRadiationOrMedicineModeListener = listener;
  }

  public void setOnSettingsRespawnModeListener(OnSettingsRespawnModeListener listener)
  {
    onSettingsRespawnModeListener = listener;
  }

  public void setOnSettingsAmmoModeListener(OnSettingsAmmoModeListener listener)
  {
    onSettingsAmmoModeListener = listener;
  }

  public void setOnSettingsControlPointListener(OnSettingsControlPointListener listener)
  {
    onSettingsControlPointListener = listener;
  }

  public void setOnSettingsBazeModeListener(OnSettingsBazeModeListener listener)
  {
    onSettingsBazeModeListener = listener;
  }

  public void setOnSettingsRandomModeListener(OnSettingsRandomModeListener listener)
  {
    onSettingsRandomModeListener = listener;
  }

  public void setOnSettingsBonusModeListener(OnSettingsBonusModeListener listener)
  {
    onSettingsBonusModeListener = listener;
  }

  public void setOnSettingsTimeCaptureListener(OnSettingsTimeCaptureListener listener)
  {
    onSettingsTimeCaptureListener = listener;
  }

  public void setOnSettingsCaptureByShotListener(OnSettingsCaptureByShotListener listener)
  {
    onSettingsCaptureByShotListener = listener;
  }

  public void setOnSettingsTugOfWarListener(OnSettingsTugOfWarListener listener)
  {
    onSettingsTugOfWarListener = listener;
  }

  public void setOnSettingsThreePersonListener(OnSettingsThreePersonListener listener)
  {
    onSettingsThreePersonListener = listener;
  }

  public void setOnSettingsCaptureFlagListener(OnSettingsCaptureFlagListener listener)
  {
    onSettingsCaptureFlagListener = listener;
  }

  public void setOnCurrentCaptureColorTeamListener(OnCurrentCaptureColorTeamListener listener)
  {
    onCurrentCaptureColorTeamListener = listener;
  }

  public void setOnCaptureRateInPercentListener(OnCaptureRateInPercentListener listener)
  {
    onCaptureRateInPercentListener = listener;
  }

  public void setOnTimeHoldByTeamListener(OnTimeHoldByTeamListener listener)
  {
    onTimeHoldByTeamListener = listener;
  }

  public void setOnRemainTimeToWinListener(OnRemainTimeToWinListener listener)
  {
    onRemainTimeToWinListener = listener;
  }

  public void setOnCurrentHealthListener(OnCurrentHealthListener listener)
  {
    onCurrentHealthListener = listener;
  }

  public void setOnSettingsCtfModeListener(OnSettingsCtfModeListener listener)
  {
    onSettingsCtfModeListener = listener;
  }

  public void setOnGenerateFlagListener(OnGenerateFlagListener listener)
  {
    onGenerateFlagListener = listener;
  }

  public void setOnFlagStatListener(OnFlagStatListener listener)
  {
    onFlagStatListener = listener;
  }

  public void setOnSettingsBombModeListener(OnSettingsBombModeListener listener)
  {
    onSettingsBombModeListener = listener;
  }

  public void setOnLowLevelDeviceConfigListener(OnLowLevelDeviceConfigListener listener)
  {
    onLowLevelDeviceConfigListener = listener;
  }

  public void setOnCustomTestModeListener(OnCustomTestModeListener listener)
  {
    onCustomTestModeListener = listener;
  }

  public void setOnBobmProSettingsListener(OnBobmProSettingsListener listener)
  {
    onBobmProSettingsListener = listener;
  }

  public void setOnBobmProBreakActionsListener(OnBobmProBreakActionsListener listener)
  {
    onBobmProBreakActionsListener = listener;
  }

  public void setOnBombPlayersTableListener(OnBombPlayersTableListener listener)
  {
    onBombPlayersTableListener = listener;
  }

  public void setOnFsInfoListener(OnFsInfoListener listener)
  {
    onFsInfoListener = listener;
  }

  public void setOnFormatFsListener(OnFormatFsListener listener)
  {
    onFormatFsListener = listener;
  }

  public void setOnLsDirListener(OnLsDirListener listener)
  {
    onLsDirListener = listener;
  }

  public void setOnFileInfoListener(OnFileInfoListener listener)
  {
    onFileInfoListener = listener;
  }

  public void setOnDelFileListener(OnDelFileListener listener)
  {
    onDelFileListener = listener;
  }

  public void setOnReadFileListener(OnReadFileListener listener)
  {
    onReadFileListener = listener;
  }

  public void setOnWriteFileListener(OnWriteFileListener listener)
  {
    onWriteFileListener = listener;
  }

  public void setOnCalcMd5Listener(OnCalcMd5Listener listener)
  {
    onCalcMd5Listener = listener;
  }

  public void setOnEspConectionStateListener(OnEspConectionStateListener listener)
  {
    onEspConectionStateListener = listener;
  }

  public void setOnEspConnectToTcpReplyListener(OnEspConnectToTcpReplyListener listener)
  {
    onEspConnectToTcpReplyListener = listener;
  }

  public void setOnEspTcpConfirmationListener(OnEspTcpConfirmationListener listener)
  {
    onEspTcpConfirmationListener = listener;
  }

  public void setOnEspServerDiscoveredListener(OnEspServerDiscoveredListener listener)
  {
    onEspServerDiscoveredListener = listener;
  }

  public void setOnEspRssiForNetworkNameListener(OnEspRssiForNetworkNameListener listener)
  {
    onEspRssiForNetworkNameListener = listener;
  }

  public void setOnEspWifiAccessPointListener(OnEspWifiAccessPointListener listener)
  {
    onEspWifiAccessPointListener = listener;
  }

  public void setOnEspKillWifiAccessPointReplyListener(OnEspKillWifiAccessPointReplyListener listener)
  {
    onEspKillWifiAccessPointReplyListener = listener;
  }

  public void setOnRebootListener(OnRebootListener listener)
  {
    onRebootListener = listener;
  }

  public void setOnVersionRequestListener(OnVersionRequestListener listener)
  {
    onVersionRequestListener = listener;
  }

  public void setOnFirmwareTaskListener(OnFirmwareTaskListener listener)
  {
    onFirmwareTaskListener = listener;
  }

  public void setOnBeginUpdateResourcesListener(OnBeginUpdateResourcesListener listener)
  {
    onBeginUpdateResourcesListener = listener;
  }

  public void setOnFinishUpdateResourcesListener(OnFinishUpdateResourcesListener listener)
  {
    onFinishUpdateResourcesListener = listener;
  }

  public void setOnGetStackListener(OnGetStackListener listener)
  {
    onGetStackListener = listener;
  }

  public void setOnGetBuffersStateListener(OnGetBuffersStateListener listener)
  {
    onGetBuffersStateListener = listener;
  }

  public void setOnSomeDataListener(OnSomeDataListener listener)
  {
    onSomeDataListener = listener;
  }

  public void setOnRuntimeErrorListener(OnRuntimeErrorListener listener)
  {
    onRuntimeErrorListener = listener;
  }

  public void setOnRuntimeGetErrorsListener(OnRuntimeGetErrorsListener listener)
  {
    onRuntimeGetErrorsListener = listener;
  }

  public void setOnRuntimeClearErrorMessagesListener(OnRuntimeClearErrorMessagesListener listener)
  {
    onRuntimeClearErrorMessagesListener = listener;
  }

  public void setOnEspRebootListener(OnEspRebootListener listener)
  {
    onEspRebootListener = listener;
  }

  public void setOnEspVersionRequestListener(OnEspVersionRequestListener listener)
  {
    onEspVersionRequestListener = listener;
  }

  public void setOnEspFirmwareTaskListener(OnEspFirmwareTaskListener listener)
  {
    onEspFirmwareTaskListener = listener;
  }

  public void setOnEspSomeDataListener(OnEspSomeDataListener listener)
  {
    onEspSomeDataListener = listener;
  }

  public void setOnEspRuntimeErrorListener(OnEspRuntimeErrorListener listener)
  {
    onEspRuntimeErrorListener = listener;
  }

  public void setOnEspBeginUpdateResourcesListener(OnEspBeginUpdateResourcesListener listener)
  {
    onEspBeginUpdateResourcesListener = listener;
  }

  public void setOnEspFinishUpdateResourcesListener(OnEspFinishUpdateResourcesListener listener)
  {
    onEspFinishUpdateResourcesListener = listener;
  }

  public void setOnHelloFromMasterListener(OnHelloFromMasterListener listener)
  {
    onHelloFromMasterListener = listener;
  }

  public void setOnSettingsVestListener(OnSettingsVestListener listener)
  {
    onSettingsVestListener = listener;
  }

  public void setOnSetStateIndicationListener(OnSetStateIndicationListener listener)
  {
    onSetStateIndicationListener = listener;
  }

  public void setOnSetEventIndicationListener(OnSetEventIndicationListener listener)
  {
    onSetEventIndicationListener = listener;
  }

  public void setOnSendIrListener(OnSendIrListener listener)
  {
    onSendIrListener = listener;
  }

  public void setOnVibroListener(OnVibroListener listener)
  {
    onVibroListener = listener;
  }

  public void setOnPlaySoundToSlaveListener(OnPlaySoundToSlaveListener listener)
  {
    onPlaySoundToSlaveListener = listener;
  }

  public void setOnSystemCommandListener(OnSystemCommandListener listener)
  {
    onSystemCommandListener = listener;
  }

  public void setOnGetStatePowerButtonOnSlaveListener(OnGetStatePowerButtonOnSlaveListener listener)
  {
    onGetStatePowerButtonOnSlaveListener = listener;
  }

  public void setOnSetLanguageOnSlaveListener(OnSetLanguageOnSlaveListener listener)
  {
    onSetLanguageOnSlaveListener = listener;
  }

  public void setOnServerConnectionStatusListener(OnServerConnectionStatusListener listener)
  {
    onServerConnectionStatusListener = listener;
  }

  public void setOnPowerOnCommandListener(OnPowerOnCommandListener listener)
  {
    onPowerOnCommandListener = listener;
  }

  public void setOnPowerOffCommandListener(OnPowerOffCommandListener listener)
  {
    onPowerOffCommandListener = listener;
  }


  public void setOnConnectedListener(OnConnectedListener listener)
  {
    this.onConnectedListener = listener;
  }

  public void setOnErrorListener(OnErrorListener listener)
  {
    this.onErrorListener = listener;
  }

  public void setOnDisconnectedListener(OnDisconnectedListener listener)
  {
    this.onDisconnectedListener = listener;
  }


  @Override
  public Message parseMessage(int commandId, CodedInputStream inputStream) throws IOException {
    switch(commandId) {
    case 1: return Tagger.StatFromKit.parser().parsePartialFrom(inputStream);
    case 2: return Tagger.SettingsArena2_5.parser().parsePartialFrom(inputStream);
    case 3: return ForpostServer.StartGame.parser().parsePartialFrom(inputStream);
    case 7: return Tagger.Radiation.parser().parsePartialFrom(inputStream);
    case 9: return Tagger.AddHealth.parser().parsePartialFrom(inputStream);
    case 12: return ForpostServer.ChangeId.parser().parsePartialFrom(inputStream);
    case 13: return Tagger.ChangeColor.parser().parsePartialFrom(inputStream);
    case 14: return ForpostServer.SetVolume.parser().parsePartialFrom(inputStream);
    case 16: return ForpostServer.MilesCommand.parser().parsePartialFrom(inputStream);
    case 18: return Tagger.StatFromServerToKit.parser().parsePartialFrom(inputStream);
    case 19: return ForpostServer.StatById.parser().parsePartialFrom(inputStream);
    case 22: return ForpostServer.SetIRstrength.parser().parsePartialFrom(inputStream);
    case 24: return ForpostServer.SetBrightnes.parser().parsePartialFrom(inputStream);
    case 26: return ForpostServer.setLanguage.parser().parsePartialFrom(inputStream);
    case 27: return Tagger.ScoreAndPlace.parser().parsePartialFrom(inputStream);
    case 28: return Tagger.SetPlayTime.parser().parsePartialFrom(inputStream);
    case 29: return Tagger.SetFlagState.parser().parsePartialFrom(inputStream);
    case 30: return ForpostServer.PlaySound.parser().parsePartialFrom(inputStream);
    case 31: return ForpostServer.StopSound.parser().parsePartialFrom(inputStream);
    case 34: return ForpostServer.SendDevType.parser().parsePartialFrom(inputStream);
    case 35: return Tagger.DiffDamage.parser().parsePartialFrom(inputStream);
    case 38: return ForpostServer.SetGameId.parser().parsePartialFrom(inputStream);
    case 39: return Tagger.AdditionalFunctionality.parser().parsePartialFrom(inputStream);
    case 40: return Tagger.PresetSettings.parser().parsePartialFrom(inputStream);
    case 41: return Tagger.WeaponSettings.parser().parsePartialFrom(inputStream);
    case 42: return Tagger.BleedingSet.parser().parsePartialFrom(inputStream);
    case 43: return Tagger.PlayersTable.parser().parsePartialFrom(inputStream);
    case 44: return Tagger.SetHealth.parser().parsePartialFrom(inputStream);
    case 45: return Tagger.SetDefHealth.parser().parsePartialFrom(inputStream);
    case 46: return StressBelt.StressBeltSettings.parser().parsePartialFrom(inputStream);
    case 47: return Tagger.SuperModeSettings.parser().parsePartialFrom(inputStream);
    case 49: return Tagger.SettingsHealingRun.parser().parsePartialFrom(inputStream);
    case 50: return Tagger.SettingsNotAgr.parser().parsePartialFrom(inputStream);
    case 51: return AdditionalDevice.SettingsRadiationOrMedicineMode.parser().parsePartialFrom(inputStream);
    case 52: return AdditionalDevice.SettingsRespawnMode.parser().parsePartialFrom(inputStream);
    case 53: return AdditionalDevice.SettingsAmmoMode.parser().parsePartialFrom(inputStream);
    case 54: return AdditionalDevice.SettingsControlPoint.parser().parsePartialFrom(inputStream);
    case 55: return AdditionalDevice.SettingsBazeMode.parser().parsePartialFrom(inputStream);
    case 56: return AdditionalDevice.SettingsRandomMode.parser().parsePartialFrom(inputStream);
    case 57: return AdditionalDevice.SettingsBonusMode.parser().parsePartialFrom(inputStream);
    case 58: return AdditionalDevice.SettingsTimeCapture.parser().parsePartialFrom(inputStream);
    case 59: return AdditionalDevice.SettingsCaptureByShot.parser().parsePartialFrom(inputStream);
    case 60: return AdditionalDevice.SettingsTugOfWar.parser().parsePartialFrom(inputStream);
    case 61: return AdditionalDevice.SettingsThreePerson.parser().parsePartialFrom(inputStream);
    case 62: return AdditionalDevice.SettingsCaptureFlag.parser().parsePartialFrom(inputStream);
    case 63: return AdditionalDevice.CurrentCaptureColorTeam.parser().parsePartialFrom(inputStream);
    case 64: return AdditionalDevice.CaptureRateInPercent.parser().parsePartialFrom(inputStream);
    case 65: return AdditionalDevice.TimeHoldByTeam.parser().parsePartialFrom(inputStream);
    case 66: return AdditionalDevice.RemainTimeToWin.parser().parsePartialFrom(inputStream);
    case 67: return AdditionalDevice.CurrentHealth.parser().parsePartialFrom(inputStream);
    case 68: return AdditionalDevice.SettingsCTFMode.parser().parsePartialFrom(inputStream);
    case 69: return AdditionalDevice.GenerateFlag.parser().parsePartialFrom(inputStream);
    case 70: return AdditionalDevice.FlagStat.parser().parsePartialFrom(inputStream);
    case 71: return AdditionalDevice.SettingsBombMode.parser().parsePartialFrom(inputStream);
    case 72: return ForpostServer.LowLevelDeviceConfig.parser().parsePartialFrom(inputStream);
    case 150: return Tagger.CustomTestMode.parser().parsePartialFrom(inputStream);
    case 156: return BombPro.bobmProSettings.parser().parsePartialFrom(inputStream);
    case 158: return BombPro.bombPlayersTable.parser().parsePartialFrom(inputStream);
    case 303: return Filesystem.LsDir.parser().parsePartialFrom(inputStream);
    case 304: return Filesystem.FileInfo.parser().parsePartialFrom(inputStream);
    case 305: return Filesystem.DelFile.parser().parsePartialFrom(inputStream);
    case 306: return Filesystem.ReadFile.parser().parsePartialFrom(inputStream);
    case 307: return Filesystem.WriteFile.parser().parsePartialFrom(inputStream);
    case 308: return Filesystem.CalcMD5.parser().parsePartialFrom(inputStream);
    case 1001: return Esp.ESPConectionState.parser().parsePartialFrom(inputStream);
    case 1002: return Esp.ESPConnectToTCPReply.parser().parsePartialFrom(inputStream);
    case 1003: return Esp.ESPTcpConfirmation.parser().parsePartialFrom(inputStream);
    case 1004: return Esp.ESPServerDiscovered.parser().parsePartialFrom(inputStream);
    case 1005: return Esp.ESPRssiForNetworkName.parser().parsePartialFrom(inputStream);
    case 1006: return Esp.ESPWifiAccessPoint.parser().parsePartialFrom(inputStream);
    case 1007: return Esp.ESPKillWifiAccessPointReply.parser().parsePartialFrom(inputStream);
    case 1103: return Firmware.FirmwareTask.parser().parsePartialFrom(inputStream);
    case 1203: return RuntimeDbg.SomeData.parser().parsePartialFrom(inputStream);
    case 1204: return RuntimeDbg.RuntimeError.parser().parsePartialFrom(inputStream);
    case 2003: return EspSrv.ESP_FirmwareTask.parser().parsePartialFrom(inputStream);
    case 2005: return EspSrv.ESP_SomeData.parser().parsePartialFrom(inputStream);
    case 2006: return EspSrv.ESP_RuntimeError.parser().parsePartialFrom(inputStream);
    case 3201: return VestRs485.HelloFromMaster.parser().parsePartialFrom(inputStream);
    case 3202: return VestRs485.SettingsVest.parser().parsePartialFrom(inputStream);
    case 3203: return VestRs485.SetStateIndication.parser().parsePartialFrom(inputStream);
    case 3204: return VestRs485.SetEventIndication.parser().parsePartialFrom(inputStream);
    case 3205: return VestRs485.SendIr.parser().parsePartialFrom(inputStream);
    case 3206: return VestRs485.Vibro.parser().parsePartialFrom(inputStream);
    case 3207: return VestRs485.PlaySoundToSlave.parser().parsePartialFrom(inputStream);
    case 3208: return VestRs485.SystemCommand.parser().parsePartialFrom(inputStream);
    case 3210: return VestRs485.SetLanguageOnSlave.parser().parsePartialFrom(inputStream);
    case 3211: return VestRs485.ServerConnectionStatus.parser().parsePartialFrom(inputStream);
    default:
       return null;
    }
  }

  @Override
  public void dispatchMessage(int commandId, MessageLite message) {
    switch(commandId) {
    case 1: notifyStatFromKitReceived((Tagger.StatFromKit)message);
      return;
    case 2: notifySettingsArena25Received((Tagger.SettingsArena2_5)message);
      return ;
    case 3: notifyStartGameReceived((ForpostServer.StartGame)message);
      return ;
    case 4: notifyStopGameReceived();
      return ;
    case 5: notifyRespawnReceived();
      return ;
    case 6: notifyReturnToDefSettingsReceived();
      return ;
    case 7: notifyRadiationReceived((Tagger.Radiation)message);
      return ;
    case 8: notifyDoubleHealthReceived();
      return ;
    case 9: notifyAddHealthReceived((Tagger.AddHealth)message);
      return ;
    case 10: notifyPauseGameReceived();
      return ;
    case 11: notifyKillPlayerReceived();
      return ;
    case 12: notifyChangeIdReceived((ForpostServer.ChangeId)message);
      return ;
    case 13: notifyChangeColorReceived((Tagger.ChangeColor)message);
      return ;
    case 14: notifySetVolumeReceived((ForpostServer.SetVolume)message);
      return ;
    case 15: notifyResetStatReceived();
      return ;
    case 16: notifyMilesCommandReceived((ForpostServer.MilesCommand)message);
      return ;
    case 17: notifyPingReceived();
      return ;
    case 18: notifyStatFromServerToKitReceived((Tagger.StatFromServerToKit)message);
      return ;
    case 19: notifyStatByIdReceived((ForpostServer.StatById)message);
      return ;
    case 20: notifyGetSettingsArena25Received();
      return ;
    case 21: notifyGetAllStatArena25Received();
      return ;
    case 22: notifySetIRstrengthReceived((ForpostServer.SetIRstrength)message);
      return ;
    case 23: notifyGetBatteryLevelReceived();
      return ;
    case 24: notifySetBrightnesReceived((ForpostServer.SetBrightnes)message);
      return ;
    case 25: notifyUpdateDevReceived();
      return ;
    case 26: notifySetLanguageReceived((ForpostServer.setLanguage)message);
      return ;
    case 27: notifyScoreAndPlaceReceived((Tagger.ScoreAndPlace)message);
      return ;
    case 28: notifySetPlayTimeReceived((Tagger.SetPlayTime)message);
      return ;
    case 29: notifySetFlagStateReceived((Tagger.SetFlagState)message);
      return ;
    case 30: notifyPlaySoundReceived((ForpostServer.PlaySound)message);
      return ;
    case 31: notifyStopSoundReceived((ForpostServer.StopSound)message);
      return ;
    case 32: notifyGetSoundsInfoReceived();
      return ;
    case 34: notifySendDevTypeReceived((ForpostServer.SendDevType)message);
      return ;
    case 35: notifyDiffDamageReceived((Tagger.DiffDamage)message);
      return ;
    case 36: notifyTurnOffDeviceReceived();
      return ;
    case 37: notifyGetInfoSlavesReceived();
      return ;
    case 38: notifySetGameIdReceived((ForpostServer.SetGameId)message);
      return ;
    case 39: notifyAdditionalFunctionalityReceived((Tagger.AdditionalFunctionality)message);
      return ;
    case 40: notifyPresetSettingsReceived((Tagger.PresetSettings)message);
      return ;
    case 41: notifyWeaponSettingsReceived((Tagger.WeaponSettings)message);
      return ;
    case 42: notifyBleedingSetReceived((Tagger.BleedingSet)message);
      return ;
    case 43: notifyPlayersTableReceived((Tagger.PlayersTable)message);
      return ;
    case 44: notifySetHealthReceived((Tagger.SetHealth)message);
      return ;
    case 45: notifySetDefHealthReceived((Tagger.SetDefHealth)message);
      return ;
    case 46: notifyStressBeltSettingsReceived((StressBelt.StressBeltSettings)message);
      return ;
    case 47: notifySuperModeSettingsReceived((Tagger.SuperModeSettings)message);
      return ;
    case 48: notifyGetSuperModeSettingsReceived();
      return ;
    case 49: notifySettingsHealingRunReceived((Tagger.SettingsHealingRun)message);
      return ;
    case 50: notifySettingsNotAgrReceived((Tagger.SettingsNotAgr)message);
      return ;
    case 51: notifySettingsRadiationOrMedicineModeReceived((AdditionalDevice.SettingsRadiationOrMedicineMode)message);
      return ;
    case 52: notifySettingsRespawnModeReceived((AdditionalDevice.SettingsRespawnMode)message);
      return ;
    case 53: notifySettingsAmmoModeReceived((AdditionalDevice.SettingsAmmoMode)message);
      return ;
    case 54: notifySettingsControlPointReceived((AdditionalDevice.SettingsControlPoint)message);
      return ;
    case 55: notifySettingsBazeModeReceived((AdditionalDevice.SettingsBazeMode)message);
      return ;
    case 56: notifySettingsRandomModeReceived((AdditionalDevice.SettingsRandomMode)message);
      return ;
    case 57: notifySettingsBonusModeReceived((AdditionalDevice.SettingsBonusMode)message);
      return ;
    case 58: notifySettingsTimeCaptureReceived((AdditionalDevice.SettingsTimeCapture)message);
      return ;
    case 59: notifySettingsCaptureByShotReceived((AdditionalDevice.SettingsCaptureByShot)message);
      return ;
    case 60: notifySettingsTugOfWarReceived((AdditionalDevice.SettingsTugOfWar)message);
      return ;
    case 61: notifySettingsThreePersonReceived((AdditionalDevice.SettingsThreePerson)message);
      return ;
    case 62: notifySettingsCaptureFlagReceived((AdditionalDevice.SettingsCaptureFlag)message);
      return ;
    case 63: notifyCurrentCaptureColorTeamReceived((AdditionalDevice.CurrentCaptureColorTeam)message);
      return ;
    case 64: notifyCaptureRateInPercentReceived((AdditionalDevice.CaptureRateInPercent)message);
      return ;
    case 65: notifyTimeHoldByTeamReceived((AdditionalDevice.TimeHoldByTeam)message);
      return ;
    case 66: notifyRemainTimeToWinReceived((AdditionalDevice.RemainTimeToWin)message);
      return ;
    case 67: notifyCurrentHealthReceived((AdditionalDevice.CurrentHealth)message);
      return ;
    case 68: notifySettingsCtfModeReceived((AdditionalDevice.SettingsCTFMode)message);
      return ;
    case 69: notifyGenerateFlagReceived((AdditionalDevice.GenerateFlag)message);
      return ;
    case 70: notifyFlagStatReceived((AdditionalDevice.FlagStat)message);
      return ;
    case 71: notifySettingsBombModeReceived((AdditionalDevice.SettingsBombMode)message);
      return ;
    case 72: notifyLowLevelDeviceConfigReceived((ForpostServer.LowLevelDeviceConfig)message);
      return ;
    case 150: notifyCustomTestModeReceived((Tagger.CustomTestMode)message);
      return ;
    case 156: notifyBobmProSettingsReceived((BombPro.bobmProSettings)message);
      return ;
    case 157: notifyBobmProBreakActionsReceived();
      return ;
    case 158: notifyBombPlayersTableReceived((BombPro.bombPlayersTable)message);
      return ;
    case 301: notifyFsInfoReceived();
      return ;
    case 302: notifyFormatFsReceived();
      return ;
    case 303: notifyLsDirReceived((Filesystem.LsDir)message);
      return ;
    case 304: notifyFileInfoReceived((Filesystem.FileInfo)message);
      return ;
    case 305: notifyDelFileReceived((Filesystem.DelFile)message);
      return ;
    case 306: notifyReadFileReceived((Filesystem.ReadFile)message);
      return ;
    case 307: notifyWriteFileReceived((Filesystem.WriteFile)message);
      return ;
    case 308: notifyCalcMd5Received((Filesystem.CalcMD5)message);
      return ;
    case 1001: notifyEspConectionStateReceived((Esp.ESPConectionState)message);
      return ;
    case 1002: notifyEspConnectToTcpReplyReceived((Esp.ESPConnectToTCPReply)message);
      return ;
    case 1003: notifyEspTcpConfirmationReceived((Esp.ESPTcpConfirmation)message);
      return ;
    case 1004: notifyEspServerDiscoveredReceived((Esp.ESPServerDiscovered)message);
      return ;
    case 1005: notifyEspRssiForNetworkNameReceived((Esp.ESPRssiForNetworkName)message);
      return ;
    case 1006: notifyEspWifiAccessPointReceived((Esp.ESPWifiAccessPoint)message);
      return ;
    case 1007: notifyEspKillWifiAccessPointReplyReceived((Esp.ESPKillWifiAccessPointReply)message);
      return ;
    case 1101: notifyRebootReceived();
      return ;
    case 1102: notifyVersionRequestReceived();
      return ;
    case 1103: notifyFirmwareTaskReceived((Firmware.FirmwareTask)message);
      return ;
    case 1104: notifyBeginUpdateResourcesReceived();
      return ;
    case 1105: notifyFinishUpdateResourcesReceived();
      return ;
    case 1201: notifyGetStackReceived();
      return ;
    case 1202: notifyGetBuffersStateReceived();
      return ;
    case 1203: notifySomeDataReceived((RuntimeDbg.SomeData)message);
      return ;
    case 1204: notifyRuntimeErrorReceived((RuntimeDbg.RuntimeError)message);
      return ;
    case 1205: notifyRuntimeGetErrorsReceived();
      return ;
    case 1206: notifyRuntimeClearErrorMessagesReceived();
      return ;
    case 2001: notifyEspRebootReceived();
      return ;
    case 2002: notifyEspVersionRequestReceived();
      return ;
    case 2003: notifyEspFirmwareTaskReceived((EspSrv.ESP_FirmwareTask)message);
      return ;
    case 2005: notifyEspSomeDataReceived((EspSrv.ESP_SomeData)message);
      return ;
    case 2006: notifyEspRuntimeErrorReceived((EspSrv.ESP_RuntimeError)message);
      return ;
    case 2007: notifyEspBeginUpdateResourcesReceived();
      return ;
    case 2008: notifyEspFinishUpdateResourcesReceived();
      return ;
    case 3201: notifyHelloFromMasterReceived((VestRs485.HelloFromMaster)message);
      return ;
    case 3202: notifySettingsVestReceived((VestRs485.SettingsVest)message);
      return ;
    case 3203: notifySetStateIndicationReceived((VestRs485.SetStateIndication)message);
      return ;
    case 3204: notifySetEventIndicationReceived((VestRs485.SetEventIndication)message);
      return ;
    case 3205: notifySendIrReceived((VestRs485.SendIr)message);
      return ;
    case 3206: notifyVibroReceived((VestRs485.Vibro)message);
      return ;
    case 3207: notifyPlaySoundToSlaveReceived((VestRs485.PlaySoundToSlave)message);
      return ;
    case 3208: notifySystemCommandReceived((VestRs485.SystemCommand)message);
      return ;
    case 3209: notifyGetStatePowerButtonOnSlaveReceived();
      return ;
    case 3210: notifySetLanguageOnSlaveReceived((VestRs485.SetLanguageOnSlave)message);
      return ;
    case 3211: notifyServerConnectionStatusReceived((VestRs485.ServerConnectionStatus)message);
      return ;
    case 3212: notifyPowerOnCommandReceived();
      return ;
    case 3213: notifyPowerOffCommandReceived();
      return ;
    default:
       return ;
    }
  }

}
