// Generated by the protocol buffer compiler. DO NOT EDIT!
// if you need to change something in code generator, please contact Alexander Lobas (alexanderlobas@yahoo.com)
package generation_java_files;

import build.generated.source.proto.main.java.*;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.Message;
import proto_server_client.servers.ProtoServer;

import java.io.IOException;

public class AdditionalDeviceServerApi {

  public ProtoServer.ProtocolDispatcher getProtocolDispatcher() {
    return mProtocolDispatcher;
  }

  public interface Connection {
    boolean sendStatFromKit(Tagger.StatFromKit message);
    boolean sendSettingsArena25(Tagger.SettingsArena2_5 message);
    boolean sendStartGame(ForpostServer.StartGame message);
    boolean sendStopGame();
    boolean sendRespawn();
    boolean sendReturnToDefSettings();
    boolean sendRadiation(Tagger.Radiation message);
    boolean sendDoubleHealth();
    boolean sendAddHealth(Tagger.AddHealth message);
    boolean sendPauseGame();
    boolean sendKillPlayer();
    boolean sendChangeId(ForpostServer.ChangeId message);
    boolean sendChangeColor(Tagger.ChangeColor message);
    boolean sendSetVolume(ForpostServer.SetVolume message);
    boolean sendResetStat();
    boolean sendMilesCommand(ForpostServer.MilesCommand message);
    boolean sendPing();
    boolean sendStatFromServerToKit(Tagger.StatFromServerToKit message);
    boolean sendStatById(ForpostServer.StatById message);
    boolean sendGetSettingsArena25();
    boolean sendGetAllStatArena25();
    boolean sendSetIRstrength(ForpostServer.SetIRstrength message);
    boolean sendGetBatteryLevel();
    boolean sendSetBrightnes(ForpostServer.SetBrightnes message);
    boolean sendUpdateDev();
    boolean sendSetLanguage(ForpostServer.setLanguage message);
    boolean sendScoreAndPlace(Tagger.ScoreAndPlace message);
    boolean sendSetPlayTime(Tagger.SetPlayTime message);
    boolean sendSetFlagState(Tagger.SetFlagState message);
    boolean sendPlaySound(ForpostServer.PlaySound message);
    boolean sendStopSound(ForpostServer.StopSound message);
    boolean sendGetSoundsInfo();
    boolean sendSendDevType(ForpostServer.SendDevType message);
    boolean sendDiffDamage(Tagger.DiffDamage message);
    boolean sendTurnOffDevice();
    boolean sendGetInfoSlaves();
    boolean sendSetGameId(ForpostServer.SetGameId message);
    boolean sendAdditionalFunctionality(Tagger.AdditionalFunctionality message);
    boolean sendPresetSettings(Tagger.PresetSettings message);
    boolean sendWeaponSettings(Tagger.WeaponSettings message);
    boolean sendBleedingSet(Tagger.BleedingSet message);
    boolean sendPlayersTable(Tagger.PlayersTable message);
    boolean sendSetHealth(Tagger.SetHealth message);
    boolean sendSetDefHealth(Tagger.SetDefHealth message);
    boolean sendStressBeltSettings(StressBelt.StressBeltSettings message);
    boolean sendSuperModeSettings(Tagger.SuperModeSettings message);
    boolean sendGetSuperModeSettings();
    boolean sendSettingsHealingRun(Tagger.SettingsHealingRun message);
    boolean sendSettingsNotAgr(Tagger.SettingsNotAgr message);
    boolean sendSettingsRadiationOrMedicineMode(AdditionalDevice.SettingsRadiationOrMedicineMode message);
    boolean sendSettingsRespawnMode(AdditionalDevice.SettingsRespawnMode message);
    boolean sendSettingsAmmoMode(AdditionalDevice.SettingsAmmoMode message);
    boolean sendSettingsControlPoint(AdditionalDevice.SettingsControlPoint message);
    boolean sendSettingsBazeMode(AdditionalDevice.SettingsBazeMode message);
    boolean sendSettingsRandomMode(AdditionalDevice.SettingsRandomMode message);
    boolean sendSettingsBonusMode(AdditionalDevice.SettingsBonusMode message);
    boolean sendSettingsTimeCapture(AdditionalDevice.SettingsTimeCapture message);
    boolean sendSettingsCaptureByShot(AdditionalDevice.SettingsCaptureByShot message);
    boolean sendSettingsTugOfWar(AdditionalDevice.SettingsTugOfWar message);
    boolean sendSettingsThreePerson(AdditionalDevice.SettingsThreePerson message);
    boolean sendSettingsCaptureFlag(AdditionalDevice.SettingsCaptureFlag message);
    boolean sendCurrentCaptureColorTeam(AdditionalDevice.CurrentCaptureColorTeam message);
    boolean sendCaptureRateInPercent(AdditionalDevice.CaptureRateInPercent message);
    boolean sendTimeHoldByTeam(AdditionalDevice.TimeHoldByTeam message);
    boolean sendRemainTimeToWin(AdditionalDevice.RemainTimeToWin message);
    boolean sendCurrentHealth(AdditionalDevice.CurrentHealth message);
    boolean sendSettingsCtfMode(AdditionalDevice.SettingsCTFMode message);
    boolean sendGenerateFlag(AdditionalDevice.GenerateFlag message);
    boolean sendFlagStat(AdditionalDevice.FlagStat message);
    boolean sendSettingsBombMode(AdditionalDevice.SettingsBombMode message);
    boolean sendLowLevelDeviceConfig(ForpostServer.LowLevelDeviceConfig message);
    boolean sendCustomTestMode(Tagger.CustomTestMode message);
    boolean sendBobmProSettings(BombPro.bobmProSettings message);
    boolean sendBobmProBreakActions();
    boolean sendBombPlayersTable(BombPro.bombPlayersTable message);
    boolean sendFsInfo();
    boolean sendFormatFs();
    boolean sendLsDir(Filesystem.LsDir message);
    boolean sendFileInfo(Filesystem.FileInfo message);
    boolean sendDelFile(Filesystem.DelFile message);
    boolean sendReadFile(Filesystem.ReadFile message);
    boolean sendWriteFile(Filesystem.WriteFile message);
    boolean sendCalcMd5(Filesystem.CalcMD5 message);
    boolean sendEspConectionState(Esp.ESPConectionState message);
    boolean sendEspConnectToTcpReply(Esp.ESPConnectToTCPReply message);
    boolean sendEspTcpConfirmation(Esp.ESPTcpConfirmation message);
    boolean sendEspServerDiscovered(Esp.ESPServerDiscovered message);
    boolean sendEspRssiForNetworkName(Esp.ESPRssiForNetworkName message);
    boolean sendEspWifiAccessPoint(Esp.ESPWifiAccessPoint message);
    boolean sendEspKillWifiAccessPointReply(Esp.ESPKillWifiAccessPointReply message);
    boolean sendReboot();
    boolean sendVersionRequest();
    boolean sendFirmwareTask(Firmware.FirmwareTask message);
    boolean sendBeginUpdateResources();
    boolean sendFinishUpdateResources();
    boolean sendGetStack();
    boolean sendGetBuffersState();
    boolean sendSomeData(RuntimeDbg.SomeData message);
    boolean sendRuntimeError(RuntimeDbg.RuntimeError message);
    boolean sendRuntimeGetErrors();
    boolean sendRuntimeClearErrorMessages();
    boolean sendEspReboot();
    boolean sendEspVersionRequest();
    boolean sendEspFirmwareTask(EspSrv.ESP_FirmwareTask message);
    boolean sendEspSomeData(EspSrv.ESP_SomeData message);
    boolean sendEspRuntimeError(EspSrv.ESP_RuntimeError message);
    boolean sendEspBeginUpdateResources();
    boolean sendEspFinishUpdateResources();
    boolean sendHelloFromMaster(VestRs485.HelloFromMaster message);
    boolean sendSettingsVest(VestRs485.SettingsVest message);
    boolean sendSetStateIndication(VestRs485.SetStateIndication message);
    boolean sendSetEventIndication(VestRs485.SetEventIndication message);
    boolean sendSendIr(VestRs485.SendIr message);
    boolean sendVibro(VestRs485.Vibro message);
    boolean sendPlaySoundToSlave(VestRs485.PlaySoundToSlave message);
    boolean sendSystemCommand(VestRs485.SystemCommand message);
    boolean sendGetStatePowerButtonOnSlave();
    boolean sendSetLanguageOnSlave(VestRs485.SetLanguageOnSlave message);
    boolean sendServerConnectionStatus(VestRs485.ServerConnectionStatus message);
    boolean sendPowerOnCommand();
    boolean sendPowerOffCommand();
    void disconnect();
    Object getAttachment();
    ProtoServer.Connection getServerConnection();
    void setAttachment(Object attachment);
    int getConnectionId();
  }

  // Listener interfaces for incoming messages

  public interface OnHelloFromDevListener {
    void onHelloFromDevReceived(Connection connection, ForpostServer.HelloFromDev message);
  }

  public interface OnStatFromKitListener {
    void onStatFromKitReceived(Connection connection, Tagger.StatFromKit message);
  }

  public interface OnSettingsArena25Listener {
    void onSettingsArena25Received(Connection connection, Tagger.SettingsArena2_5 message);
  }

  public interface OnSetFlagStateListener {
    void onSetFlagStateReceived(Connection connection, Tagger.SetFlagState message);
  }

  public interface OnChangeIdListener {
    void onChangeIdReceived(Connection connection, ForpostServer.ChangeId message);
  }

  public interface OnStatByIdListener {
    void onStatByIdReceived(Connection connection, ForpostServer.StatById message);
  }

  public interface OnPingListener {
    void onPingReceived(Connection connection);
  }

  public interface OnSoundsInfoResponceListener {
    void onSoundsInfoResponceReceived(Connection connection, ForpostServer.SoundsInfoResponce message);
  }

  public interface OnAdditionalFunctionalityListener {
    void onAdditionalFunctionalityReceived(Connection connection, Tagger.AdditionalFunctionality message);
  }

  public interface OnPresetSettingsListener {
    void onPresetSettingsReceived(Connection connection, Tagger.PresetSettings message);
  }

  public interface OnWeaponSettingsListener {
    void onWeaponSettingsReceived(Connection connection, Tagger.WeaponSettings message);
  }

  public interface OnPlayersTableTimeStampListener {
    void onPlayersTableTimeStampReceived(Connection connection, Tagger.PlayersTableTimeStamp message);
  }

  public interface OnPlayersTableListener {
    void onPlayersTableReceived(Connection connection, Tagger.PlayersTable message);
  }

  public interface OnSuperModeSettingsListener {
    void onSuperModeSettingsReceived(Connection connection, Tagger.SuperModeSettings message);
  }

  public interface OnStatusSuperModeListener {
    void onStatusSuperModeReceived(Connection connection, Tagger.StatusSuperMode message);
  }

  public interface OnMiTagStatusListener {
    void onMiTagStatusReceived(Connection connection, Tagger.MiTagStatus message);
  }

  public interface OnNotAgrStatusListener {
    void onNotAgrStatusReceived(Connection connection, Tagger.NotAgrStatus message);
  }

  public interface OnResponseBatteryLevelListener {
    void onResponseBatteryLevelReceived(Connection connection, ForpostServer.ResponseBatteryLevel message);
  }

  public interface OnErrorListener {
    void onErrorReceived(Connection connection, ForpostServer.Error message);
  }

  public interface OnSetLanguageListener {
    void onSetLanguageReceived(Connection connection, ForpostServer.setLanguage message);
  }

  public interface OnSendDevTypeListener {
    void onSendDevTypeReceived(Connection connection, ForpostServer.SendDevType message);
  }

  public interface OnLowLevelDeviceConfigListener {
    void onLowLevelDeviceConfigReceived(Connection connection, ForpostServer.LowLevelDeviceConfig message);
  }

  public interface OnSlavesInfoResponceListener {
    void onSlavesInfoResponceReceived(Connection connection, ForpostServer.SlavesInfoResponce message);
  }

  public interface OnSlaveDisconnectedListener {
    void onSlaveDisconnectedReceived(Connection connection, ForpostServer.SlaveDisconnected message);
  }

  public interface OnSlaveInfoListener {
    void onSlaveInfoReceived(Connection connection, ForpostServer.SlaveInfo message);
  }

  public interface OnStressBeltSettingsListener {
    void onStressBeltSettingsReceived(Connection connection, StressBelt.StressBeltSettings message);
  }

  public interface OnStressBeltCheangeDamageModeListener {
    void onStressBeltCheangeDamageModeReceived(Connection connection, StressBelt.StressBeltCheangeDamageMode message);
  }

  public interface OnStatusSubGhzListener {
    void onStatusSubGhzReceived(Connection connection, Tagger.StatusSubGhz message);
  }

  public interface OnWinTeamColorListener {
    void onWinTeamColorReceived(Connection connection, AdditionalDevice.WinTeamColor message);
  }

  public interface OnCurrentCaptureColorTeamListener {
    void onCurrentCaptureColorTeamReceived(Connection connection, AdditionalDevice.CurrentCaptureColorTeam message);
  }

  public interface OnCaptureRateInPercentListener {
    void onCaptureRateInPercentReceived(Connection connection, AdditionalDevice.CaptureRateInPercent message);
  }

  public interface OnTimeHoldByTeamListener {
    void onTimeHoldByTeamReceived(Connection connection, AdditionalDevice.TimeHoldByTeam message);
  }

  public interface OnRemainTimeToWinListener {
    void onRemainTimeToWinReceived(Connection connection, AdditionalDevice.RemainTimeToWin message);
  }

  public interface OnCurrentHealthListener {
    void onCurrentHealthReceived(Connection connection, AdditionalDevice.CurrentHealth message);
  }

  public interface OnGameStatusDevListener {
    void onGameStatusDevReceived(Connection connection, AdditionalDevice.GameStatusDev message);
  }

  public interface OnFlagTakenListener {
    void onFlagTakenReceived(Connection connection, AdditionalDevice.FlagTaken message);
  }

  public interface OnFlagReceivedListener {
    void onFlagReceivedReceived(Connection connection, AdditionalDevice.FlagReceived message);
  }

  public interface OnFlagStatListener {
    void onFlagStatReceived(Connection connection, AdditionalDevice.FlagStat message);
  }

  public interface OnBombStatusListener {
    void onBombStatusReceived(Connection connection, AdditionalDevice.BombStatus message);
  }

  public interface OnBobmProActionsListener {
    void onBobmProActionsReceived(Connection connection, BombPro.bobmProActions message);
  }

  public interface OnBombProHasBeenExplodedListener {
    void onBombProHasBeenExplodedReceived(Connection connection, BombPro.bombProHasBeenExploded message);
  }

  public interface OnBombProHasBeenInstalledListener {
    void onBombProHasBeenInstalledReceived(Connection connection, BombPro.bombProHasBeenInstalled message);
  }

  public interface OnBombProHasBeenDeinstalledListener {
    void onBombProHasBeenDeinstalledReceived(Connection connection, BombPro.bombProHasBeenDeinstalled message);
  }

  public interface OnBombProCheatHasBeenDetectedListener {
    void onBombProCheatHasBeenDetectedReceived(Connection connection, BombPro.bombProCheatHasBeenDetected message);
  }

  public interface OnBobmProSettingsListener {
    void onBobmProSettingsReceived(Connection connection, BombPro.bobmProSettings message);
  }

  public interface OnFsInfoReplyListener {
    void onFsInfoReplyReceived(Connection connection, Filesystem.FSInfoReply message);
  }

  public interface OnFormatFsReplyListener {
    void onFormatFsReplyReceived(Connection connection, Filesystem.FormatFSReply message);
  }

  public interface OnLsDirReplyListener {
    void onLsDirReplyReceived(Connection connection, Filesystem.LsDirReply message);
  }

  public interface OnFileInfoReplyListener {
    void onFileInfoReplyReceived(Connection connection, Filesystem.FileInfoReply message);
  }

  public interface OnDelFileReplyListener {
    void onDelFileReplyReceived(Connection connection, Filesystem.DelFileReply message);
  }

  public interface OnReadFileReplyListener {
    void onReadFileReplyReceived(Connection connection, Filesystem.ReadFileReply message);
  }

  public interface OnWriteFileReplyListener {
    void onWriteFileReplyReceived(Connection connection, Filesystem.WriteFileReply message);
  }

  public interface OnCalcMd5ReplyListener {
    void onCalcMd5ReplyReceived(Connection connection, Filesystem.CalcMD5Reply message);
  }

  public interface OnEspConnectToApListener {
    void onEspConnectToApReceived(Connection connection, Esp.ESPConnectToAP message);
  }

  public interface OnEspConnectToTcpListener {
    void onEspConnectToTcpReceived(Connection connection, Esp.ESPConnectToTCP message);
  }

  public interface OnEspSendByUdpListener {
    void onEspSendByUdpReceived(Connection connection, Esp.ESPSendByUDP message);
  }

  public interface OnEspDiscoverServersListener {
    void onEspDiscoverServersReceived(Connection connection, Esp.ESPDiscoverServers message);
  }

  public interface OnEspSendLogByUdpListener {
    void onEspSendLogByUdpReceived(Connection connection, Esp.ESPSendLogByUDP message);
  }

  public interface OnEspConnectToTcpReplyListener {
    void onEspConnectToTcpReplyReceived(Connection connection, Esp.ESPConnectToTCPReply message);
  }

  public interface OnEspTcpConfirmationListener {
    void onEspTcpConfirmationReceived(Connection connection, Esp.ESPTcpConfirmation message);
  }

  public interface OnEspGetRssiByNetworkNameListener {
    void onEspGetRssiByNetworkNameReceived(Connection connection, Esp.ESPGetRssiByNetworkName message);
  }

  public interface OnEspScanWifiByChannelListener {
    void onEspScanWifiByChannelReceived(Connection connection, Esp.ESPScanWifiByChannel message);
  }

  public interface OnEspSetWifiAccessPointListener {
    void onEspSetWifiAccessPointReceived(Connection connection, Esp.ESPSetWifiAccessPoint message);
  }

  public interface OnEspKillWifiAccessPointListener {
    void onEspKillWifiAccessPointReceived(Connection connection);
  }

  public interface OnVersionReplyListener {
    void onVersionReplyReceived(Connection connection, Firmware.VersionReply message);
  }

  public interface OnUpdateResourcesReplyListener {
    void onUpdateResourcesReplyReceived(Connection connection, Firmware.UpdateResourcesReply message);
  }

  public interface OnFirmwareTaskReplyListener {
    void onFirmwareTaskReplyReceived(Connection connection, Firmware.FirmwareTaskReply message);
  }

  public interface OnStackStateListener {
    void onStackStateReceived(Connection connection, RuntimeDbg.StackState message);
  }

  public interface OnStackUsageListener {
    void onStackUsageReceived(Connection connection, RuntimeDbg.StackUsage message);
  }

  public interface OnAssertListener {
    void onAssertReceived(Connection connection, RuntimeDbg.Assert message);
  }

  public interface OnBuffersStateListener {
    void onBuffersStateReceived(Connection connection, RuntimeDbg.BuffersState message);
  }

  public interface OnSomeDataListener {
    void onSomeDataReceived(Connection connection, RuntimeDbg.SomeData message);
  }

  public interface OnRuntimeErrorListener {
    void onRuntimeErrorReceived(Connection connection, RuntimeDbg.RuntimeError message);
  }

  public interface OnRuntimeSystemSnapshotListener {
    void onRuntimeSystemSnapshotReceived(Connection connection, RuntimeDbg.RuntimeSystemSnapshot message);
  }

  public interface OnEspWiFiRssiListener {
    void onEspWiFiRssiReceived(Connection connection, EspSrv.ESP_WiFiRSSI message);
  }

  public interface OnEspAssertListener {
    void onEspAssertReceived(Connection connection, EspSrv.ESP_Assert message);
  }

  public interface OnEspVersionReplyListener {
    void onEspVersionReplyReceived(Connection connection, EspSrv.ESP_VersionReply message);
  }

  public interface OnEspFirmwareTaskReplyListener {
    void onEspFirmwareTaskReplyReceived(Connection connection, EspSrv.ESP_FirmwareTaskReply message);
  }

  public interface OnEspUpdateResourcesReplyListener {
    void onEspUpdateResourcesReplyReceived(Connection connection, EspSrv.ESP_UpdateResourcesReply message);
  }

  public interface OnEspSomeDataListener {
    void onEspSomeDataReceived(Connection connection, EspSrv.ESP_SomeData message);
  }

  public interface OnEspRuntimeErrorListener {
    void onEspRuntimeErrorReceived(Connection connection, EspSrv.ESP_RuntimeError message);
  }

  public interface OnHelloFromSlaveListener {
    void onHelloFromSlaveReceived(Connection connection, VestRs485.HelloFromSlave message);
  }

  public interface OnReciveIrListener {
    void onReciveIrReceived(Connection connection, VestRs485.ReciveIr message);
  }

  public interface OnStateBatteryListener {
    void onStateBatteryReceived(Connection connection, VestRs485.StateBattery message);
  }

  public interface OnPowerOnCommandListener {
    void onPowerOnCommandReceived(Connection connection);
  }

  public interface OnPowerOffCommandListener {
    void onPowerOffCommandReceived(Connection connection);
  }

  public interface OnStatePowerButtonListener {
    void onStatePowerButtonReceived(Connection connection, VestRs485.StatePowerButton message);
  }

  public interface OnStateCapacitiveSensorListener {
    void onStateCapacitiveSensorReceived(Connection connection, VestRs485.StateCapacitiveSensor message);
  }

  public interface OnDeviceErrorInformationListener {
    void onDeviceErrorInformationReceived(Connection connection, VestRs485.DeviceErrorInformation message);
  }

  public interface OnConnectedListener {
    void onConnected(Connection connection);
  }

  public interface OnDisconnectedListener {
    void onDisconnected(Connection connection);
  }


  private volatile OnHelloFromDevListener onHelloFromDevListener = null;
  private volatile OnStatFromKitListener onStatFromKitListener = null;
  private volatile OnSettingsArena25Listener onSettingsArena25Listener = null;
  private volatile OnSetFlagStateListener onSetFlagStateListener = null;
  private volatile OnChangeIdListener onChangeIdListener = null;
  private volatile OnStatByIdListener onStatByIdListener = null;
  private volatile OnPingListener onPingListener = null;
  private volatile OnSoundsInfoResponceListener onSoundsInfoResponceListener = null;
  private volatile OnAdditionalFunctionalityListener onAdditionalFunctionalityListener = null;
  private volatile OnPresetSettingsListener onPresetSettingsListener = null;
  private volatile OnWeaponSettingsListener onWeaponSettingsListener = null;
  private volatile OnPlayersTableTimeStampListener onPlayersTableTimeStampListener = null;
  private volatile OnPlayersTableListener onPlayersTableListener = null;
  private volatile OnSuperModeSettingsListener onSuperModeSettingsListener = null;
  private volatile OnStatusSuperModeListener onStatusSuperModeListener = null;
  private volatile OnMiTagStatusListener onMiTagStatusListener = null;
  private volatile OnNotAgrStatusListener onNotAgrStatusListener = null;
  private volatile OnResponseBatteryLevelListener onResponseBatteryLevelListener = null;
  private volatile OnErrorListener onErrorListener = null;
  private volatile OnSetLanguageListener onSetLanguageListener = null;
  private volatile OnSendDevTypeListener onSendDevTypeListener = null;
  private volatile OnLowLevelDeviceConfigListener onLowLevelDeviceConfigListener = null;
  private volatile OnSlavesInfoResponceListener onSlavesInfoResponceListener = null;
  private volatile OnSlaveDisconnectedListener onSlaveDisconnectedListener = null;
  private volatile OnSlaveInfoListener onSlaveInfoListener = null;
  private volatile OnStressBeltSettingsListener onStressBeltSettingsListener = null;
  private volatile OnStressBeltCheangeDamageModeListener onStressBeltCheangeDamageModeListener = null;
  private volatile OnStatusSubGhzListener onStatusSubGhzListener = null;
  private volatile OnWinTeamColorListener onWinTeamColorListener = null;
  private volatile OnCurrentCaptureColorTeamListener onCurrentCaptureColorTeamListener = null;
  private volatile OnCaptureRateInPercentListener onCaptureRateInPercentListener = null;
  private volatile OnTimeHoldByTeamListener onTimeHoldByTeamListener = null;
  private volatile OnRemainTimeToWinListener onRemainTimeToWinListener = null;
  private volatile OnCurrentHealthListener onCurrentHealthListener = null;
  private volatile OnGameStatusDevListener onGameStatusDevListener = null;
  private volatile OnFlagTakenListener onFlagTakenListener = null;
  private volatile OnFlagReceivedListener onFlagReceivedListener = null;
  private volatile OnFlagStatListener onFlagStatListener = null;
  private volatile OnBombStatusListener onBombStatusListener = null;
  private volatile OnBobmProActionsListener onBobmProActionsListener = null;
  private volatile OnBombProHasBeenExplodedListener onBombProHasBeenExplodedListener = null;
  private volatile OnBombProHasBeenInstalledListener onBombProHasBeenInstalledListener = null;
  private volatile OnBombProHasBeenDeinstalledListener onBombProHasBeenDeinstalledListener = null;
  private volatile OnBombProCheatHasBeenDetectedListener onBombProCheatHasBeenDetectedListener = null;
  private volatile OnBobmProSettingsListener onBobmProSettingsListener = null;
  private volatile OnFsInfoReplyListener onFsInfoReplyListener = null;
  private volatile OnFormatFsReplyListener onFormatFsReplyListener = null;
  private volatile OnLsDirReplyListener onLsDirReplyListener = null;
  private volatile OnFileInfoReplyListener onFileInfoReplyListener = null;
  private volatile OnDelFileReplyListener onDelFileReplyListener = null;
  private volatile OnReadFileReplyListener onReadFileReplyListener = null;
  private volatile OnWriteFileReplyListener onWriteFileReplyListener = null;
  private volatile OnCalcMd5ReplyListener onCalcMd5ReplyListener = null;
  private volatile OnEspConnectToApListener onEspConnectToApListener = null;
  private volatile OnEspConnectToTcpListener onEspConnectToTcpListener = null;
  private volatile OnEspSendByUdpListener onEspSendByUdpListener = null;
  private volatile OnEspDiscoverServersListener onEspDiscoverServersListener = null;
  private volatile OnEspSendLogByUdpListener onEspSendLogByUdpListener = null;
  private volatile OnEspConnectToTcpReplyListener onEspConnectToTcpReplyListener = null;
  private volatile OnEspTcpConfirmationListener onEspTcpConfirmationListener = null;
  private volatile OnEspGetRssiByNetworkNameListener onEspGetRssiByNetworkNameListener = null;
  private volatile OnEspScanWifiByChannelListener onEspScanWifiByChannelListener = null;
  private volatile OnEspSetWifiAccessPointListener onEspSetWifiAccessPointListener = null;
  private volatile OnEspKillWifiAccessPointListener onEspKillWifiAccessPointListener = null;
  private volatile OnVersionReplyListener onVersionReplyListener = null;
  private volatile OnUpdateResourcesReplyListener onUpdateResourcesReplyListener = null;
  private volatile OnFirmwareTaskReplyListener onFirmwareTaskReplyListener = null;
  private volatile OnStackStateListener onStackStateListener = null;
  private volatile OnStackUsageListener onStackUsageListener = null;
  private volatile OnAssertListener onAssertListener = null;
  private volatile OnBuffersStateListener onBuffersStateListener = null;
  private volatile OnSomeDataListener onSomeDataListener = null;
  private volatile OnRuntimeErrorListener onRuntimeErrorListener = null;
  private volatile OnRuntimeSystemSnapshotListener onRuntimeSystemSnapshotListener = null;
  private volatile OnEspWiFiRssiListener onEspWiFiRssiListener = null;
  private volatile OnEspAssertListener onEspAssertListener = null;
  private volatile OnEspVersionReplyListener onEspVersionReplyListener = null;
  private volatile OnEspFirmwareTaskReplyListener onEspFirmwareTaskReplyListener = null;
  private volatile OnEspUpdateResourcesReplyListener onEspUpdateResourcesReplyListener = null;
  private volatile OnEspSomeDataListener onEspSomeDataListener = null;
  private volatile OnEspRuntimeErrorListener onEspRuntimeErrorListener = null;
  private volatile OnHelloFromSlaveListener onHelloFromSlaveListener = null;
  private volatile OnReciveIrListener onReciveIrListener = null;
  private volatile OnStateBatteryListener onStateBatteryListener = null;
  private volatile OnPowerOnCommandListener onPowerOnCommandListener = null;
  private volatile OnPowerOffCommandListener onPowerOffCommandListener = null;
  private volatile OnStatePowerButtonListener onStatePowerButtonListener = null;
  private volatile OnStateCapacitiveSensorListener onStateCapacitiveSensorListener = null;
  private volatile OnDeviceErrorInformationListener onDeviceErrorInformationListener = null;
  private volatile OnConnectedListener onConnectedListener = null;
  private volatile OnDisconnectedListener onDisconnectedListener = null;

  private void notifyHelloFromDevReceived(ProtoServer.Connection connection, ForpostServer.HelloFromDev message) {
    OnHelloFromDevListener localCopy = onHelloFromDevListener;
    if (localCopy != null)
      localCopy.onHelloFromDevReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatFromKitReceived(ProtoServer.Connection connection, Tagger.StatFromKit message) {
    OnStatFromKitListener localCopy = onStatFromKitListener;
    if (localCopy != null)
      localCopy.onStatFromKitReceived((Connection)connection.getApi(), message);
  }

  private void notifySettingsArena25Received(ProtoServer.Connection connection, Tagger.SettingsArena2_5 message) {
    OnSettingsArena25Listener localCopy = onSettingsArena25Listener;
    if (localCopy != null)
      localCopy.onSettingsArena25Received((Connection)connection.getApi(), message);
  }

  private void notifySetFlagStateReceived(ProtoServer.Connection connection, Tagger.SetFlagState message) {
    OnSetFlagStateListener localCopy = onSetFlagStateListener;
    if (localCopy != null)
      localCopy.onSetFlagStateReceived((Connection)connection.getApi(), message);
  }

  private void notifyChangeIdReceived(ProtoServer.Connection connection, ForpostServer.ChangeId message) {
    OnChangeIdListener localCopy = onChangeIdListener;
    if (localCopy != null)
      localCopy.onChangeIdReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatByIdReceived(ProtoServer.Connection connection, ForpostServer.StatById message) {
    OnStatByIdListener localCopy = onStatByIdListener;
    if (localCopy != null)
      localCopy.onStatByIdReceived((Connection)connection.getApi(), message);
  }

  private void notifyPingReceived(ProtoServer.Connection connection) {
    OnPingListener localCopy = onPingListener;
    if (localCopy != null)
      localCopy.onPingReceived((Connection)connection.getApi());
  }

  private void notifySoundsInfoResponceReceived(ProtoServer.Connection connection, ForpostServer.SoundsInfoResponce message) {
    OnSoundsInfoResponceListener localCopy = onSoundsInfoResponceListener;
    if (localCopy != null)
      localCopy.onSoundsInfoResponceReceived((Connection)connection.getApi(), message);
  }

  private void notifyAdditionalFunctionalityReceived(ProtoServer.Connection connection, Tagger.AdditionalFunctionality message) {
    OnAdditionalFunctionalityListener localCopy = onAdditionalFunctionalityListener;
    if (localCopy != null)
      localCopy.onAdditionalFunctionalityReceived((Connection)connection.getApi(), message);
  }

  private void notifyPresetSettingsReceived(ProtoServer.Connection connection, Tagger.PresetSettings message) {
    OnPresetSettingsListener localCopy = onPresetSettingsListener;
    if (localCopy != null)
      localCopy.onPresetSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyWeaponSettingsReceived(ProtoServer.Connection connection, Tagger.WeaponSettings message) {
    OnWeaponSettingsListener localCopy = onWeaponSettingsListener;
    if (localCopy != null)
      localCopy.onWeaponSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyPlayersTableTimeStampReceived(ProtoServer.Connection connection, Tagger.PlayersTableTimeStamp message) {
    OnPlayersTableTimeStampListener localCopy = onPlayersTableTimeStampListener;
    if (localCopy != null)
      localCopy.onPlayersTableTimeStampReceived((Connection)connection.getApi(), message);
  }

  private void notifyPlayersTableReceived(ProtoServer.Connection connection, Tagger.PlayersTable message) {
    OnPlayersTableListener localCopy = onPlayersTableListener;
    if (localCopy != null)
      localCopy.onPlayersTableReceived((Connection)connection.getApi(), message);
  }

  private void notifySuperModeSettingsReceived(ProtoServer.Connection connection, Tagger.SuperModeSettings message) {
    OnSuperModeSettingsListener localCopy = onSuperModeSettingsListener;
    if (localCopy != null)
      localCopy.onSuperModeSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatusSuperModeReceived(ProtoServer.Connection connection, Tagger.StatusSuperMode message) {
    OnStatusSuperModeListener localCopy = onStatusSuperModeListener;
    if (localCopy != null)
      localCopy.onStatusSuperModeReceived((Connection)connection.getApi(), message);
  }

  private void notifyMiTagStatusReceived(ProtoServer.Connection connection, Tagger.MiTagStatus message) {
    OnMiTagStatusListener localCopy = onMiTagStatusListener;
    if (localCopy != null)
      localCopy.onMiTagStatusReceived((Connection)connection.getApi(), message);
  }

  private void notifyNotAgrStatusReceived(ProtoServer.Connection connection, Tagger.NotAgrStatus message) {
    OnNotAgrStatusListener localCopy = onNotAgrStatusListener;
    if (localCopy != null)
      localCopy.onNotAgrStatusReceived((Connection)connection.getApi(), message);
  }

  private void notifyResponseBatteryLevelReceived(ProtoServer.Connection connection, ForpostServer.ResponseBatteryLevel message) {
    OnResponseBatteryLevelListener localCopy = onResponseBatteryLevelListener;
    if (localCopy != null)
      localCopy.onResponseBatteryLevelReceived((Connection)connection.getApi(), message);
  }

  private void notifyErrorReceived(ProtoServer.Connection connection, ForpostServer.Error message) {
    OnErrorListener localCopy = onErrorListener;
    if (localCopy != null)
      localCopy.onErrorReceived((Connection)connection.getApi(), message);
  }

  private void notifySetLanguageReceived(ProtoServer.Connection connection, ForpostServer.setLanguage message) {
    OnSetLanguageListener localCopy = onSetLanguageListener;
    if (localCopy != null)
      localCopy.onSetLanguageReceived((Connection)connection.getApi(), message);
  }

  private void notifySendDevTypeReceived(ProtoServer.Connection connection, ForpostServer.SendDevType message) {
    OnSendDevTypeListener localCopy = onSendDevTypeListener;
    if (localCopy != null)
      localCopy.onSendDevTypeReceived((Connection)connection.getApi(), message);
  }

  private void notifyLowLevelDeviceConfigReceived(ProtoServer.Connection connection, ForpostServer.LowLevelDeviceConfig message) {
    OnLowLevelDeviceConfigListener localCopy = onLowLevelDeviceConfigListener;
    if (localCopy != null)
      localCopy.onLowLevelDeviceConfigReceived((Connection)connection.getApi(), message);
  }

  private void notifySlavesInfoResponceReceived(ProtoServer.Connection connection, ForpostServer.SlavesInfoResponce message) {
    OnSlavesInfoResponceListener localCopy = onSlavesInfoResponceListener;
    if (localCopy != null)
      localCopy.onSlavesInfoResponceReceived((Connection)connection.getApi(), message);
  }

  private void notifySlaveDisconnectedReceived(ProtoServer.Connection connection, ForpostServer.SlaveDisconnected message) {
    OnSlaveDisconnectedListener localCopy = onSlaveDisconnectedListener;
    if (localCopy != null)
      localCopy.onSlaveDisconnectedReceived((Connection)connection.getApi(), message);
  }

  private void notifySlaveInfoReceived(ProtoServer.Connection connection, ForpostServer.SlaveInfo message) {
    OnSlaveInfoListener localCopy = onSlaveInfoListener;
    if (localCopy != null)
      localCopy.onSlaveInfoReceived((Connection)connection.getApi(), message);
  }

  private void notifyStressBeltSettingsReceived(ProtoServer.Connection connection, StressBelt.StressBeltSettings message) {
    OnStressBeltSettingsListener localCopy = onStressBeltSettingsListener;
    if (localCopy != null)
      localCopy.onStressBeltSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyStressBeltCheangeDamageModeReceived(ProtoServer.Connection connection, StressBelt.StressBeltCheangeDamageMode message) {
    OnStressBeltCheangeDamageModeListener localCopy = onStressBeltCheangeDamageModeListener;
    if (localCopy != null)
      localCopy.onStressBeltCheangeDamageModeReceived((Connection)connection.getApi(), message);
  }

  private void notifyStatusSubGhzReceived(ProtoServer.Connection connection, Tagger.StatusSubGhz message) {
    OnStatusSubGhzListener localCopy = onStatusSubGhzListener;
    if (localCopy != null)
      localCopy.onStatusSubGhzReceived((Connection)connection.getApi(), message);
  }

  private void notifyWinTeamColorReceived(ProtoServer.Connection connection, AdditionalDevice.WinTeamColor message) {
    OnWinTeamColorListener localCopy = onWinTeamColorListener;
    if (localCopy != null)
      localCopy.onWinTeamColorReceived((Connection)connection.getApi(), message);
  }

  private void notifyCurrentCaptureColorTeamReceived(ProtoServer.Connection connection, AdditionalDevice.CurrentCaptureColorTeam message) {
    OnCurrentCaptureColorTeamListener localCopy = onCurrentCaptureColorTeamListener;
    if (localCopy != null)
      localCopy.onCurrentCaptureColorTeamReceived((Connection)connection.getApi(), message);
  }

  private void notifyCaptureRateInPercentReceived(ProtoServer.Connection connection, AdditionalDevice.CaptureRateInPercent message) {
    OnCaptureRateInPercentListener localCopy = onCaptureRateInPercentListener;
    if (localCopy != null)
      localCopy.onCaptureRateInPercentReceived((Connection)connection.getApi(), message);
  }

  private void notifyTimeHoldByTeamReceived(ProtoServer.Connection connection, AdditionalDevice.TimeHoldByTeam message) {
    OnTimeHoldByTeamListener localCopy = onTimeHoldByTeamListener;
    if (localCopy != null)
      localCopy.onTimeHoldByTeamReceived((Connection)connection.getApi(), message);
  }

  private void notifyRemainTimeToWinReceived(ProtoServer.Connection connection, AdditionalDevice.RemainTimeToWin message) {
    OnRemainTimeToWinListener localCopy = onRemainTimeToWinListener;
    if (localCopy != null)
      localCopy.onRemainTimeToWinReceived((Connection)connection.getApi(), message);
  }

  private void notifyCurrentHealthReceived(ProtoServer.Connection connection, AdditionalDevice.CurrentHealth message) {
    OnCurrentHealthListener localCopy = onCurrentHealthListener;
    if (localCopy != null)
      localCopy.onCurrentHealthReceived((Connection)connection.getApi(), message);
  }

  private void notifyGameStatusDevReceived(ProtoServer.Connection connection, AdditionalDevice.GameStatusDev message) {
    OnGameStatusDevListener localCopy = onGameStatusDevListener;
    if (localCopy != null)
      localCopy.onGameStatusDevReceived((Connection)connection.getApi(), message);
  }

  private void notifyFlagTakenReceived(ProtoServer.Connection connection, AdditionalDevice.FlagTaken message) {
    OnFlagTakenListener localCopy = onFlagTakenListener;
    if (localCopy != null)
      localCopy.onFlagTakenReceived((Connection)connection.getApi(), message);
  }

  private void notifyFlagReceivedReceived(ProtoServer.Connection connection, AdditionalDevice.FlagReceived message) {
    OnFlagReceivedListener localCopy = onFlagReceivedListener;
    if (localCopy != null)
      localCopy.onFlagReceivedReceived((Connection)connection.getApi(), message);
  }

  private void notifyFlagStatReceived(ProtoServer.Connection connection, AdditionalDevice.FlagStat message) {
    OnFlagStatListener localCopy = onFlagStatListener;
    if (localCopy != null)
      localCopy.onFlagStatReceived((Connection)connection.getApi(), message);
  }

  private void notifyBombStatusReceived(ProtoServer.Connection connection, AdditionalDevice.BombStatus message) {
    OnBombStatusListener localCopy = onBombStatusListener;
    if (localCopy != null)
      localCopy.onBombStatusReceived((Connection)connection.getApi(), message);
  }

  private void notifyBobmProActionsReceived(ProtoServer.Connection connection, BombPro.bobmProActions message) {
    OnBobmProActionsListener localCopy = onBobmProActionsListener;
    if (localCopy != null)
      localCopy.onBobmProActionsReceived((Connection)connection.getApi(), message);
  }

  private void notifyBombProHasBeenExplodedReceived(ProtoServer.Connection connection, BombPro.bombProHasBeenExploded message) {
    OnBombProHasBeenExplodedListener localCopy = onBombProHasBeenExplodedListener;
    if (localCopy != null)
      localCopy.onBombProHasBeenExplodedReceived((Connection)connection.getApi(), message);
  }

  private void notifyBombProHasBeenInstalledReceived(ProtoServer.Connection connection, BombPro.bombProHasBeenInstalled message) {
    OnBombProHasBeenInstalledListener localCopy = onBombProHasBeenInstalledListener;
    if (localCopy != null)
      localCopy.onBombProHasBeenInstalledReceived((Connection)connection.getApi(), message);
  }

  private void notifyBombProHasBeenDeinstalledReceived(ProtoServer.Connection connection, BombPro.bombProHasBeenDeinstalled message) {
    OnBombProHasBeenDeinstalledListener localCopy = onBombProHasBeenDeinstalledListener;
    if (localCopy != null)
      localCopy.onBombProHasBeenDeinstalledReceived((Connection)connection.getApi(), message);
  }

  private void notifyBombProCheatHasBeenDetectedReceived(ProtoServer.Connection connection, BombPro.bombProCheatHasBeenDetected message) {
    OnBombProCheatHasBeenDetectedListener localCopy = onBombProCheatHasBeenDetectedListener;
    if (localCopy != null)
      localCopy.onBombProCheatHasBeenDetectedReceived((Connection)connection.getApi(), message);
  }

  private void notifyBobmProSettingsReceived(ProtoServer.Connection connection, BombPro.bobmProSettings message) {
    OnBobmProSettingsListener localCopy = onBobmProSettingsListener;
    if (localCopy != null)
      localCopy.onBobmProSettingsReceived((Connection)connection.getApi(), message);
  }

  private void notifyFsInfoReplyReceived(ProtoServer.Connection connection, Filesystem.FSInfoReply message) {
    OnFsInfoReplyListener localCopy = onFsInfoReplyListener;
    if (localCopy != null)
      localCopy.onFsInfoReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyFormatFsReplyReceived(ProtoServer.Connection connection, Filesystem.FormatFSReply message) {
    OnFormatFsReplyListener localCopy = onFormatFsReplyListener;
    if (localCopy != null)
      localCopy.onFormatFsReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyLsDirReplyReceived(ProtoServer.Connection connection, Filesystem.LsDirReply message) {
    OnLsDirReplyListener localCopy = onLsDirReplyListener;
    if (localCopy != null)
      localCopy.onLsDirReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyFileInfoReplyReceived(ProtoServer.Connection connection, Filesystem.FileInfoReply message) {
    OnFileInfoReplyListener localCopy = onFileInfoReplyListener;
    if (localCopy != null)
      localCopy.onFileInfoReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyDelFileReplyReceived(ProtoServer.Connection connection, Filesystem.DelFileReply message) {
    OnDelFileReplyListener localCopy = onDelFileReplyListener;
    if (localCopy != null)
      localCopy.onDelFileReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyReadFileReplyReceived(ProtoServer.Connection connection, Filesystem.ReadFileReply message) {
    OnReadFileReplyListener localCopy = onReadFileReplyListener;
    if (localCopy != null)
      localCopy.onReadFileReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyWriteFileReplyReceived(ProtoServer.Connection connection, Filesystem.WriteFileReply message) {
    OnWriteFileReplyListener localCopy = onWriteFileReplyListener;
    if (localCopy != null)
      localCopy.onWriteFileReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyCalcMd5ReplyReceived(ProtoServer.Connection connection, Filesystem.CalcMD5Reply message) {
    OnCalcMd5ReplyListener localCopy = onCalcMd5ReplyListener;
    if (localCopy != null)
      localCopy.onCalcMd5ReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspConnectToApReceived(ProtoServer.Connection connection, Esp.ESPConnectToAP message) {
    OnEspConnectToApListener localCopy = onEspConnectToApListener;
    if (localCopy != null)
      localCopy.onEspConnectToApReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspConnectToTcpReceived(ProtoServer.Connection connection, Esp.ESPConnectToTCP message) {
    OnEspConnectToTcpListener localCopy = onEspConnectToTcpListener;
    if (localCopy != null)
      localCopy.onEspConnectToTcpReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspSendByUdpReceived(ProtoServer.Connection connection, Esp.ESPSendByUDP message) {
    OnEspSendByUdpListener localCopy = onEspSendByUdpListener;
    if (localCopy != null)
      localCopy.onEspSendByUdpReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspDiscoverServersReceived(ProtoServer.Connection connection, Esp.ESPDiscoverServers message) {
    OnEspDiscoverServersListener localCopy = onEspDiscoverServersListener;
    if (localCopy != null)
      localCopy.onEspDiscoverServersReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspSendLogByUdpReceived(ProtoServer.Connection connection, Esp.ESPSendLogByUDP message) {
    OnEspSendLogByUdpListener localCopy = onEspSendLogByUdpListener;
    if (localCopy != null)
      localCopy.onEspSendLogByUdpReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspConnectToTcpReplyReceived(ProtoServer.Connection connection, Esp.ESPConnectToTCPReply message) {
    OnEspConnectToTcpReplyListener localCopy = onEspConnectToTcpReplyListener;
    if (localCopy != null)
      localCopy.onEspConnectToTcpReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspTcpConfirmationReceived(ProtoServer.Connection connection, Esp.ESPTcpConfirmation message) {
    OnEspTcpConfirmationListener localCopy = onEspTcpConfirmationListener;
    if (localCopy != null)
      localCopy.onEspTcpConfirmationReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspGetRssiByNetworkNameReceived(ProtoServer.Connection connection, Esp.ESPGetRssiByNetworkName message) {
    OnEspGetRssiByNetworkNameListener localCopy = onEspGetRssiByNetworkNameListener;
    if (localCopy != null)
      localCopy.onEspGetRssiByNetworkNameReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspScanWifiByChannelReceived(ProtoServer.Connection connection, Esp.ESPScanWifiByChannel message) {
    OnEspScanWifiByChannelListener localCopy = onEspScanWifiByChannelListener;
    if (localCopy != null)
      localCopy.onEspScanWifiByChannelReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspSetWifiAccessPointReceived(ProtoServer.Connection connection, Esp.ESPSetWifiAccessPoint message) {
    OnEspSetWifiAccessPointListener localCopy = onEspSetWifiAccessPointListener;
    if (localCopy != null)
      localCopy.onEspSetWifiAccessPointReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspKillWifiAccessPointReceived(ProtoServer.Connection connection) {
    OnEspKillWifiAccessPointListener localCopy = onEspKillWifiAccessPointListener;
    if (localCopy != null)
      localCopy.onEspKillWifiAccessPointReceived((Connection)connection.getApi());
  }

  private void notifyVersionReplyReceived(ProtoServer.Connection connection, Firmware.VersionReply message) {
    OnVersionReplyListener localCopy = onVersionReplyListener;
    if (localCopy != null)
      localCopy.onVersionReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyUpdateResourcesReplyReceived(ProtoServer.Connection connection, Firmware.UpdateResourcesReply message) {
    OnUpdateResourcesReplyListener localCopy = onUpdateResourcesReplyListener;
    if (localCopy != null)
      localCopy.onUpdateResourcesReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyFirmwareTaskReplyReceived(ProtoServer.Connection connection, Firmware.FirmwareTaskReply message) {
    OnFirmwareTaskReplyListener localCopy = onFirmwareTaskReplyListener;
    if (localCopy != null)
      localCopy.onFirmwareTaskReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyStackStateReceived(ProtoServer.Connection connection, RuntimeDbg.StackState message) {
    OnStackStateListener localCopy = onStackStateListener;
    if (localCopy != null)
      localCopy.onStackStateReceived((Connection)connection.getApi(), message);
  }

  private void notifyStackUsageReceived(ProtoServer.Connection connection, RuntimeDbg.StackUsage message) {
    OnStackUsageListener localCopy = onStackUsageListener;
    if (localCopy != null)
      localCopy.onStackUsageReceived((Connection)connection.getApi(), message);
  }

  private void notifyAssertReceived(ProtoServer.Connection connection, RuntimeDbg.Assert message) {
    OnAssertListener localCopy = onAssertListener;
    if (localCopy != null)
      localCopy.onAssertReceived((Connection)connection.getApi(), message);
  }

  private void notifyBuffersStateReceived(ProtoServer.Connection connection, RuntimeDbg.BuffersState message) {
    OnBuffersStateListener localCopy = onBuffersStateListener;
    if (localCopy != null)
      localCopy.onBuffersStateReceived((Connection)connection.getApi(), message);
  }

  private void notifySomeDataReceived(ProtoServer.Connection connection, RuntimeDbg.SomeData message) {
    OnSomeDataListener localCopy = onSomeDataListener;
    if (localCopy != null)
      localCopy.onSomeDataReceived((Connection)connection.getApi(), message);
  }

  private void notifyRuntimeErrorReceived(ProtoServer.Connection connection, RuntimeDbg.RuntimeError message) {
    OnRuntimeErrorListener localCopy = onRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onRuntimeErrorReceived((Connection)connection.getApi(), message);
  }

  private void notifyRuntimeSystemSnapshotReceived(ProtoServer.Connection connection, RuntimeDbg.RuntimeSystemSnapshot message) {
    OnRuntimeSystemSnapshotListener localCopy = onRuntimeSystemSnapshotListener;
    if (localCopy != null)
      localCopy.onRuntimeSystemSnapshotReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspWiFiRssiReceived(ProtoServer.Connection connection, EspSrv.ESP_WiFiRSSI message) {
    OnEspWiFiRssiListener localCopy = onEspWiFiRssiListener;
    if (localCopy != null)
      localCopy.onEspWiFiRssiReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspAssertReceived(ProtoServer.Connection connection, EspSrv.ESP_Assert message) {
    OnEspAssertListener localCopy = onEspAssertListener;
    if (localCopy != null)
      localCopy.onEspAssertReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspVersionReplyReceived(ProtoServer.Connection connection, EspSrv.ESP_VersionReply message) {
    OnEspVersionReplyListener localCopy = onEspVersionReplyListener;
    if (localCopy != null)
      localCopy.onEspVersionReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspFirmwareTaskReplyReceived(ProtoServer.Connection connection, EspSrv.ESP_FirmwareTaskReply message) {
    OnEspFirmwareTaskReplyListener localCopy = onEspFirmwareTaskReplyListener;
    if (localCopy != null)
      localCopy.onEspFirmwareTaskReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspUpdateResourcesReplyReceived(ProtoServer.Connection connection, EspSrv.ESP_UpdateResourcesReply message) {
    OnEspUpdateResourcesReplyListener localCopy = onEspUpdateResourcesReplyListener;
    if (localCopy != null)
      localCopy.onEspUpdateResourcesReplyReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspSomeDataReceived(ProtoServer.Connection connection, EspSrv.ESP_SomeData message) {
    OnEspSomeDataListener localCopy = onEspSomeDataListener;
    if (localCopy != null)
      localCopy.onEspSomeDataReceived((Connection)connection.getApi(), message);
  }

  private void notifyEspRuntimeErrorReceived(ProtoServer.Connection connection, EspSrv.ESP_RuntimeError message) {
    OnEspRuntimeErrorListener localCopy = onEspRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onEspRuntimeErrorReceived((Connection)connection.getApi(), message);
  }

  private void notifyHelloFromSlaveReceived(ProtoServer.Connection connection, VestRs485.HelloFromSlave message) {
    OnHelloFromSlaveListener localCopy = onHelloFromSlaveListener;
    if (localCopy != null)
      localCopy.onHelloFromSlaveReceived((Connection)connection.getApi(), message);
  }

  private void notifyReciveIrReceived(ProtoServer.Connection connection, VestRs485.ReciveIr message) {
    OnReciveIrListener localCopy = onReciveIrListener;
    if (localCopy != null)
      localCopy.onReciveIrReceived((Connection)connection.getApi(), message);
  }

  private void notifyStateBatteryReceived(ProtoServer.Connection connection, VestRs485.StateBattery message) {
    OnStateBatteryListener localCopy = onStateBatteryListener;
    if (localCopy != null)
      localCopy.onStateBatteryReceived((Connection)connection.getApi(), message);
  }

  private void notifyPowerOnCommandReceived(ProtoServer.Connection connection) {
    OnPowerOnCommandListener localCopy = onPowerOnCommandListener;
    if (localCopy != null)
      localCopy.onPowerOnCommandReceived((Connection)connection.getApi());
  }

  private void notifyPowerOffCommandReceived(ProtoServer.Connection connection) {
    OnPowerOffCommandListener localCopy = onPowerOffCommandListener;
    if (localCopy != null)
      localCopy.onPowerOffCommandReceived((Connection)connection.getApi());
  }

  private void notifyStatePowerButtonReceived(ProtoServer.Connection connection, VestRs485.StatePowerButton message) {
    OnStatePowerButtonListener localCopy = onStatePowerButtonListener;
    if (localCopy != null)
      localCopy.onStatePowerButtonReceived((Connection)connection.getApi(), message);
  }

  private void notifyStateCapacitiveSensorReceived(ProtoServer.Connection connection, VestRs485.StateCapacitiveSensor message) {
    OnStateCapacitiveSensorListener localCopy = onStateCapacitiveSensorListener;
    if (localCopy != null)
      localCopy.onStateCapacitiveSensorReceived((Connection)connection.getApi(), message);
  }

  private void notifyDeviceErrorInformationReceived(ProtoServer.Connection connection, VestRs485.DeviceErrorInformation message) {
    OnDeviceErrorInformationListener localCopy = onDeviceErrorInformationListener;
    if (localCopy != null)
      localCopy.onDeviceErrorInformationReceived((Connection)connection.getApi(), message);
  }


  public void setOnHelloFromDevListener(OnHelloFromDevListener listener)
  {
    onHelloFromDevListener = listener;
  }

  public void setOnStatFromKitListener(OnStatFromKitListener listener)
  {
    onStatFromKitListener = listener;
  }

  public void setOnSettingsArena25Listener(OnSettingsArena25Listener listener)
  {
    onSettingsArena25Listener = listener;
  }

  public void setOnSetFlagStateListener(OnSetFlagStateListener listener)
  {
    onSetFlagStateListener = listener;
  }

  public void setOnChangeIdListener(OnChangeIdListener listener)
  {
    onChangeIdListener = listener;
  }

  public void setOnStatByIdListener(OnStatByIdListener listener)
  {
    onStatByIdListener = listener;
  }

  public void setOnPingListener(OnPingListener listener)
  {
    onPingListener = listener;
  }

  public void setOnSoundsInfoResponceListener(OnSoundsInfoResponceListener listener)
  {
    onSoundsInfoResponceListener = listener;
  }

  public void setOnAdditionalFunctionalityListener(OnAdditionalFunctionalityListener listener)
  {
    onAdditionalFunctionalityListener = listener;
  }

  public void setOnPresetSettingsListener(OnPresetSettingsListener listener)
  {
    onPresetSettingsListener = listener;
  }

  public void setOnWeaponSettingsListener(OnWeaponSettingsListener listener)
  {
    onWeaponSettingsListener = listener;
  }

  public void setOnPlayersTableTimeStampListener(OnPlayersTableTimeStampListener listener)
  {
    onPlayersTableTimeStampListener = listener;
  }

  public void setOnPlayersTableListener(OnPlayersTableListener listener)
  {
    onPlayersTableListener = listener;
  }

  public void setOnSuperModeSettingsListener(OnSuperModeSettingsListener listener)
  {
    onSuperModeSettingsListener = listener;
  }

  public void setOnStatusSuperModeListener(OnStatusSuperModeListener listener)
  {
    onStatusSuperModeListener = listener;
  }

  public void setOnMiTagStatusListener(OnMiTagStatusListener listener)
  {
    onMiTagStatusListener = listener;
  }

  public void setOnNotAgrStatusListener(OnNotAgrStatusListener listener)
  {
    onNotAgrStatusListener = listener;
  }

  public void setOnResponseBatteryLevelListener(OnResponseBatteryLevelListener listener)
  {
    onResponseBatteryLevelListener = listener;
  }

  public void setOnSetLanguageListener(OnSetLanguageListener listener)
  {
    onSetLanguageListener = listener;
  }

  public void setOnSendDevTypeListener(OnSendDevTypeListener listener)
  {
    onSendDevTypeListener = listener;
  }

  public void setOnLowLevelDeviceConfigListener(OnLowLevelDeviceConfigListener listener)
  {
    onLowLevelDeviceConfigListener = listener;
  }

  public void setOnSlavesInfoResponceListener(OnSlavesInfoResponceListener listener)
  {
    onSlavesInfoResponceListener = listener;
  }

  public void setOnSlaveDisconnectedListener(OnSlaveDisconnectedListener listener)
  {
    onSlaveDisconnectedListener = listener;
  }

  public void setOnSlaveInfoListener(OnSlaveInfoListener listener)
  {
    onSlaveInfoListener = listener;
  }

  public void setOnStressBeltSettingsListener(OnStressBeltSettingsListener listener)
  {
    onStressBeltSettingsListener = listener;
  }

  public void setOnStressBeltCheangeDamageModeListener(OnStressBeltCheangeDamageModeListener listener)
  {
    onStressBeltCheangeDamageModeListener = listener;
  }

  public void setOnStatusSubGhzListener(OnStatusSubGhzListener listener)
  {
    onStatusSubGhzListener = listener;
  }

  public void setOnWinTeamColorListener(OnWinTeamColorListener listener)
  {
    onWinTeamColorListener = listener;
  }

  public void setOnCurrentCaptureColorTeamListener(OnCurrentCaptureColorTeamListener listener)
  {
    onCurrentCaptureColorTeamListener = listener;
  }

  public void setOnCaptureRateInPercentListener(OnCaptureRateInPercentListener listener)
  {
    onCaptureRateInPercentListener = listener;
  }

  public void setOnTimeHoldByTeamListener(OnTimeHoldByTeamListener listener)
  {
    onTimeHoldByTeamListener = listener;
  }

  public void setOnRemainTimeToWinListener(OnRemainTimeToWinListener listener)
  {
    onRemainTimeToWinListener = listener;
  }

  public void setOnCurrentHealthListener(OnCurrentHealthListener listener)
  {
    onCurrentHealthListener = listener;
  }

  public void setOnGameStatusDevListener(OnGameStatusDevListener listener)
  {
    onGameStatusDevListener = listener;
  }

  public void setOnFlagTakenListener(OnFlagTakenListener listener)
  {
    onFlagTakenListener = listener;
  }

  public void setOnFlagReceivedListener(OnFlagReceivedListener listener)
  {
    onFlagReceivedListener = listener;
  }

  public void setOnFlagStatListener(OnFlagStatListener listener)
  {
    onFlagStatListener = listener;
  }

  public void setOnBombStatusListener(OnBombStatusListener listener)
  {
    onBombStatusListener = listener;
  }

  public void setOnBobmProActionsListener(OnBobmProActionsListener listener)
  {
    onBobmProActionsListener = listener;
  }

  public void setOnBombProHasBeenExplodedListener(OnBombProHasBeenExplodedListener listener)
  {
    onBombProHasBeenExplodedListener = listener;
  }

  public void setOnBombProHasBeenInstalledListener(OnBombProHasBeenInstalledListener listener)
  {
    onBombProHasBeenInstalledListener = listener;
  }

  public void setOnBombProHasBeenDeinstalledListener(OnBombProHasBeenDeinstalledListener listener)
  {
    onBombProHasBeenDeinstalledListener = listener;
  }

  public void setOnBombProCheatHasBeenDetectedListener(OnBombProCheatHasBeenDetectedListener listener)
  {
    onBombProCheatHasBeenDetectedListener = listener;
  }

  public void setOnBobmProSettingsListener(OnBobmProSettingsListener listener)
  {
    onBobmProSettingsListener = listener;
  }

  public void setOnFsInfoReplyListener(OnFsInfoReplyListener listener)
  {
    onFsInfoReplyListener = listener;
  }

  public void setOnFormatFsReplyListener(OnFormatFsReplyListener listener)
  {
    onFormatFsReplyListener = listener;
  }

  public void setOnLsDirReplyListener(OnLsDirReplyListener listener)
  {
    onLsDirReplyListener = listener;
  }

  public void setOnFileInfoReplyListener(OnFileInfoReplyListener listener)
  {
    onFileInfoReplyListener = listener;
  }

  public void setOnDelFileReplyListener(OnDelFileReplyListener listener)
  {
    onDelFileReplyListener = listener;
  }

  public void setOnReadFileReplyListener(OnReadFileReplyListener listener)
  {
    onReadFileReplyListener = listener;
  }

  public void setOnWriteFileReplyListener(OnWriteFileReplyListener listener)
  {
    onWriteFileReplyListener = listener;
  }

  public void setOnCalcMd5ReplyListener(OnCalcMd5ReplyListener listener)
  {
    onCalcMd5ReplyListener = listener;
  }

  public void setOnEspConnectToApListener(OnEspConnectToApListener listener)
  {
    onEspConnectToApListener = listener;
  }

  public void setOnEspConnectToTcpListener(OnEspConnectToTcpListener listener)
  {
    onEspConnectToTcpListener = listener;
  }

  public void setOnEspSendByUdpListener(OnEspSendByUdpListener listener)
  {
    onEspSendByUdpListener = listener;
  }

  public void setOnEspDiscoverServersListener(OnEspDiscoverServersListener listener)
  {
    onEspDiscoverServersListener = listener;
  }

  public void setOnEspSendLogByUdpListener(OnEspSendLogByUdpListener listener)
  {
    onEspSendLogByUdpListener = listener;
  }

  public void setOnEspConnectToTcpReplyListener(OnEspConnectToTcpReplyListener listener)
  {
    onEspConnectToTcpReplyListener = listener;
  }

  public void setOnEspTcpConfirmationListener(OnEspTcpConfirmationListener listener)
  {
    onEspTcpConfirmationListener = listener;
  }

  public void setOnEspGetRssiByNetworkNameListener(OnEspGetRssiByNetworkNameListener listener)
  {
    onEspGetRssiByNetworkNameListener = listener;
  }

  public void setOnEspScanWifiByChannelListener(OnEspScanWifiByChannelListener listener)
  {
    onEspScanWifiByChannelListener = listener;
  }

  public void setOnEspSetWifiAccessPointListener(OnEspSetWifiAccessPointListener listener)
  {
    onEspSetWifiAccessPointListener = listener;
  }

  public void setOnEspKillWifiAccessPointListener(OnEspKillWifiAccessPointListener listener)
  {
    onEspKillWifiAccessPointListener = listener;
  }

  public void setOnVersionReplyListener(OnVersionReplyListener listener)
  {
    onVersionReplyListener = listener;
  }

  public void setOnUpdateResourcesReplyListener(OnUpdateResourcesReplyListener listener)
  {
    onUpdateResourcesReplyListener = listener;
  }

  public void setOnFirmwareTaskReplyListener(OnFirmwareTaskReplyListener listener)
  {
    onFirmwareTaskReplyListener = listener;
  }

  public void setOnStackStateListener(OnStackStateListener listener)
  {
    onStackStateListener = listener;
  }

  public void setOnStackUsageListener(OnStackUsageListener listener)
  {
    onStackUsageListener = listener;
  }

  public void setOnAssertListener(OnAssertListener listener)
  {
    onAssertListener = listener;
  }

  public void setOnBuffersStateListener(OnBuffersStateListener listener)
  {
    onBuffersStateListener = listener;
  }

  public void setOnSomeDataListener(OnSomeDataListener listener)
  {
    onSomeDataListener = listener;
  }

  public void setOnRuntimeErrorListener(OnRuntimeErrorListener listener)
  {
    onRuntimeErrorListener = listener;
  }

  public void setOnRuntimeSystemSnapshotListener(OnRuntimeSystemSnapshotListener listener)
  {
    onRuntimeSystemSnapshotListener = listener;
  }

  public void setOnEspWiFiRssiListener(OnEspWiFiRssiListener listener)
  {
    onEspWiFiRssiListener = listener;
  }

  public void setOnEspAssertListener(OnEspAssertListener listener)
  {
    onEspAssertListener = listener;
  }

  public void setOnEspVersionReplyListener(OnEspVersionReplyListener listener)
  {
    onEspVersionReplyListener = listener;
  }

  public void setOnEspFirmwareTaskReplyListener(OnEspFirmwareTaskReplyListener listener)
  {
    onEspFirmwareTaskReplyListener = listener;
  }

  public void setOnEspUpdateResourcesReplyListener(OnEspUpdateResourcesReplyListener listener)
  {
    onEspUpdateResourcesReplyListener = listener;
  }

  public void setOnEspSomeDataListener(OnEspSomeDataListener listener)
  {
    onEspSomeDataListener = listener;
  }

  public void setOnEspRuntimeErrorListener(OnEspRuntimeErrorListener listener)
  {
    onEspRuntimeErrorListener = listener;
  }

  public void setOnHelloFromSlaveListener(OnHelloFromSlaveListener listener)
  {
    onHelloFromSlaveListener = listener;
  }

  public void setOnReciveIrListener(OnReciveIrListener listener)
  {
    onReciveIrListener = listener;
  }

  public void setOnStateBatteryListener(OnStateBatteryListener listener)
  {
    onStateBatteryListener = listener;
  }

  public void setOnPowerOnCommandListener(OnPowerOnCommandListener listener)
  {
    onPowerOnCommandListener = listener;
  }

  public void setOnPowerOffCommandListener(OnPowerOffCommandListener listener)
  {
    onPowerOffCommandListener = listener;
  }

  public void setOnStatePowerButtonListener(OnStatePowerButtonListener listener)
  {
    onStatePowerButtonListener = listener;
  }

  public void setOnStateCapacitiveSensorListener(OnStateCapacitiveSensorListener listener)
  {
    onStateCapacitiveSensorListener = listener;
  }

  public void setOnDeviceErrorInformationListener(OnDeviceErrorInformationListener listener)
  {
    onDeviceErrorInformationListener = listener;
  }


  public void setOnConnectedListener(OnConnectedListener listener)
  {
    onConnectedListener = listener;
  }

  public void setOnErrorListener(OnErrorListener listener)
  {
    onErrorListener = listener;
  }

  public void setOnDisconnectedListener(OnDisconnectedListener listener)
  {
    onDisconnectedListener = listener;
  }


  ProtoServer.ProtocolDispatcher mProtocolDispatcher = new ProtoServer.ProtocolDispatcher() {
    @Override
    public Message parseMessage(int commandId, CodedInputStream inputStream) throws IOException {
      switch(commandId) {
      case 1: return ForpostServer.HelloFromDev.parser().parsePartialFrom(inputStream);
      case 2: return Tagger.StatFromKit.parser().parsePartialFrom(inputStream);
      case 3: return Tagger.SettingsArena2_5.parser().parsePartialFrom(inputStream);
      case 4: return Tagger.SetFlagState.parser().parsePartialFrom(inputStream);
      case 5: return ForpostServer.ChangeId.parser().parsePartialFrom(inputStream);
      case 6: return ForpostServer.StatById.parser().parsePartialFrom(inputStream);
      case 8: return ForpostServer.SoundsInfoResponce.parser().parsePartialFrom(inputStream);
      case 12: return Tagger.AdditionalFunctionality.parser().parsePartialFrom(inputStream);
      case 13: return Tagger.PresetSettings.parser().parsePartialFrom(inputStream);
      case 14: return Tagger.WeaponSettings.parser().parsePartialFrom(inputStream);
      case 15: return Tagger.PlayersTableTimeStamp.parser().parsePartialFrom(inputStream);
      case 16: return Tagger.PlayersTable.parser().parsePartialFrom(inputStream);
      case 17: return Tagger.SuperModeSettings.parser().parsePartialFrom(inputStream);
      case 18: return Tagger.StatusSuperMode.parser().parsePartialFrom(inputStream);
      case 19: return Tagger.MiTagStatus.parser().parsePartialFrom(inputStream);
      case 20: return Tagger.NotAgrStatus.parser().parsePartialFrom(inputStream);
      case 22: return ForpostServer.ResponseBatteryLevel.parser().parsePartialFrom(inputStream);
      case 23: return ForpostServer.Error.parser().parsePartialFrom(inputStream);
      case 24: return ForpostServer.setLanguage.parser().parsePartialFrom(inputStream);
      case 25: return ForpostServer.SendDevType.parser().parsePartialFrom(inputStream);
      case 26: return ForpostServer.LowLevelDeviceConfig.parser().parsePartialFrom(inputStream);
      case 33: return ForpostServer.SlavesInfoResponce.parser().parsePartialFrom(inputStream);
      case 34: return ForpostServer.SlaveDisconnected.parser().parsePartialFrom(inputStream);
      case 35: return ForpostServer.SlaveInfo.parser().parsePartialFrom(inputStream);
      case 36: return StressBelt.StressBeltSettings.parser().parsePartialFrom(inputStream);
      case 37: return StressBelt.StressBeltCheangeDamageMode.parser().parsePartialFrom(inputStream);
      case 38: return Tagger.StatusSubGhz.parser().parsePartialFrom(inputStream);
      case 52: return AdditionalDevice.WinTeamColor.parser().parsePartialFrom(inputStream);
      case 53: return AdditionalDevice.CurrentCaptureColorTeam.parser().parsePartialFrom(inputStream);
      case 54: return AdditionalDevice.CaptureRateInPercent.parser().parsePartialFrom(inputStream);
      case 55: return AdditionalDevice.TimeHoldByTeam.parser().parsePartialFrom(inputStream);
      case 56: return AdditionalDevice.RemainTimeToWin.parser().parsePartialFrom(inputStream);
      case 57: return AdditionalDevice.CurrentHealth.parser().parsePartialFrom(inputStream);
      case 58: return AdditionalDevice.GameStatusDev.parser().parsePartialFrom(inputStream);
      case 59: return AdditionalDevice.FlagTaken.parser().parsePartialFrom(inputStream);
      case 60: return AdditionalDevice.FlagReceived.parser().parsePartialFrom(inputStream);
      case 61: return AdditionalDevice.FlagStat.parser().parsePartialFrom(inputStream);
      case 62: return AdditionalDevice.BombStatus.parser().parsePartialFrom(inputStream);
      case 151: return BombPro.bobmProActions.parser().parsePartialFrom(inputStream);
      case 152: return BombPro.bombProHasBeenExploded.parser().parsePartialFrom(inputStream);
      case 153: return BombPro.bombProHasBeenInstalled.parser().parsePartialFrom(inputStream);
      case 154: return BombPro.bombProHasBeenDeinstalled.parser().parsePartialFrom(inputStream);
      case 155: return BombPro.bombProCheatHasBeenDetected.parser().parsePartialFrom(inputStream);
      case 156: return BombPro.bobmProSettings.parser().parsePartialFrom(inputStream);
      case 301: return Filesystem.FSInfoReply.parser().parsePartialFrom(inputStream);
      case 302: return Filesystem.FormatFSReply.parser().parsePartialFrom(inputStream);
      case 303: return Filesystem.LsDirReply.parser().parsePartialFrom(inputStream);
      case 304: return Filesystem.FileInfoReply.parser().parsePartialFrom(inputStream);
      case 305: return Filesystem.DelFileReply.parser().parsePartialFrom(inputStream);
      case 306: return Filesystem.ReadFileReply.parser().parsePartialFrom(inputStream);
      case 307: return Filesystem.WriteFileReply.parser().parsePartialFrom(inputStream);
      case 308: return Filesystem.CalcMD5Reply.parser().parsePartialFrom(inputStream);
      case 1001: return Esp.ESPConnectToAP.parser().parsePartialFrom(inputStream);
      case 1002: return Esp.ESPConnectToTCP.parser().parsePartialFrom(inputStream);
      case 1003: return Esp.ESPSendByUDP.parser().parsePartialFrom(inputStream);
      case 1004: return Esp.ESPDiscoverServers.parser().parsePartialFrom(inputStream);
      case 1005: return Esp.ESPSendLogByUDP.parser().parsePartialFrom(inputStream);
      case 1006: return Esp.ESPConnectToTCPReply.parser().parsePartialFrom(inputStream);
      case 1007: return Esp.ESPTcpConfirmation.parser().parsePartialFrom(inputStream);
      case 1008: return Esp.ESPGetRssiByNetworkName.parser().parsePartialFrom(inputStream);
      case 1009: return Esp.ESPScanWifiByChannel.parser().parsePartialFrom(inputStream);
      case 1010: return Esp.ESPSetWifiAccessPoint.parser().parsePartialFrom(inputStream);
      case 1101: return Firmware.VersionReply.parser().parsePartialFrom(inputStream);
      case 1103: return Firmware.UpdateResourcesReply.parser().parsePartialFrom(inputStream);
      case 1104: return Firmware.FirmwareTaskReply.parser().parsePartialFrom(inputStream);
      case 1201: return RuntimeDbg.StackState.parser().parsePartialFrom(inputStream);
      case 1202: return RuntimeDbg.StackUsage.parser().parsePartialFrom(inputStream);
      case 1203: return RuntimeDbg.Assert.parser().parsePartialFrom(inputStream);
      case 1204: return RuntimeDbg.BuffersState.parser().parsePartialFrom(inputStream);
      case 1205: return RuntimeDbg.SomeData.parser().parsePartialFrom(inputStream);
      case 1206: return RuntimeDbg.RuntimeError.parser().parsePartialFrom(inputStream);
      case 1207: return RuntimeDbg.RuntimeSystemSnapshot.parser().parsePartialFrom(inputStream);
      case 2001: return EspSrv.ESP_WiFiRSSI.parser().parsePartialFrom(inputStream);
      case 2002: return EspSrv.ESP_Assert.parser().parsePartialFrom(inputStream);
      case 2003: return EspSrv.ESP_VersionReply.parser().parsePartialFrom(inputStream);
      case 2004: return EspSrv.ESP_FirmwareTaskReply.parser().parsePartialFrom(inputStream);
      case 2005: return EspSrv.ESP_UpdateResourcesReply.parser().parsePartialFrom(inputStream);
      case 2006: return EspSrv.ESP_SomeData.parser().parsePartialFrom(inputStream);
      case 2007: return EspSrv.ESP_RuntimeError.parser().parsePartialFrom(inputStream);
      case 3201: return VestRs485.HelloFromSlave.parser().parsePartialFrom(inputStream);
      case 3202: return VestRs485.ReciveIr.parser().parsePartialFrom(inputStream);
      case 3203: return VestRs485.StateBattery.parser().parsePartialFrom(inputStream);
      case 3206: return VestRs485.StatePowerButton.parser().parsePartialFrom(inputStream);
      case 3207: return VestRs485.StateCapacitiveSensor.parser().parsePartialFrom(inputStream);
      case 3208: return VestRs485.DeviceErrorInformation.parser().parsePartialFrom(inputStream);
      default:
         return null;
      }
    }

    @Override
    public boolean dispatchMessage(ProtoServer.Connection connection, int commandId, Message message) {
      switch(commandId) {
      case 1: notifyHelloFromDevReceived(connection, (ForpostServer.HelloFromDev)message);
        return true;
      case 2: notifyStatFromKitReceived(connection, (Tagger.StatFromKit)message);
        return true;
      case 3: notifySettingsArena25Received(connection, (Tagger.SettingsArena2_5)message);
        return true;
      case 4: notifySetFlagStateReceived(connection, (Tagger.SetFlagState)message);
        return true;
      case 5: notifyChangeIdReceived(connection, (ForpostServer.ChangeId)message);
        return true;
      case 6: notifyStatByIdReceived(connection, (ForpostServer.StatById)message);
        return true;
      case 7: notifyPingReceived(connection);
        return true;
      case 8: notifySoundsInfoResponceReceived(connection, (ForpostServer.SoundsInfoResponce)message);
        return true;
      case 12: notifyAdditionalFunctionalityReceived(connection, (Tagger.AdditionalFunctionality)message);
        return true;
      case 13: notifyPresetSettingsReceived(connection, (Tagger.PresetSettings)message);
        return true;
      case 14: notifyWeaponSettingsReceived(connection, (Tagger.WeaponSettings)message);
        return true;
      case 15: notifyPlayersTableTimeStampReceived(connection, (Tagger.PlayersTableTimeStamp)message);
        return true;
      case 16: notifyPlayersTableReceived(connection, (Tagger.PlayersTable)message);
        return true;
      case 17: notifySuperModeSettingsReceived(connection, (Tagger.SuperModeSettings)message);
        return true;
      case 18: notifyStatusSuperModeReceived(connection, (Tagger.StatusSuperMode)message);
        return true;
      case 19: notifyMiTagStatusReceived(connection, (Tagger.MiTagStatus)message);
        return true;
      case 20: notifyNotAgrStatusReceived(connection, (Tagger.NotAgrStatus)message);
        return true;
      case 22: notifyResponseBatteryLevelReceived(connection, (ForpostServer.ResponseBatteryLevel)message);
        return true;
      case 23: notifyErrorReceived(connection, (ForpostServer.Error)message);
        return true;
      case 24: notifySetLanguageReceived(connection, (ForpostServer.setLanguage)message);
        return true;
      case 25: notifySendDevTypeReceived(connection, (ForpostServer.SendDevType)message);
        return true;
      case 26: notifyLowLevelDeviceConfigReceived(connection, (ForpostServer.LowLevelDeviceConfig)message);
        return true;
      case 33: notifySlavesInfoResponceReceived(connection, (ForpostServer.SlavesInfoResponce)message);
        return true;
      case 34: notifySlaveDisconnectedReceived(connection, (ForpostServer.SlaveDisconnected)message);
        return true;
      case 35: notifySlaveInfoReceived(connection, (ForpostServer.SlaveInfo)message);
        return true;
      case 36: notifyStressBeltSettingsReceived(connection, (StressBelt.StressBeltSettings)message);
        return true;
      case 37: notifyStressBeltCheangeDamageModeReceived(connection, (StressBelt.StressBeltCheangeDamageMode)message);
        return true;
      case 38: notifyStatusSubGhzReceived(connection, (Tagger.StatusSubGhz)message);
        return true;
      case 52: notifyWinTeamColorReceived(connection, (AdditionalDevice.WinTeamColor)message);
        return true;
      case 53: notifyCurrentCaptureColorTeamReceived(connection, (AdditionalDevice.CurrentCaptureColorTeam)message);
        return true;
      case 54: notifyCaptureRateInPercentReceived(connection, (AdditionalDevice.CaptureRateInPercent)message);
        return true;
      case 55: notifyTimeHoldByTeamReceived(connection, (AdditionalDevice.TimeHoldByTeam)message);
        return true;
      case 56: notifyRemainTimeToWinReceived(connection, (AdditionalDevice.RemainTimeToWin)message);
        return true;
      case 57: notifyCurrentHealthReceived(connection, (AdditionalDevice.CurrentHealth)message);
        return true;
      case 58: notifyGameStatusDevReceived(connection, (AdditionalDevice.GameStatusDev)message);
        return true;
      case 59: notifyFlagTakenReceived(connection, (AdditionalDevice.FlagTaken)message);
        return true;
      case 60: notifyFlagReceivedReceived(connection, (AdditionalDevice.FlagReceived)message);
        return true;
      case 61: notifyFlagStatReceived(connection, (AdditionalDevice.FlagStat)message);
        return true;
      case 62: notifyBombStatusReceived(connection, (AdditionalDevice.BombStatus)message);
        return true;
      case 151: notifyBobmProActionsReceived(connection, (BombPro.bobmProActions)message);
        return true;
      case 152: notifyBombProHasBeenExplodedReceived(connection, (BombPro.bombProHasBeenExploded)message);
        return true;
      case 153: notifyBombProHasBeenInstalledReceived(connection, (BombPro.bombProHasBeenInstalled)message);
        return true;
      case 154: notifyBombProHasBeenDeinstalledReceived(connection, (BombPro.bombProHasBeenDeinstalled)message);
        return true;
      case 155: notifyBombProCheatHasBeenDetectedReceived(connection, (BombPro.bombProCheatHasBeenDetected)message);
        return true;
      case 156: notifyBobmProSettingsReceived(connection, (BombPro.bobmProSettings)message);
        return true;
      case 301: notifyFsInfoReplyReceived(connection, (Filesystem.FSInfoReply)message);
        return true;
      case 302: notifyFormatFsReplyReceived(connection, (Filesystem.FormatFSReply)message);
        return true;
      case 303: notifyLsDirReplyReceived(connection, (Filesystem.LsDirReply)message);
        return true;
      case 304: notifyFileInfoReplyReceived(connection, (Filesystem.FileInfoReply)message);
        return true;
      case 305: notifyDelFileReplyReceived(connection, (Filesystem.DelFileReply)message);
        return true;
      case 306: notifyReadFileReplyReceived(connection, (Filesystem.ReadFileReply)message);
        return true;
      case 307: notifyWriteFileReplyReceived(connection, (Filesystem.WriteFileReply)message);
        return true;
      case 308: notifyCalcMd5ReplyReceived(connection, (Filesystem.CalcMD5Reply)message);
        return true;
      case 1001: notifyEspConnectToApReceived(connection, (Esp.ESPConnectToAP)message);
        return true;
      case 1002: notifyEspConnectToTcpReceived(connection, (Esp.ESPConnectToTCP)message);
        return true;
      case 1003: notifyEspSendByUdpReceived(connection, (Esp.ESPSendByUDP)message);
        return true;
      case 1004: notifyEspDiscoverServersReceived(connection, (Esp.ESPDiscoverServers)message);
        return true;
      case 1005: notifyEspSendLogByUdpReceived(connection, (Esp.ESPSendLogByUDP)message);
        return true;
      case 1006: notifyEspConnectToTcpReplyReceived(connection, (Esp.ESPConnectToTCPReply)message);
        return true;
      case 1007: notifyEspTcpConfirmationReceived(connection, (Esp.ESPTcpConfirmation)message);
        return true;
      case 1008: notifyEspGetRssiByNetworkNameReceived(connection, (Esp.ESPGetRssiByNetworkName)message);
        return true;
      case 1009: notifyEspScanWifiByChannelReceived(connection, (Esp.ESPScanWifiByChannel)message);
        return true;
      case 1010: notifyEspSetWifiAccessPointReceived(connection, (Esp.ESPSetWifiAccessPoint)message);
        return true;
      case 1011: notifyEspKillWifiAccessPointReceived(connection);
        return true;
      case 1101: notifyVersionReplyReceived(connection, (Firmware.VersionReply)message);
        return true;
      case 1103: notifyUpdateResourcesReplyReceived(connection, (Firmware.UpdateResourcesReply)message);
        return true;
      case 1104: notifyFirmwareTaskReplyReceived(connection, (Firmware.FirmwareTaskReply)message);
        return true;
      case 1201: notifyStackStateReceived(connection, (RuntimeDbg.StackState)message);
        return true;
      case 1202: notifyStackUsageReceived(connection, (RuntimeDbg.StackUsage)message);
        return true;
      case 1203: notifyAssertReceived(connection, (RuntimeDbg.Assert)message);
        return true;
      case 1204: notifyBuffersStateReceived(connection, (RuntimeDbg.BuffersState)message);
        return true;
      case 1205: notifySomeDataReceived(connection, (RuntimeDbg.SomeData)message);
        return true;
      case 1206: notifyRuntimeErrorReceived(connection, (RuntimeDbg.RuntimeError)message);
        return true;
      case 1207: notifyRuntimeSystemSnapshotReceived(connection, (RuntimeDbg.RuntimeSystemSnapshot)message);
        return true;
      case 2001: notifyEspWiFiRssiReceived(connection, (EspSrv.ESP_WiFiRSSI)message);
        return true;
      case 2002: notifyEspAssertReceived(connection, (EspSrv.ESP_Assert)message);
        return true;
      case 2003: notifyEspVersionReplyReceived(connection, (EspSrv.ESP_VersionReply)message);
        return true;
      case 2004: notifyEspFirmwareTaskReplyReceived(connection, (EspSrv.ESP_FirmwareTaskReply)message);
        return true;
      case 2005: notifyEspUpdateResourcesReplyReceived(connection, (EspSrv.ESP_UpdateResourcesReply)message);
        return true;
      case 2006: notifyEspSomeDataReceived(connection, (EspSrv.ESP_SomeData)message);
        return true;
      case 2007: notifyEspRuntimeErrorReceived(connection, (EspSrv.ESP_RuntimeError)message);
        return true;
      case 3201: notifyHelloFromSlaveReceived(connection, (VestRs485.HelloFromSlave)message);
        return true;
      case 3202: notifyReciveIrReceived(connection, (VestRs485.ReciveIr)message);
        return true;
      case 3203: notifyStateBatteryReceived(connection, (VestRs485.StateBattery)message);
        return true;
      case 3204: notifyPowerOnCommandReceived(connection);
        return true;
      case 3205: notifyPowerOffCommandReceived(connection);
        return true;
      case 3206: notifyStatePowerButtonReceived(connection, (VestRs485.StatePowerButton)message);
        return true;
      case 3207: notifyStateCapacitiveSensorReceived(connection, (VestRs485.StateCapacitiveSensor)message);
        return true;
      case 3208: notifyDeviceErrorInformationReceived(connection, (VestRs485.DeviceErrorInformation)message);
        return true;
      default:
         return false;
      }
    }

    @Override
    public void notifyOnConnected(ProtoServer.Connection connection) {
      AdditionalDeviceConnection conn = new AdditionalDeviceConnection(connection);
      connection.setApi(conn);

      OnConnectedListener localCopy = onConnectedListener;
      if (localCopy != null)
        localCopy.onConnected(conn);
    }

    @Override
    public void notifyOnDisconnected(ProtoServer.Connection connection) {
      OnDisconnectedListener localCopy = onDisconnectedListener;
      if (localCopy != null)
        localCopy.onDisconnected((Connection)connection.getApi());
    }

    @Override
    public void notifyOnError(ProtoServer.Connection connection, Throwable error) {

    }
  };

  static class AdditionalDeviceConnection implements Connection {
    private ProtoServer.Connection mConnection;
    private ProtoServer mServer;
    private Object mAttachment;

    private AdditionalDeviceConnection(ProtoServer.Connection connection) {
      mConnection = connection;
      mServer = connection.getServer();
    }

    @Override
    public boolean sendStatFromKit(Tagger.StatFromKit message) {
    	return mServer.sendCommand(mConnection, 1, message);
    }

    @Override
    public boolean sendSettingsArena25(Tagger.SettingsArena2_5 message) {
    	return mServer.sendCommand(mConnection, 2, message);
    }

    @Override
    public boolean sendStartGame(ForpostServer.StartGame message) {
    	return mServer.sendCommand(mConnection, 3, message);
    }

    @Override
    public boolean sendStopGame() {
    	return mServer.sendCommand(mConnection, 4, null);
    }

    @Override
    public boolean sendRespawn() {
    	return mServer.sendCommand(mConnection, 5, null);
    }

    @Override
    public boolean sendReturnToDefSettings() {
    	return mServer.sendCommand(mConnection, 6, null);
    }

    @Override
    public boolean sendRadiation(Tagger.Radiation message) {
    	return mServer.sendCommand(mConnection, 7, message);
    }

    @Override
    public boolean sendDoubleHealth() {
    	return mServer.sendCommand(mConnection, 8, null);
    }

    @Override
    public boolean sendAddHealth(Tagger.AddHealth message) {
    	return mServer.sendCommand(mConnection, 9, message);
    }

    @Override
    public boolean sendPauseGame() {
    	return mServer.sendCommand(mConnection, 10, null);
    }

    @Override
    public boolean sendKillPlayer() {
    	return mServer.sendCommand(mConnection, 11, null);
    }

    @Override
    public boolean sendChangeId(ForpostServer.ChangeId message) {
    	return mServer.sendCommand(mConnection, 12, message);
    }

    @Override
    public boolean sendChangeColor(Tagger.ChangeColor message) {
    	return mServer.sendCommand(mConnection, 13, message);
    }

    @Override
    public boolean sendSetVolume(ForpostServer.SetVolume message) {
    	return mServer.sendCommand(mConnection, 14, message);
    }

    @Override
    public boolean sendResetStat() {
    	return mServer.sendCommand(mConnection, 15, null);
    }

    @Override
    public boolean sendMilesCommand(ForpostServer.MilesCommand message) {
    	return mServer.sendCommand(mConnection, 16, message);
    }

    @Override
    public boolean sendPing() {
    	return mServer.sendCommand(mConnection, 17, null);
    }

    @Override
    public boolean sendStatFromServerToKit(Tagger.StatFromServerToKit message) {
    	return mServer.sendCommand(mConnection, 18, message);
    }

    @Override
    public boolean sendStatById(ForpostServer.StatById message) {
    	return mServer.sendCommand(mConnection, 19, message);
    }

    @Override
    public boolean sendGetSettingsArena25() {
    	return mServer.sendCommand(mConnection, 20, null);
    }

    @Override
    public boolean sendGetAllStatArena25() {
    	return mServer.sendCommand(mConnection, 21, null);
    }

    @Override
    public boolean sendSetIRstrength(ForpostServer.SetIRstrength message) {
    	return mServer.sendCommand(mConnection, 22, message);
    }

    @Override
    public boolean sendGetBatteryLevel() {
    	return mServer.sendCommand(mConnection, 23, null);
    }

    @Override
    public boolean sendSetBrightnes(ForpostServer.SetBrightnes message) {
    	return mServer.sendCommand(mConnection, 24, message);
    }

    @Override
    public boolean sendUpdateDev() {
    	return mServer.sendCommand(mConnection, 25, null);
    }

    @Override
    public boolean sendSetLanguage(ForpostServer.setLanguage message) {
    	return mServer.sendCommand(mConnection, 26, message);
    }

    @Override
    public boolean sendScoreAndPlace(Tagger.ScoreAndPlace message) {
    	return mServer.sendCommand(mConnection, 27, message);
    }

    @Override
    public boolean sendSetPlayTime(Tagger.SetPlayTime message) {
    	return mServer.sendCommand(mConnection, 28, message);
    }

    @Override
    public boolean sendSetFlagState(Tagger.SetFlagState message) {
    	return mServer.sendCommand(mConnection, 29, message);
    }

    @Override
    public boolean sendPlaySound(ForpostServer.PlaySound message) {
    	return mServer.sendCommand(mConnection, 30, message);
    }

    @Override
    public boolean sendStopSound(ForpostServer.StopSound message) {
    	return mServer.sendCommand(mConnection, 31, message);
    }

    @Override
    public boolean sendGetSoundsInfo() {
    	return mServer.sendCommand(mConnection, 32, null);
    }

    @Override
    public boolean sendSendDevType(ForpostServer.SendDevType message) {
    	return mServer.sendCommand(mConnection, 34, message);
    }

    @Override
    public boolean sendDiffDamage(Tagger.DiffDamage message) {
    	return mServer.sendCommand(mConnection, 35, message);
    }

    @Override
    public boolean sendTurnOffDevice() {
    	return mServer.sendCommand(mConnection, 36, null);
    }

    @Override
    public boolean sendGetInfoSlaves() {
    	return mServer.sendCommand(mConnection, 37, null);
    }

    @Override
    public boolean sendSetGameId(ForpostServer.SetGameId message) {
    	return mServer.sendCommand(mConnection, 38, message);
    }

    @Override
    public boolean sendAdditionalFunctionality(Tagger.AdditionalFunctionality message) {
    	return mServer.sendCommand(mConnection, 39, message);
    }

    @Override
    public boolean sendPresetSettings(Tagger.PresetSettings message) {
    	return mServer.sendCommand(mConnection, 40, message);
    }

    @Override
    public boolean sendWeaponSettings(Tagger.WeaponSettings message) {
    	return mServer.sendCommand(mConnection, 41, message);
    }

    @Override
    public boolean sendBleedingSet(Tagger.BleedingSet message) {
    	return mServer.sendCommand(mConnection, 42, message);
    }

    @Override
    public boolean sendPlayersTable(Tagger.PlayersTable message) {
    	return mServer.sendCommand(mConnection, 43, message);
    }

    @Override
    public boolean sendSetHealth(Tagger.SetHealth message) {
    	return mServer.sendCommand(mConnection, 44, message);
    }

    @Override
    public boolean sendSetDefHealth(Tagger.SetDefHealth message) {
    	return mServer.sendCommand(mConnection, 45, message);
    }

    @Override
    public boolean sendStressBeltSettings(StressBelt.StressBeltSettings message) {
    	return mServer.sendCommand(mConnection, 46, message);
    }

    @Override
    public boolean sendSuperModeSettings(Tagger.SuperModeSettings message) {
    	return mServer.sendCommand(mConnection, 47, message);
    }

    @Override
    public boolean sendGetSuperModeSettings() {
    	return mServer.sendCommand(mConnection, 48, null);
    }

    @Override
    public boolean sendSettingsHealingRun(Tagger.SettingsHealingRun message) {
    	return mServer.sendCommand(mConnection, 49, message);
    }

    @Override
    public boolean sendSettingsNotAgr(Tagger.SettingsNotAgr message) {
    	return mServer.sendCommand(mConnection, 50, message);
    }

    @Override
    public boolean sendSettingsRadiationOrMedicineMode(AdditionalDevice.SettingsRadiationOrMedicineMode message) {
    	return mServer.sendCommand(mConnection, 51, message);
    }

    @Override
    public boolean sendSettingsRespawnMode(AdditionalDevice.SettingsRespawnMode message) {
    	return mServer.sendCommand(mConnection, 52, message);
    }

    @Override
    public boolean sendSettingsAmmoMode(AdditionalDevice.SettingsAmmoMode message) {
    	return mServer.sendCommand(mConnection, 53, message);
    }

    @Override
    public boolean sendSettingsControlPoint(AdditionalDevice.SettingsControlPoint message) {
    	return mServer.sendCommand(mConnection, 54, message);
    }

    @Override
    public boolean sendSettingsBazeMode(AdditionalDevice.SettingsBazeMode message) {
    	return mServer.sendCommand(mConnection, 55, message);
    }

    @Override
    public boolean sendSettingsRandomMode(AdditionalDevice.SettingsRandomMode message) {
    	return mServer.sendCommand(mConnection, 56, message);
    }

    @Override
    public boolean sendSettingsBonusMode(AdditionalDevice.SettingsBonusMode message) {
    	return mServer.sendCommand(mConnection, 57, message);
    }

    @Override
    public boolean sendSettingsTimeCapture(AdditionalDevice.SettingsTimeCapture message) {
    	return mServer.sendCommand(mConnection, 58, message);
    }

    @Override
    public boolean sendSettingsCaptureByShot(AdditionalDevice.SettingsCaptureByShot message) {
    	return mServer.sendCommand(mConnection, 59, message);
    }

    @Override
    public boolean sendSettingsTugOfWar(AdditionalDevice.SettingsTugOfWar message) {
    	return mServer.sendCommand(mConnection, 60, message);
    }

    @Override
    public boolean sendSettingsThreePerson(AdditionalDevice.SettingsThreePerson message) {
    	return mServer.sendCommand(mConnection, 61, message);
    }

    @Override
    public boolean sendSettingsCaptureFlag(AdditionalDevice.SettingsCaptureFlag message) {
    	return mServer.sendCommand(mConnection, 62, message);
    }

    @Override
    public boolean sendCurrentCaptureColorTeam(AdditionalDevice.CurrentCaptureColorTeam message) {
    	return mServer.sendCommand(mConnection, 63, message);
    }

    @Override
    public boolean sendCaptureRateInPercent(AdditionalDevice.CaptureRateInPercent message) {
    	return mServer.sendCommand(mConnection, 64, message);
    }

    @Override
    public boolean sendTimeHoldByTeam(AdditionalDevice.TimeHoldByTeam message) {
    	return mServer.sendCommand(mConnection, 65, message);
    }

    @Override
    public boolean sendRemainTimeToWin(AdditionalDevice.RemainTimeToWin message) {
    	return mServer.sendCommand(mConnection, 66, message);
    }

    @Override
    public boolean sendCurrentHealth(AdditionalDevice.CurrentHealth message) {
    	return mServer.sendCommand(mConnection, 67, message);
    }

    @Override
    public boolean sendSettingsCtfMode(AdditionalDevice.SettingsCTFMode message) {
    	return mServer.sendCommand(mConnection, 68, message);
    }

    @Override
    public boolean sendGenerateFlag(AdditionalDevice.GenerateFlag message) {
    	return mServer.sendCommand(mConnection, 69, message);
    }

    @Override
    public boolean sendFlagStat(AdditionalDevice.FlagStat message) {
    	return mServer.sendCommand(mConnection, 70, message);
    }

    @Override
    public boolean sendSettingsBombMode(AdditionalDevice.SettingsBombMode message) {
    	return mServer.sendCommand(mConnection, 71, message);
    }

    @Override
    public boolean sendLowLevelDeviceConfig(ForpostServer.LowLevelDeviceConfig message) {
    	return mServer.sendCommand(mConnection, 72, message);
    }

    @Override
    public boolean sendCustomTestMode(Tagger.CustomTestMode message) {
    	return mServer.sendCommand(mConnection, 150, message);
    }

    @Override
    public boolean sendBobmProSettings(BombPro.bobmProSettings message) {
    	return mServer.sendCommand(mConnection, 156, message);
    }

    @Override
    public boolean sendBobmProBreakActions() {
    	return mServer.sendCommand(mConnection, 157, null);
    }

    @Override
    public boolean sendBombPlayersTable(BombPro.bombPlayersTable message) {
    	return mServer.sendCommand(mConnection, 158, message);
    }

    @Override
    public boolean sendFsInfo() {
    	return mServer.sendCommand(mConnection, 301, null);
    }

    @Override
    public boolean sendFormatFs() {
    	return mServer.sendCommand(mConnection, 302, null);
    }

    @Override
    public boolean sendLsDir(Filesystem.LsDir message) {
    	return mServer.sendCommand(mConnection, 303, message);
    }

    @Override
    public boolean sendFileInfo(Filesystem.FileInfo message) {
    	return mServer.sendCommand(mConnection, 304, message);
    }

    @Override
    public boolean sendDelFile(Filesystem.DelFile message) {
    	return mServer.sendCommand(mConnection, 305, message);
    }

    @Override
    public boolean sendReadFile(Filesystem.ReadFile message) {
    	return mServer.sendCommand(mConnection, 306, message);
    }

    @Override
    public boolean sendWriteFile(Filesystem.WriteFile message) {
    	return mServer.sendCommand(mConnection, 307, message);
    }

    @Override
    public boolean sendCalcMd5(Filesystem.CalcMD5 message) {
    	return mServer.sendCommand(mConnection, 308, message);
    }

    @Override
    public boolean sendEspConectionState(Esp.ESPConectionState message) {
    	return mServer.sendCommand(mConnection, 1001, message);
    }

    @Override
    public boolean sendEspConnectToTcpReply(Esp.ESPConnectToTCPReply message) {
    	return mServer.sendCommand(mConnection, 1002, message);
    }

    @Override
    public boolean sendEspTcpConfirmation(Esp.ESPTcpConfirmation message) {
    	return mServer.sendCommand(mConnection, 1003, message);
    }

    @Override
    public boolean sendEspServerDiscovered(Esp.ESPServerDiscovered message) {
    	return mServer.sendCommand(mConnection, 1004, message);
    }

    @Override
    public boolean sendEspRssiForNetworkName(Esp.ESPRssiForNetworkName message) {
    	return mServer.sendCommand(mConnection, 1005, message);
    }

    @Override
    public boolean sendEspWifiAccessPoint(Esp.ESPWifiAccessPoint message) {
    	return mServer.sendCommand(mConnection, 1006, message);
    }

    @Override
    public boolean sendEspKillWifiAccessPointReply(Esp.ESPKillWifiAccessPointReply message) {
    	return mServer.sendCommand(mConnection, 1007, message);
    }

    @Override
    public boolean sendReboot() {
    	return mServer.sendCommand(mConnection, 1101, null);
    }

    @Override
    public boolean sendVersionRequest() {
    	return mServer.sendCommand(mConnection, 1102, null);
    }

    @Override
    public boolean sendFirmwareTask(Firmware.FirmwareTask message) {
    	return mServer.sendCommand(mConnection, 1103, message);
    }

    @Override
    public boolean sendBeginUpdateResources() {
    	return mServer.sendCommand(mConnection, 1104, null);
    }

    @Override
    public boolean sendFinishUpdateResources() {
    	return mServer.sendCommand(mConnection, 1105, null);
    }

    @Override
    public boolean sendGetStack() {
    	return mServer.sendCommand(mConnection, 1201, null);
    }

    @Override
    public boolean sendGetBuffersState() {
    	return mServer.sendCommand(mConnection, 1202, null);
    }

    @Override
    public boolean sendSomeData(RuntimeDbg.SomeData message) {
    	return mServer.sendCommand(mConnection, 1203, message);
    }

    @Override
    public boolean sendRuntimeError(RuntimeDbg.RuntimeError message) {
    	return mServer.sendCommand(mConnection, 1204, message);
    }

    @Override
    public boolean sendRuntimeGetErrors() {
    	return mServer.sendCommand(mConnection, 1205, null);
    }

    @Override
    public boolean sendRuntimeClearErrorMessages() {
    	return mServer.sendCommand(mConnection, 1206, null);
    }

    @Override
    public boolean sendEspReboot() {
    	return mServer.sendCommand(mConnection, 2001, null);
    }

    @Override
    public boolean sendEspVersionRequest() {
    	return mServer.sendCommand(mConnection, 2002, null);
    }

    @Override
    public boolean sendEspFirmwareTask(EspSrv.ESP_FirmwareTask message) {
    	return mServer.sendCommand(mConnection, 2003, message);
    }

    @Override
    public boolean sendEspSomeData(EspSrv.ESP_SomeData message) {
    	return mServer.sendCommand(mConnection, 2005, message);
    }

    @Override
    public boolean sendEspRuntimeError(EspSrv.ESP_RuntimeError message) {
    	return mServer.sendCommand(mConnection, 2006, message);
    }

    @Override
    public boolean sendEspBeginUpdateResources() {
    	return mServer.sendCommand(mConnection, 2007, null);
    }

    @Override
    public boolean sendEspFinishUpdateResources() {
    	return mServer.sendCommand(mConnection, 2008, null);
    }

    @Override
    public boolean sendHelloFromMaster(VestRs485.HelloFromMaster message) {
    	return mServer.sendCommand(mConnection, 3201, message);
    }

    @Override
    public boolean sendSettingsVest(VestRs485.SettingsVest message) {
    	return mServer.sendCommand(mConnection, 3202, message);
    }

    @Override
    public boolean sendSetStateIndication(VestRs485.SetStateIndication message) {
    	return mServer.sendCommand(mConnection, 3203, message);
    }

    @Override
    public boolean sendSetEventIndication(VestRs485.SetEventIndication message) {
    	return mServer.sendCommand(mConnection, 3204, message);
    }

    @Override
    public boolean sendSendIr(VestRs485.SendIr message) {
    	return mServer.sendCommand(mConnection, 3205, message);
    }

    @Override
    public boolean sendVibro(VestRs485.Vibro message) {
    	return mServer.sendCommand(mConnection, 3206, message);
    }

    @Override
    public boolean sendPlaySoundToSlave(VestRs485.PlaySoundToSlave message) {
    	return mServer.sendCommand(mConnection, 3207, message);
    }

    @Override
    public boolean sendSystemCommand(VestRs485.SystemCommand message) {
    	return mServer.sendCommand(mConnection, 3208, message);
    }

    @Override
    public boolean sendGetStatePowerButtonOnSlave() {
    	return mServer.sendCommand(mConnection, 3209, null);
    }

    @Override
    public boolean sendSetLanguageOnSlave(VestRs485.SetLanguageOnSlave message) {
    	return mServer.sendCommand(mConnection, 3210, message);
    }

    @Override
    public boolean sendServerConnectionStatus(VestRs485.ServerConnectionStatus message) {
    	return mServer.sendCommand(mConnection, 3211, message);
    }

    @Override
    public boolean sendPowerOnCommand() {
    	return mServer.sendCommand(mConnection, 3212, null);
    }

    @Override
    public boolean sendPowerOffCommand() {
    	return mServer.sendCommand(mConnection, 3213, null);
    }

    @Override
    public void disconnect() {
      mServer.disconnectClient(mConnection);
    }

    @Override
    public Object getAttachment() {
      return mAttachment;
    }

    @Override
    public void setAttachment(Object attachment) {
      mAttachment = attachment;
    }

    @Override
    public int getConnectionId() {
      return mConnection.getId();
    }

    @Override
    public ProtoServer.Connection getServerConnection() {
      return mConnection;
    }

  }

}
