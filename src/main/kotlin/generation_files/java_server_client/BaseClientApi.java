// Generated by the protocol buffer compiler. DO NOT EDIT!
// if you need to change something in code generator, please contact Alexander Lobas (alexanderlobas@yahoo.com)
package net.lasertag.operator.controller.net.controller;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.Message;

import java.io.IOException;

public class BaseClientApi implements ProtoClient.ProtocolDispatcher {

  public BaseClientApi (ProtoClient client, boolean callListenersInUIThread) {
    this.client = client;
    if (callListenersInUIThread)
      client.setProtocolDispatcher(new UIThreadClientCommandDispatcher(this));
    else
      client.setProtocolDispatcher(this);
  }

  private ProtoClient client;

  public boolean sendDevGameStatResponse(Base.DevGameStatResponse message) {
  	return client.sendCommand(9, message);
  }

  public boolean sendStressBeltSettings(StressBelt.StressBeltSettings message) {
  	return client.sendCommand(36, message);
  }

  public boolean sendStressBeltCheangeDamageMode(StressBelt.StressBeltCheangeDamageMode message) {
  	return client.sendCommand(37, message);
  }

  public boolean sendBobmProActions(BombPro.bobmProActions message) {
  	return client.sendCommand(151, message);
  }

  public boolean sendBombProHasBeenExploded(BombPro.bombProHasBeenExploded message) {
  	return client.sendCommand(152, message);
  }

  public boolean sendBombProHasBeenInstalled(BombPro.bombProHasBeenInstalled message) {
  	return client.sendCommand(153, message);
  }

  public boolean sendBombProHasBeenDeinstalled(BombPro.bombProHasBeenDeinstalled message) {
  	return client.sendCommand(154, message);
  }

  public boolean sendBombProCheatHasBeenDetected(BombPro.bombProCheatHasBeenDetected message) {
  	return client.sendCommand(155, message);
  }

  public boolean sendBobmProSettings(BombPro.bobmProSettings message) {
  	return client.sendCommand(156, message);
  }

  public boolean sendVersionReply(Firmware.VersionReply message) {
  	return client.sendCommand(1101, message);
  }

  public boolean sendUpdateResourcesReply(Firmware.UpdateResourcesReply message) {
  	return client.sendCommand(1103, message);
  }

  public boolean sendFirmwareTaskReply(Firmware.FirmwareTaskReply message) {
  	return client.sendCommand(1104, message);
  }

  public boolean sendStackState(RuntimeDbg.StackState message) {
  	return client.sendCommand(1201, message);
  }

  public boolean sendStackUsage(RuntimeDbg.StackUsage message) {
  	return client.sendCommand(1202, message);
  }

  public boolean sendAssert(RuntimeDbg.Assert message) {
  	return client.sendCommand(1203, message);
  }

  public boolean sendBuffersState(RuntimeDbg.BuffersState message) {
  	return client.sendCommand(1204, message);
  }

  public boolean sendSomeData(RuntimeDbg.SomeData message) {
  	return client.sendCommand(1205, message);
  }

  public boolean sendRuntimeError(RuntimeDbg.RuntimeError message) {
  	return client.sendCommand(1206, message);
  }

  public boolean sendRuntimeSystemSnapshot(RuntimeDbg.RuntimeSystemSnapshot message) {
  	return client.sendCommand(1207, message);
  }

  public boolean sendEspWiFiRssi(EspSrv.ESP_WiFiRSSI message) {
  	return client.sendCommand(2001, message);
  }

  public boolean sendEspAssert(EspSrv.ESP_Assert message) {
  	return client.sendCommand(2002, message);
  }

  public boolean sendEspVersionReply(EspSrv.ESP_VersionReply message) {
  	return client.sendCommand(2003, message);
  }

  public boolean sendEspFirmwareTaskReply(EspSrv.ESP_FirmwareTaskReply message) {
  	return client.sendCommand(2004, message);
  }

  public boolean sendEspUpdateResourcesReply(EspSrv.ESP_UpdateResourcesReply message) {
  	return client.sendCommand(2005, message);
  }

  public boolean sendEspSomeData(EspSrv.ESP_SomeData message) {
  	return client.sendCommand(2006, message);
  }

  public boolean sendEspRuntimeError(EspSrv.ESP_RuntimeError message) {
  	return client.sendCommand(2007, message);
  }

  public void diconnect() {
    client.disconnect();
  }

  public ProtoClient getClient() {
    return client;
  }

  // Listeners interfaces for incoming messages

  public interface OnDevGameStatRequestListener {
    void onDevGameStatRequestReceived();
  }

  public interface OnStressBeltSettingsListener {
    void onStressBeltSettingsReceived(StressBelt.StressBeltSettings message);
  }

  public interface OnBobmProSettingsListener {
    void onBobmProSettingsReceived(BombPro.bobmProSettings message);
  }

  public interface OnBobmProBreakActionsListener {
    void onBobmProBreakActionsReceived();
  }

  public interface OnBombPlayersTableListener {
    void onBombPlayersTableReceived(BombPro.bombPlayersTable message);
  }

  public interface OnRebootListener {
    void onRebootReceived();
  }

  public interface OnVersionRequestListener {
    void onVersionRequestReceived();
  }

  public interface OnFirmwareTaskListener {
    void onFirmwareTaskReceived(Firmware.FirmwareTask message);
  }

  public interface OnBeginUpdateResourcesListener {
    void onBeginUpdateResourcesReceived();
  }

  public interface OnFinishUpdateResourcesListener {
    void onFinishUpdateResourcesReceived();
  }

  public interface OnGetStackListener {
    void onGetStackReceived();
  }

  public interface OnGetBuffersStateListener {
    void onGetBuffersStateReceived();
  }

  public interface OnSomeDataListener {
    void onSomeDataReceived(RuntimeDbg.SomeData message);
  }

  public interface OnRuntimeErrorListener {
    void onRuntimeErrorReceived(RuntimeDbg.RuntimeError message);
  }

  public interface OnRuntimeGetErrorsListener {
    void onRuntimeGetErrorsReceived();
  }

  public interface OnRuntimeClearErrorMessagesListener {
    void onRuntimeClearErrorMessagesReceived();
  }

  public interface OnEspRebootListener {
    void onEspRebootReceived();
  }

  public interface OnEspVersionRequestListener {
    void onEspVersionRequestReceived();
  }

  public interface OnEspFirmwareTaskListener {
    void onEspFirmwareTaskReceived(EspSrv.ESP_FirmwareTask message);
  }

  public interface OnEspSomeDataListener {
    void onEspSomeDataReceived(EspSrv.ESP_SomeData message);
  }

  public interface OnEspRuntimeErrorListener {
    void onEspRuntimeErrorReceived(EspSrv.ESP_RuntimeError message);
  }

  public interface OnEspBeginUpdateResourcesListener {
    void onEspBeginUpdateResourcesReceived();
  }

  public interface OnEspFinishUpdateResourcesListener {
    void onEspFinishUpdateResourcesReceived();
  }

  public interface OnConnectedListener {
    void onConnected();
  }

  public interface OnErrorListener {
    void onError(Throwable error);
  }

  public interface OnDisconnectedListener {
    void onDisconnected();
  }


  private volatile OnDevGameStatRequestListener onDevGameStatRequestListener = null;
  private volatile OnStressBeltSettingsListener onStressBeltSettingsListener = null;
  private volatile OnBobmProSettingsListener onBobmProSettingsListener = null;
  private volatile OnBobmProBreakActionsListener onBobmProBreakActionsListener = null;
  private volatile OnBombPlayersTableListener onBombPlayersTableListener = null;
  private volatile OnRebootListener onRebootListener = null;
  private volatile OnVersionRequestListener onVersionRequestListener = null;
  private volatile OnFirmwareTaskListener onFirmwareTaskListener = null;
  private volatile OnBeginUpdateResourcesListener onBeginUpdateResourcesListener = null;
  private volatile OnFinishUpdateResourcesListener onFinishUpdateResourcesListener = null;
  private volatile OnGetStackListener onGetStackListener = null;
  private volatile OnGetBuffersStateListener onGetBuffersStateListener = null;
  private volatile OnSomeDataListener onSomeDataListener = null;
  private volatile OnRuntimeErrorListener onRuntimeErrorListener = null;
  private volatile OnRuntimeGetErrorsListener onRuntimeGetErrorsListener = null;
  private volatile OnRuntimeClearErrorMessagesListener onRuntimeClearErrorMessagesListener = null;
  private volatile OnEspRebootListener onEspRebootListener = null;
  private volatile OnEspVersionRequestListener onEspVersionRequestListener = null;
  private volatile OnEspFirmwareTaskListener onEspFirmwareTaskListener = null;
  private volatile OnEspSomeDataListener onEspSomeDataListener = null;
  private volatile OnEspRuntimeErrorListener onEspRuntimeErrorListener = null;
  private volatile OnEspBeginUpdateResourcesListener onEspBeginUpdateResourcesListener = null;
  private volatile OnEspFinishUpdateResourcesListener onEspFinishUpdateResourcesListener = null;
  private volatile OnConnectedListener onConnectedListener = null;
  private volatile OnErrorListener onErrorListener = null;
  private volatile OnDisconnectedListener onDisconnectedListener = null;

  private void notifyDevGameStatRequestReceived() {
    OnDevGameStatRequestListener localCopy = onDevGameStatRequestListener;
    if (localCopy != null)
      localCopy.onDevGameStatRequestReceived();
  }

  private void notifyStressBeltSettingsReceived(StressBelt.StressBeltSettings message) {
    OnStressBeltSettingsListener localCopy = onStressBeltSettingsListener;
    if (localCopy != null)
      localCopy.onStressBeltSettingsReceived(message);
  }

  private void notifyBobmProSettingsReceived(BombPro.bobmProSettings message) {
    OnBobmProSettingsListener localCopy = onBobmProSettingsListener;
    if (localCopy != null)
      localCopy.onBobmProSettingsReceived(message);
  }

  private void notifyBobmProBreakActionsReceived() {
    OnBobmProBreakActionsListener localCopy = onBobmProBreakActionsListener;
    if (localCopy != null)
      localCopy.onBobmProBreakActionsReceived();
  }

  private void notifyBombPlayersTableReceived(BombPro.bombPlayersTable message) {
    OnBombPlayersTableListener localCopy = onBombPlayersTableListener;
    if (localCopy != null)
      localCopy.onBombPlayersTableReceived(message);
  }

  private void notifyRebootReceived() {
    OnRebootListener localCopy = onRebootListener;
    if (localCopy != null)
      localCopy.onRebootReceived();
  }

  private void notifyVersionRequestReceived() {
    OnVersionRequestListener localCopy = onVersionRequestListener;
    if (localCopy != null)
      localCopy.onVersionRequestReceived();
  }

  private void notifyFirmwareTaskReceived(Firmware.FirmwareTask message) {
    OnFirmwareTaskListener localCopy = onFirmwareTaskListener;
    if (localCopy != null)
      localCopy.onFirmwareTaskReceived(message);
  }

  private void notifyBeginUpdateResourcesReceived() {
    OnBeginUpdateResourcesListener localCopy = onBeginUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onBeginUpdateResourcesReceived();
  }

  private void notifyFinishUpdateResourcesReceived() {
    OnFinishUpdateResourcesListener localCopy = onFinishUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onFinishUpdateResourcesReceived();
  }

  private void notifyGetStackReceived() {
    OnGetStackListener localCopy = onGetStackListener;
    if (localCopy != null)
      localCopy.onGetStackReceived();
  }

  private void notifyGetBuffersStateReceived() {
    OnGetBuffersStateListener localCopy = onGetBuffersStateListener;
    if (localCopy != null)
      localCopy.onGetBuffersStateReceived();
  }

  private void notifySomeDataReceived(RuntimeDbg.SomeData message) {
    OnSomeDataListener localCopy = onSomeDataListener;
    if (localCopy != null)
      localCopy.onSomeDataReceived(message);
  }

  private void notifyRuntimeErrorReceived(RuntimeDbg.RuntimeError message) {
    OnRuntimeErrorListener localCopy = onRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onRuntimeErrorReceived(message);
  }

  private void notifyRuntimeGetErrorsReceived() {
    OnRuntimeGetErrorsListener localCopy = onRuntimeGetErrorsListener;
    if (localCopy != null)
      localCopy.onRuntimeGetErrorsReceived();
  }

  private void notifyRuntimeClearErrorMessagesReceived() {
    OnRuntimeClearErrorMessagesListener localCopy = onRuntimeClearErrorMessagesListener;
    if (localCopy != null)
      localCopy.onRuntimeClearErrorMessagesReceived();
  }

  private void notifyEspRebootReceived() {
    OnEspRebootListener localCopy = onEspRebootListener;
    if (localCopy != null)
      localCopy.onEspRebootReceived();
  }

  private void notifyEspVersionRequestReceived() {
    OnEspVersionRequestListener localCopy = onEspVersionRequestListener;
    if (localCopy != null)
      localCopy.onEspVersionRequestReceived();
  }

  private void notifyEspFirmwareTaskReceived(EspSrv.ESP_FirmwareTask message) {
    OnEspFirmwareTaskListener localCopy = onEspFirmwareTaskListener;
    if (localCopy != null)
      localCopy.onEspFirmwareTaskReceived(message);
  }

  private void notifyEspSomeDataReceived(EspSrv.ESP_SomeData message) {
    OnEspSomeDataListener localCopy = onEspSomeDataListener;
    if (localCopy != null)
      localCopy.onEspSomeDataReceived(message);
  }

  private void notifyEspRuntimeErrorReceived(EspSrv.ESP_RuntimeError message) {
    OnEspRuntimeErrorListener localCopy = onEspRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onEspRuntimeErrorReceived(message);
  }

  private void notifyEspBeginUpdateResourcesReceived() {
    OnEspBeginUpdateResourcesListener localCopy = onEspBeginUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onEspBeginUpdateResourcesReceived();
  }

  private void notifyEspFinishUpdateResourcesReceived() {
    OnEspFinishUpdateResourcesListener localCopy = onEspFinishUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onEspFinishUpdateResourcesReceived();
  }


  @Override
  public void notifyOnConnected() {
    OnConnectedListener localCopy = this.onConnectedListener;
    if (localCopy != null)
      localCopy.onConnected();
  }

  @Override
  public void notifyOnError(Throwable error) {
    OnErrorListener localCopy = this.onErrorListener;
    if (localCopy != null)
      localCopy.onError(error);
  }

  @Override
  public void notifyOnDisconnected() {
    OnDisconnectedListener localCopy = this.onDisconnectedListener;
    if (localCopy != null)
      localCopy.onDisconnected();
  }


  public void setOnDevGameStatRequestListener(OnDevGameStatRequestListener listener)
  {
    onDevGameStatRequestListener = listener;
  }

  public void setOnStressBeltSettingsListener(OnStressBeltSettingsListener listener)
  {
    onStressBeltSettingsListener = listener;
  }

  public void setOnBobmProSettingsListener(OnBobmProSettingsListener listener)
  {
    onBobmProSettingsListener = listener;
  }

  public void setOnBobmProBreakActionsListener(OnBobmProBreakActionsListener listener)
  {
    onBobmProBreakActionsListener = listener;
  }

  public void setOnBombPlayersTableListener(OnBombPlayersTableListener listener)
  {
    onBombPlayersTableListener = listener;
  }

  public void setOnRebootListener(OnRebootListener listener)
  {
    onRebootListener = listener;
  }

  public void setOnVersionRequestListener(OnVersionRequestListener listener)
  {
    onVersionRequestListener = listener;
  }

  public void setOnFirmwareTaskListener(OnFirmwareTaskListener listener)
  {
    onFirmwareTaskListener = listener;
  }

  public void setOnBeginUpdateResourcesListener(OnBeginUpdateResourcesListener listener)
  {
    onBeginUpdateResourcesListener = listener;
  }

  public void setOnFinishUpdateResourcesListener(OnFinishUpdateResourcesListener listener)
  {
    onFinishUpdateResourcesListener = listener;
  }

  public void setOnGetStackListener(OnGetStackListener listener)
  {
    onGetStackListener = listener;
  }

  public void setOnGetBuffersStateListener(OnGetBuffersStateListener listener)
  {
    onGetBuffersStateListener = listener;
  }

  public void setOnSomeDataListener(OnSomeDataListener listener)
  {
    onSomeDataListener = listener;
  }

  public void setOnRuntimeErrorListener(OnRuntimeErrorListener listener)
  {
    onRuntimeErrorListener = listener;
  }

  public void setOnRuntimeGetErrorsListener(OnRuntimeGetErrorsListener listener)
  {
    onRuntimeGetErrorsListener = listener;
  }

  public void setOnRuntimeClearErrorMessagesListener(OnRuntimeClearErrorMessagesListener listener)
  {
    onRuntimeClearErrorMessagesListener = listener;
  }

  public void setOnEspRebootListener(OnEspRebootListener listener)
  {
    onEspRebootListener = listener;
  }

  public void setOnEspVersionRequestListener(OnEspVersionRequestListener listener)
  {
    onEspVersionRequestListener = listener;
  }

  public void setOnEspFirmwareTaskListener(OnEspFirmwareTaskListener listener)
  {
    onEspFirmwareTaskListener = listener;
  }

  public void setOnEspSomeDataListener(OnEspSomeDataListener listener)
  {
    onEspSomeDataListener = listener;
  }

  public void setOnEspRuntimeErrorListener(OnEspRuntimeErrorListener listener)
  {
    onEspRuntimeErrorListener = listener;
  }

  public void setOnEspBeginUpdateResourcesListener(OnEspBeginUpdateResourcesListener listener)
  {
    onEspBeginUpdateResourcesListener = listener;
  }

  public void setOnEspFinishUpdateResourcesListener(OnEspFinishUpdateResourcesListener listener)
  {
    onEspFinishUpdateResourcesListener = listener;
  }


  public void setOnConnectedListener(OnConnectedListener listener)
  {
    this.onConnectedListener = listener;
  }

  public void setOnErrorListener(OnErrorListener listener)
  {
    this.onErrorListener = listener;
  }

  public void setOnDisconnectedListener(OnDisconnectedListener listener)
  {
    this.onDisconnectedListener = listener;
  }


  @Override
  public Message parseMessage(int commandId, CodedInputStream inputStream) throws IOException {
    switch(commandId) {
    case 46: return StressBelt.StressBeltSettings.parser().parsePartialFrom(inputStream);
    case 156: return BombPro.bobmProSettings.parser().parsePartialFrom(inputStream);
    case 158: return BombPro.bombPlayersTable.parser().parsePartialFrom(inputStream);
    case 1103: return Firmware.FirmwareTask.parser().parsePartialFrom(inputStream);
    case 1203: return RuntimeDbg.SomeData.parser().parsePartialFrom(inputStream);
    case 1204: return RuntimeDbg.RuntimeError.parser().parsePartialFrom(inputStream);
    case 2003: return EspSrv.ESP_FirmwareTask.parser().parsePartialFrom(inputStream);
    case 2005: return EspSrv.ESP_SomeData.parser().parsePartialFrom(inputStream);
    case 2006: return EspSrv.ESP_RuntimeError.parser().parsePartialFrom(inputStream);
    default:
       return null;
    }
  }

  @Override
  public boolean dispatchMessage(int commandId, Message message) {
    switch(commandId) {
    case 33: notifyDevGameStatRequestReceived();
      return true;
    case 46: notifyStressBeltSettingsReceived((StressBelt.StressBeltSettings)message);
      return true;
    case 156: notifyBobmProSettingsReceived((BombPro.bobmProSettings)message);
      return true;
    case 157: notifyBobmProBreakActionsReceived();
      return true;
    case 158: notifyBombPlayersTableReceived((BombPro.bombPlayersTable)message);
      return true;
    case 1101: notifyRebootReceived();
      return true;
    case 1102: notifyVersionRequestReceived();
      return true;
    case 1103: notifyFirmwareTaskReceived((Firmware.FirmwareTask)message);
      return true;
    case 1104: notifyBeginUpdateResourcesReceived();
      return true;
    case 1105: notifyFinishUpdateResourcesReceived();
      return true;
    case 1201: notifyGetStackReceived();
      return true;
    case 1202: notifyGetBuffersStateReceived();
      return true;
    case 1203: notifySomeDataReceived((RuntimeDbg.SomeData)message);
      return true;
    case 1204: notifyRuntimeErrorReceived((RuntimeDbg.RuntimeError)message);
      return true;
    case 1205: notifyRuntimeGetErrorsReceived();
      return true;
    case 1206: notifyRuntimeClearErrorMessagesReceived();
      return true;
    case 2001: notifyEspRebootReceived();
      return true;
    case 2002: notifyEspVersionRequestReceived();
      return true;
    case 2003: notifyEspFirmwareTaskReceived((EspSrv.ESP_FirmwareTask)message);
      return true;
    case 2005: notifyEspSomeDataReceived((EspSrv.ESP_SomeData)message);
      return true;
    case 2006: notifyEspRuntimeErrorReceived((EspSrv.ESP_RuntimeError)message);
      return true;
    case 2007: notifyEspBeginUpdateResourcesReceived();
      return true;
    case 2008: notifyEspFinishUpdateResourcesReceived();
      return true;
    default:
       return false;
    }
  }

  public static String getSendCommandName(int commandId) {
    switch(commandId) {
    case 0: return "DevGameStatResponse";
    case 46: return "StressBeltSettings";
    case 0: return "StressBeltCheangeDamageMode";
    case 0: return "BobmProActions";
    case 0: return "BombProHasBeenExploded";
    case 0: return "BombProHasBeenInstalled";
    case 0: return "BombProHasBeenDeinstalled";
    case 0: return "BombProCheatHasBeenDetected";
    case 156: return "BobmProSettings";
    case 0: return "VersionReply";
    case 0: return "UpdateResourcesReply";
    case 0: return "FirmwareTaskReply";
    case 0: return "StackState";
    case 0: return "StackUsage";
    case 0: return "Assert";
    case 0: return "BuffersState";
    case 1203: return "SomeData";
    case 1204: return "RuntimeError";
    case 0: return "RuntimeSystemSnapshot";
    case 0: return "EspWiFiRssi";
    case 0: return "EspAssert";
    case 0: return "EspVersionReply";
    case 0: return "EspFirmwareTaskReply";
    case 0: return "EspUpdateResourcesReply";
    case 2005: return "EspSomeData";
    case 2006: return "EspRuntimeError";
    default:
       return "";
    }
  }

  public static String getRecvCommandName(int commandId) {
    switch(commandId) {
    case 33: return "DevGameStatRequest";
    case 46: return "StressBeltSettings";
    case 156: return "BobmProSettings";
    case 157: return "BobmProBreakActions";
    case 158: return "BombPlayersTable";
    case 1101: return "Reboot";
    case 1102: return "VersionRequest";
    case 1103: return "FirmwareTask";
    case 1104: return "BeginUpdateResources";
    case 1105: return "FinishUpdateResources";
    case 1201: return "GetStack";
    case 1202: return "GetBuffersState";
    case 1203: return "SomeData";
    case 1204: return "RuntimeError";
    case 1205: return "RuntimeGetErrors";
    case 1206: return "RuntimeClearErrorMessages";
    case 2001: return "EspReboot";
    case 2002: return "EspVersionRequest";
    case 2003: return "EspFirmwareTask";
    case 2005: return "EspSomeData";
    case 2006: return "EspRuntimeError";
    case 2007: return "EspBeginUpdateResources";
    case 2008: return "EspFinishUpdateResources";
    default:
       return "";
    }
  }

}
