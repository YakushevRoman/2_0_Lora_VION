// Generated by the protocol buffer compiler. DO NOT EDIT!
// if you need to change something in code generator, please contact Alexander Lobas (alexanderlobas@yahoo.com)
package generation_java_files;

import build.generated.source.proto.main.java.*;
import clients.ProtoClient;
import clients.UIThreadClientCommandDispatcher;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.Message;
import com.google.protobuf.MessageLite;
import utils.HandlerWrapper;

import java.io.IOException;

public class AntiSniperClientApi implements ProtoClient.ProtocolDispatcher {

  public AntiSniperClientApi(ProtoClient client, boolean callListenersInUIThread, HandlerWrapper handlerWrapper) {
    this.client = client;
    if (callListenersInUIThread)
      client.setProtocolDispatcher(new UIThreadClientCommandDispatcher(this, handlerWrapper));
    else
      client.setProtocolDispatcher(this);
  }

  private ProtoClient client;

  public boolean sendHelloFromDev(Base.HelloFromDev message) {
  	return client.sendCommand(1, message);
  }

  public boolean sendChangeId(Base.ChangeId message) {
  	return client.sendCommand(5, message);
  }

  public boolean sendPing() {
  	return client.sendCommand(7, null);
  }

  public boolean sendSoundsInfoResponce(Multimedia.SoundsInfoResponce message) {
  	return client.sendCommand(8, message);
  }

  public boolean sendStateVolume(Multimedia.StateVolume message) {
  	return client.sendCommand(9, message);
  }

  public boolean sendDisconnectingClient(Base.DisconnectingClient message) {
  	return client.sendCommand(10, message);
  }

  public boolean sendSlavesInfoResponce(Slave.SlavesInfoResponce message) {
  	return client.sendCommand(33, message);
  }

  public boolean sendSlaveDisconnected(Slave.SlaveDisconnected message) {
  	return client.sendCommand(34, message);
  }

  public boolean sendSlaveInfo(Slave.SlaveInfo message) {
  	return client.sendCommand(35, message);
  }

  public boolean sendFsInfoReply(Filesystem.FSInfoReply message) {
  	return client.sendCommand(301, message);
  }

  public boolean sendFormatFsReply(Filesystem.FormatFSReply message) {
  	return client.sendCommand(302, message);
  }

  public boolean sendLsDirReply(Filesystem.LsDirReply message) {
  	return client.sendCommand(303, message);
  }

  public boolean sendFileInfoReply(Filesystem.FileInfoReply message) {
  	return client.sendCommand(304, message);
  }

  public boolean sendDelFileReply(Filesystem.DelFileReply message) {
  	return client.sendCommand(305, message);
  }

  public boolean sendReadFileReply(Filesystem.ReadFileReply message) {
  	return client.sendCommand(306, message);
  }

  public boolean sendWriteFileReply(Filesystem.WriteFileReply message) {
  	return client.sendCommand(307, message);
  }

  public boolean sendCalcMd5Reply(Filesystem.CalcMD5Reply message) {
  	return client.sendCommand(308, message);
  }

  public boolean sendStatFromPtrk(PTRKMilitary.StatFromPTRK message) {
  	return client.sendCommand(501, message);
  }

  public boolean sendPtrkSettings(PTRKMilitary.PTRKSettings message) {
  	return client.sendCommand(502, message);
  }

  public boolean sendReloadPtrk(PTRKMilitary.ReloadPtrk message) {
  	return client.sendCommand(503, message);
  }

  public boolean sendLaunchingRocket() {
  	return client.sendCommand(504, null);
  }

  public boolean sendStatusFlightRocket(PTRKMilitary.StatusFlightRocket message) {
  	return client.sendCommand(505, message);
  }

  public boolean sendStatusEndFlightRocket(PTRKMilitary.StatusEndFlightRocket message) {
  	return client.sendCommand(506, message);
  }

  public boolean sendSettingsTarget(TargetMilitary.SettingsTarget message) {
  	return client.sendCommand(601, message);
  }

  public boolean sendStatisticsTarget(TargetMilitary.StatisticsTarget message) {
  	return client.sendCommand(602, message);
  }

  public boolean sendPositionOfTarget(TargetMilitary.PositionOfTarget message) {
  	return client.sendCommand(603, message);
  }

  public boolean sendErrorsOfTarget(TargetMilitary.ErrorsOfTarget message) {
  	return client.sendCommand(604, message);
  }

  public boolean sendSettingsPanzer(PanzerMilitary.SettingsPanzer message) {
  	return client.sendCommand(651, message);
  }

  public boolean sendStatisticsPanzerGun(PanzerMilitary.StatisticsPanzerGun message) {
  	return client.sendCommand(652, message);
  }

  public boolean sendStatisticsPanzerCannon(PanzerMilitary.StatisticsPanzerCannon message) {
  	return client.sendCommand(653, message);
  }

  public boolean sendStopMovingCart() {
  	return client.sendCommand(701, null);
  }

  public boolean sendMineThrowerStat(MineThrower.MineThrowerStat message) {
  	return client.sendCommand(801, message);
  }

  public boolean sendVersionReply(Firmware.VersionReply message) {
  	return client.sendCommand(1101, message);
  }

  public boolean sendUpdateResourcesReply(Firmware.UpdateResourcesReply message) {
  	return client.sendCommand(1103, message);
  }

  public boolean sendFirmwareTaskReply(Firmware.FirmwareTaskReply message) {
  	return client.sendCommand(1104, message);
  }

  public boolean sendEspWiFiRssi(EspSrv.ESP_WiFiRSSI message) {
  	return client.sendCommand(2001, message);
  }

  public boolean sendEspAssert(EspSrv.ESP_Assert message) {
  	return client.sendCommand(2002, message);
  }

  public boolean sendEspVersionReply(EspSrv.ESP_VersionReply message) {
  	return client.sendCommand(2003, message);
  }

  public boolean sendEspFirmwareTaskReply(EspSrv.ESP_FirmwareTaskReply message) {
  	return client.sendCommand(2004, message);
  }

  public boolean sendEspUpdateResourcesReply(EspSrv.ESP_UpdateResourcesReply message) {
  	return client.sendCommand(2005, message);
  }

  public boolean sendEspSomeData(EspSrv.ESP_SomeData message) {
  	return client.sendCommand(2006, message);
  }

  public boolean sendEspRuntimeError(EspSrv.ESP_RuntimeError message) {
  	return client.sendCommand(2007, message);
  }

  public boolean sendBatteryLevel(CommonMilitary.BatteryLevel message) {
  	return client.sendCommand(10001, message);
  }

  public boolean sendGpsCoordinate(CommonMilitary.GPSCoordinate message) {
  	return client.sendCommand(10002, message);
  }

  public boolean sendSetTypeExercise(CommonMilitary.SetTypeExercise message) {
  	return client.sendCommand(10003, message);
  }

  public boolean sendSpatialPosition(CommonMilitary.SpatialPosition message) {
  	return client.sendCommand(10004, message);
  }

  public boolean sendStatById(KitMilitary.StatById message) {
  	return client.sendCommand(10201, message);
  }

  public boolean sendStatByIdRepeated(KitMilitary.StatByIdRepeated message) {
  	return client.sendCommand(10202, message);
  }

  public boolean sendSlaveBatteryLevel(KitMilitary.SlaveBatteryLevel message) {
  	return client.sendCommand(10203, message);
  }

  public boolean sendStatFromKit(KitMilitary.StatFromKit message) {
  	return client.sendCommand(10204, message);
  }

  public boolean sendWeaponStat(KitMilitary.WeaponStat message) {
  	return client.sendCommand(10205, message);
  }

  public boolean sendKitSettings(KitMilitary.KitSettings message) {
  	return client.sendCommand(10206, message);
  }

  public boolean sendStressBeltSettings(KitMilitary.StressBeltSettings message) {
  	return client.sendCommand(10207, message);
  }

  public boolean sendWeaponSettings(KitMilitary.WeaponSettings message) {
  	return client.sendCommand(10208, message);
  }

  public boolean sendStatisticIsOver() {
  	return client.sendCommand(10209, null);
  }

  public boolean sendTankMineActivated(KitMilitary.TankMineActivated message) {
  	return client.sendCommand(10210, message);
  }

  public boolean sendTankMineDeactivated(KitMilitary.TankMineDeactivated message) {
  	return client.sendCommand(10211, message);
  }

  public boolean sendInfoActivatedMinesIsOver() {
  	return client.sendCommand(10212, null);
  }

  public boolean sendInfoDeactivatedMinesIsOver() {
  	return client.sendCommand(10213, null);
  }

  public boolean sendInfoFromHingedBlock(KitMilitary.InfoFromHingedBlock message) {
  	return client.sendCommand(10214, message);
  }

  public boolean sendIrEmitterSettings(KitMilitary.IrEmitterSettings message) {
  	return client.sendCommand(10215, message);
  }

  public boolean sendIrEmitterStatistic(KitMilitary.IrEmitterStatistic message) {
  	return client.sendCommand(10216, message);
  }

  public boolean sendSetTypeVehicle(KitMilitary.SetTypeVehicle message) {
  	return client.sendCommand(10217, message);
  }

  public boolean sendMinesActivated(KitMilitary.MinesActivated message) {
  	return client.sendCommand(10218, message);
  }

  public boolean sendMinesDeactivated(KitMilitary.MinesDeactivated message) {
  	return client.sendCommand(10219, message);
  }

  public boolean sendResponseQuantityBlocksPos(KitMilitary.ResponseQuantityBlocksPos message) {
  	return client.sendCommand(10220, message);
  }

  public boolean sendResponseBlockByTimePos(KitMilitary.ResponseBlockByTimePos message) {
  	return client.sendCommand(10221, message);
  }

  public boolean sendIrCommutatorId(KitMilitary.IrCommutatorID message) {
  	return client.sendCommand(10222, message);
  }

  public boolean sendPzrkEvent(PZRKMilitary.PzrkEvent message) {
  	return client.sendCommand(10501, message);
  }

  public boolean sendPzrkEventsIsOver() {
  	return client.sendCommand(10502, null);
  }

  public boolean sendPzrkSetting(PZRKMilitary.PzrkSetting message) {
  	return client.sendCommand(10503, message);
  }

  public boolean sendGpsInfoOfTargetPzrk(PZRKMilitary.GpsInfoOfTargetPzrk message) {
  	return client.sendCommand(10504, message);
  }

  public boolean sendTargetPzrkConnected(PZRKMilitary.TargetPzrkConnected message) {
  	return client.sendCommand(10505, message);
  }

  public boolean sendTargetPzrkDisconnected(PZRKMilitary.TargetPzrkDisconnected message) {
  	return client.sendCommand(10506, message);
  }

  public boolean sendSettingAntiSniper(AntiSniper.SettingAntiSniper message) {
  	return client.sendCommand(10601, message);
  }

  public boolean sendCommand(AntiSniper.Command message) {
  	return client.sendCommand(10602, message);
  }

  public boolean sendAntiSniperError(AntiSniper.AntiSniperError message) {
  	return client.sendCommand(10603, message);
  }

  public boolean sendAntisniperOperationType(AntiSniper.AntisniperOperationType message) {
  	return client.sendCommand(10604, message);
  }

  public void diconnect() {
    client.disconnect();
  }

  public ProtoClient getClient() {
    return client;
  }

  // Listeners interfaces for incoming messages

  public interface OnStartGameListener {
    void onStartGameReceived(Base.StartGame message);
  }

  public interface OnStopGameListener {
    void onStopGameReceived();
  }

  public interface OnPauseGameListener {
    void onPauseGameReceived();
  }

  public interface OnChangeIdListener {
    void onChangeIdReceived(Base.ChangeId message);
  }

  public interface OnSetVolumeListener {
    void onSetVolumeReceived(Multimedia.SetVolume message);
  }

  public interface OnPingListener {
    void onPingReceived();
  }

  public interface OnUpdateDevListener {
    void onUpdateDevReceived();
  }

  public interface OnSetLanguageListener {
    void onSetLanguageReceived(Base.setLanguage message);
  }

  public interface OnPlaySoundListener {
    void onPlaySoundReceived(Multimedia.PlaySound message);
  }

  public interface OnStopSoundListener {
    void onStopSoundReceived(Multimedia.StopSound message);
  }

  public interface OnGetSoundsInfoListener {
    void onGetSoundsInfoReceived();
  }

  public interface OnSendDevTypeListener {
    void onSendDevTypeReceived(Base.SendDevType message);
  }

  public interface OnTurnOffDeviceListener {
    void onTurnOffDeviceReceived();
  }

  public interface OnGetInfoSlavesListener {
    void onGetInfoSlavesReceived();
  }

  public interface OnFsInfoListener {
    void onFsInfoReceived();
  }

  public interface OnFormatFsListener {
    void onFormatFsReceived();
  }

  public interface OnLsDirListener {
    void onLsDirReceived(Filesystem.LsDir message);
  }

  public interface OnFileInfoListener {
    void onFileInfoReceived(Filesystem.FileInfo message);
  }

  public interface OnDelFileListener {
    void onDelFileReceived(Filesystem.DelFile message);
  }

  public interface OnReadFileListener {
    void onReadFileReceived(Filesystem.ReadFile message);
  }

  public interface OnWriteFileListener {
    void onWriteFileReceived(Filesystem.WriteFile message);
  }

  public interface OnCalcMd5Listener {
    void onCalcMd5Received(Filesystem.CalcMD5 message);
  }

  public interface OnStatFromPtrkListener {
    void onStatFromPtrkReceived(PTRKMilitary.StatFromPTRK message);
  }

  public interface OnPtrkSettingsListener {
    void onPtrkSettingsReceived(PTRKMilitary.PTRKSettings message);
  }

  public interface OnReloadPtrkListener {
    void onReloadPtrkReceived(PTRKMilitary.ReloadPtrk message);
  }

  public interface OnSettingsTargetListener {
    void onSettingsTargetReceived(TargetMilitary.SettingsTarget message);
  }

  public interface OnShowTargetListener {
    void onShowTargetReceived();
  }

  public interface OnHideTargetListener {
    void onHideTargetReceived();
  }

  public interface OnStatisticsTargetListener {
    void onStatisticsTargetReceived(TargetMilitary.StatisticsTarget message);
  }

  public interface OnResetErrorListener {
    void onResetErrorReceived(TargetMilitary.ResetError message);
  }

  public interface OnSettingsPanzerListener {
    void onSettingsPanzerReceived(PanzerMilitary.SettingsPanzer message);
  }

  public interface OnStatisticsPanzerGunListener {
    void onStatisticsPanzerGunReceived(PanzerMilitary.StatisticsPanzerGun message);
  }

  public interface OnStatisticsPanzerCannonListener {
    void onStatisticsPanzerCannonReceived(PanzerMilitary.StatisticsPanzerCannon message);
  }

  public interface OnGetStatisticsPanzerGunListener {
    void onGetStatisticsPanzerGunReceived();
  }

  public interface OnGetStatisticsPanzerCannonListener {
    void onGetStatisticsPanzerCannonReceived();
  }

  public interface OnGetSettingsPanzerListener {
    void onGetSettingsPanzerReceived();
  }

  public interface OnMovingCartForwardDirectionListener {
    void onMovingCartForwardDirectionReceived();
  }

  public interface OnMovingCartReverseDirectionListener {
    void onMovingCartReverseDirectionReceived();
  }

  public interface OnStopMovingCartListener {
    void onStopMovingCartReceived();
  }

  public interface OnMineThrowerSettingsListener {
    void onMineThrowerSettingsReceived(MineThrower.MineThrowerSettings message);
  }

  public interface OnRebootListener {
    void onRebootReceived();
  }

  public interface OnVersionRequestListener {
    void onVersionRequestReceived();
  }

  public interface OnFirmwareTaskListener {
    void onFirmwareTaskReceived(Firmware.FirmwareTask message);
  }

  public interface OnBeginUpdateResourcesListener {
    void onBeginUpdateResourcesReceived();
  }

  public interface OnFinishUpdateResourcesListener {
    void onFinishUpdateResourcesReceived();
  }

  public interface OnEspRebootListener {
    void onEspRebootReceived();
  }

  public interface OnEspVersionRequestListener {
    void onEspVersionRequestReceived();
  }

  public interface OnEspFirmwareTaskListener {
    void onEspFirmwareTaskReceived(EspSrv.ESP_FirmwareTask message);
  }

  public interface OnEspSomeDataListener {
    void onEspSomeDataReceived(EspSrv.ESP_SomeData message);
  }

  public interface OnEspRuntimeErrorListener {
    void onEspRuntimeErrorReceived(EspSrv.ESP_RuntimeError message);
  }

  public interface OnEspBeginUpdateResourcesListener {
    void onEspBeginUpdateResourcesReceived();
  }

  public interface OnEspFinishUpdateResourcesListener {
    void onEspFinishUpdateResourcesReceived();
  }

  public interface OnGetBatteryLevelListener {
    void onGetBatteryLevelReceived();
  }

  public interface OnGetSettingsListener {
    void onGetSettingsReceived();
  }

  public interface OnChangeTeamListener {
    void onChangeTeamReceived(CommonMilitary.ChangeTeam message);
  }

  public interface OnKillPlayerListener {
    void onKillPlayerReceived(CommonMilitary.KillPlayer message);
  }

  public interface OnResetAllErrorsListener {
    void onResetAllErrorsReceived();
  }

  public interface OnSetTypeExerciseListener {
    void onSetTypeExerciseReceived(CommonMilitary.SetTypeExercise message);
  }

  public interface OnStatFromKitListener {
    void onStatFromKitReceived(KitMilitary.StatFromKit message);
  }

  public interface OnWeaponStatListener {
    void onWeaponStatReceived(KitMilitary.WeaponStat message);
  }

  public interface OnKitSettingsListener {
    void onKitSettingsReceived(KitMilitary.KitSettings message);
  }

  public interface OnStressBeltSettingsListener {
    void onStressBeltSettingsReceived(KitMilitary.StressBeltSettings message);
  }

  public interface OnWeaponSettingsListener {
    void onWeaponSettingsReceived(KitMilitary.WeaponSettings message);
  }

  public interface OnGetAllStatListener {
    void onGetAllStatReceived();
  }

  public interface OnSilentModeListener {
    void onSilentModeReceived(KitMilitary.SilentMode message);
  }

  public interface OnGetActivatedMinesListener {
    void onGetActivatedMinesReceived();
  }

  public interface OnGetDeactivatedMinesListener {
    void onGetDeactivatedMinesReceived();
  }

  public interface OnGetInfoFromHingedBlockListener {
    void onGetInfoFromHingedBlockReceived(KitMilitary.GetInfoFromHingedBlock message);
  }

  public interface OnIrEmitterSettingsListener {
    void onIrEmitterSettingsReceived(KitMilitary.IrEmitterSettings message);
  }

  public interface OnIrEmitterStatisticListener {
    void onIrEmitterStatisticReceived(KitMilitary.IrEmitterStatistic message);
  }

  public interface OnSetDamageAppropriateToWeaponListener {
    void onSetDamageAppropriateToWeaponReceived(KitMilitary.SetDamageAppropriateToWeapon message);
  }

  public interface OnSaveTableDamageListener {
    void onSaveTableDamageReceived();
  }

  public interface OnSetTypeVehicleListener {
    void onSetTypeVehicleReceived(KitMilitary.SetTypeVehicle message);
  }

  public interface OnGetQuantityBlocksPosListener {
    void onGetQuantityBlocksPosReceived(KitMilitary.GetQuantityBlocksPos message);
  }

  public interface OnGetBlockByTimePosListener {
    void onGetBlockByTimePosReceived(KitMilitary.GetBlockByTimePos message);
  }

  public interface OnDeleteBlocksPosListener {
    void onDeleteBlocksPosReceived(KitMilitary.DeleteBlocksPos message);
  }

  public interface OnGetAllEventsPzrkListener {
    void onGetAllEventsPzrkReceived();
  }

  public interface OnPzrkSettingListener {
    void onPzrkSettingReceived(PZRKMilitary.PzrkSetting message);
  }

  public interface OnSettingAntiSniperListener {
    void onSettingAntiSniperReceived(AntiSniper.SettingAntiSniper message);
  }

  public interface OnCommandListener {
    void onCommandReceived(AntiSniper.Command message);
  }

  public interface OnDefeatTargetListener {
    void onDefeatTargetReceived();
  }

  public interface OnAntisniperOperationTypeListener {
    void onAntisniperOperationTypeReceived(AntiSniper.AntisniperOperationType message);
  }

  public interface OnGetAntisniperOperationTypeListener {
    void onGetAntisniperOperationTypeReceived();
  }

  public interface OnConnectedListener {
    void onConnected();
  }

  public interface OnErrorListener {
    void onError(Throwable error);
  }

  public interface OnDisconnectedListener {
    void onDisconnected();
  }


  private volatile OnStartGameListener onStartGameListener = null;
  private volatile OnStopGameListener onStopGameListener = null;
  private volatile OnPauseGameListener onPauseGameListener = null;
  private volatile OnChangeIdListener onChangeIdListener = null;
  private volatile OnSetVolumeListener onSetVolumeListener = null;
  private volatile OnPingListener onPingListener = null;
  private volatile OnUpdateDevListener onUpdateDevListener = null;
  private volatile OnSetLanguageListener onSetLanguageListener = null;
  private volatile OnPlaySoundListener onPlaySoundListener = null;
  private volatile OnStopSoundListener onStopSoundListener = null;
  private volatile OnGetSoundsInfoListener onGetSoundsInfoListener = null;
  private volatile OnSendDevTypeListener onSendDevTypeListener = null;
  private volatile OnTurnOffDeviceListener onTurnOffDeviceListener = null;
  private volatile OnGetInfoSlavesListener onGetInfoSlavesListener = null;
  private volatile OnFsInfoListener onFsInfoListener = null;
  private volatile OnFormatFsListener onFormatFsListener = null;
  private volatile OnLsDirListener onLsDirListener = null;
  private volatile OnFileInfoListener onFileInfoListener = null;
  private volatile OnDelFileListener onDelFileListener = null;
  private volatile OnReadFileListener onReadFileListener = null;
  private volatile OnWriteFileListener onWriteFileListener = null;
  private volatile OnCalcMd5Listener onCalcMd5Listener = null;
  private volatile OnStatFromPtrkListener onStatFromPtrkListener = null;
  private volatile OnPtrkSettingsListener onPtrkSettingsListener = null;
  private volatile OnReloadPtrkListener onReloadPtrkListener = null;
  private volatile OnSettingsTargetListener onSettingsTargetListener = null;
  private volatile OnShowTargetListener onShowTargetListener = null;
  private volatile OnHideTargetListener onHideTargetListener = null;
  private volatile OnStatisticsTargetListener onStatisticsTargetListener = null;
  private volatile OnResetErrorListener onResetErrorListener = null;
  private volatile OnSettingsPanzerListener onSettingsPanzerListener = null;
  private volatile OnStatisticsPanzerGunListener onStatisticsPanzerGunListener = null;
  private volatile OnStatisticsPanzerCannonListener onStatisticsPanzerCannonListener = null;
  private volatile OnGetStatisticsPanzerGunListener onGetStatisticsPanzerGunListener = null;
  private volatile OnGetStatisticsPanzerCannonListener onGetStatisticsPanzerCannonListener = null;
  private volatile OnGetSettingsPanzerListener onGetSettingsPanzerListener = null;
  private volatile OnMovingCartForwardDirectionListener onMovingCartForwardDirectionListener = null;
  private volatile OnMovingCartReverseDirectionListener onMovingCartReverseDirectionListener = null;
  private volatile OnStopMovingCartListener onStopMovingCartListener = null;
  private volatile OnMineThrowerSettingsListener onMineThrowerSettingsListener = null;
  private volatile OnRebootListener onRebootListener = null;
  private volatile OnVersionRequestListener onVersionRequestListener = null;
  private volatile OnFirmwareTaskListener onFirmwareTaskListener = null;
  private volatile OnBeginUpdateResourcesListener onBeginUpdateResourcesListener = null;
  private volatile OnFinishUpdateResourcesListener onFinishUpdateResourcesListener = null;
  private volatile OnEspRebootListener onEspRebootListener = null;
  private volatile OnEspVersionRequestListener onEspVersionRequestListener = null;
  private volatile OnEspFirmwareTaskListener onEspFirmwareTaskListener = null;
  private volatile OnEspSomeDataListener onEspSomeDataListener = null;
  private volatile OnEspRuntimeErrorListener onEspRuntimeErrorListener = null;
  private volatile OnEspBeginUpdateResourcesListener onEspBeginUpdateResourcesListener = null;
  private volatile OnEspFinishUpdateResourcesListener onEspFinishUpdateResourcesListener = null;
  private volatile OnGetBatteryLevelListener onGetBatteryLevelListener = null;
  private volatile OnGetSettingsListener onGetSettingsListener = null;
  private volatile OnChangeTeamListener onChangeTeamListener = null;
  private volatile OnKillPlayerListener onKillPlayerListener = null;
  private volatile OnResetAllErrorsListener onResetAllErrorsListener = null;
  private volatile OnSetTypeExerciseListener onSetTypeExerciseListener = null;
  private volatile OnStatFromKitListener onStatFromKitListener = null;
  private volatile OnWeaponStatListener onWeaponStatListener = null;
  private volatile OnKitSettingsListener onKitSettingsListener = null;
  private volatile OnStressBeltSettingsListener onStressBeltSettingsListener = null;
  private volatile OnWeaponSettingsListener onWeaponSettingsListener = null;
  private volatile OnGetAllStatListener onGetAllStatListener = null;
  private volatile OnSilentModeListener onSilentModeListener = null;
  private volatile OnGetActivatedMinesListener onGetActivatedMinesListener = null;
  private volatile OnGetDeactivatedMinesListener onGetDeactivatedMinesListener = null;
  private volatile OnGetInfoFromHingedBlockListener onGetInfoFromHingedBlockListener = null;
  private volatile OnIrEmitterSettingsListener onIrEmitterSettingsListener = null;
  private volatile OnIrEmitterStatisticListener onIrEmitterStatisticListener = null;
  private volatile OnSetDamageAppropriateToWeaponListener onSetDamageAppropriateToWeaponListener = null;
  private volatile OnSaveTableDamageListener onSaveTableDamageListener = null;
  private volatile OnSetTypeVehicleListener onSetTypeVehicleListener = null;
  private volatile OnGetQuantityBlocksPosListener onGetQuantityBlocksPosListener = null;
  private volatile OnGetBlockByTimePosListener onGetBlockByTimePosListener = null;
  private volatile OnDeleteBlocksPosListener onDeleteBlocksPosListener = null;
  private volatile OnGetAllEventsPzrkListener onGetAllEventsPzrkListener = null;
  private volatile OnPzrkSettingListener onPzrkSettingListener = null;
  private volatile OnSettingAntiSniperListener onSettingAntiSniperListener = null;
  private volatile OnCommandListener onCommandListener = null;
  private volatile OnDefeatTargetListener onDefeatTargetListener = null;
  private volatile OnAntisniperOperationTypeListener onAntisniperOperationTypeListener = null;
  private volatile OnGetAntisniperOperationTypeListener onGetAntisniperOperationTypeListener = null;
  private volatile OnConnectedListener onConnectedListener = null;
  private volatile OnErrorListener onErrorListener = null;
  private volatile OnDisconnectedListener onDisconnectedListener = null;

  private void notifyStartGameReceived(Base.StartGame message) {
    OnStartGameListener localCopy = onStartGameListener;
    if (localCopy != null)
      localCopy.onStartGameReceived(message);
  }

  private void notifyStopGameReceived() {
    OnStopGameListener localCopy = onStopGameListener;
    if (localCopy != null)
      localCopy.onStopGameReceived();
  }

  private void notifyPauseGameReceived() {
    OnPauseGameListener localCopy = onPauseGameListener;
    if (localCopy != null)
      localCopy.onPauseGameReceived();
  }

  private void notifyChangeIdReceived(Base.ChangeId message) {
    OnChangeIdListener localCopy = onChangeIdListener;
    if (localCopy != null)
      localCopy.onChangeIdReceived(message);
  }

  private void notifySetVolumeReceived(Multimedia.SetVolume message) {
    OnSetVolumeListener localCopy = onSetVolumeListener;
    if (localCopy != null)
      localCopy.onSetVolumeReceived(message);
  }

  private void notifyPingReceived() {
    OnPingListener localCopy = onPingListener;
    if (localCopy != null)
      localCopy.onPingReceived();
  }

  private void notifyUpdateDevReceived() {
    OnUpdateDevListener localCopy = onUpdateDevListener;
    if (localCopy != null)
      localCopy.onUpdateDevReceived();
  }

  private void notifySetLanguageReceived(Base.setLanguage message) {
    OnSetLanguageListener localCopy = onSetLanguageListener;
    if (localCopy != null)
      localCopy.onSetLanguageReceived(message);
  }

  private void notifyPlaySoundReceived(Multimedia.PlaySound message) {
    OnPlaySoundListener localCopy = onPlaySoundListener;
    if (localCopy != null)
      localCopy.onPlaySoundReceived(message);
  }

  private void notifyStopSoundReceived(Multimedia.StopSound message) {
    OnStopSoundListener localCopy = onStopSoundListener;
    if (localCopy != null)
      localCopy.onStopSoundReceived(message);
  }

  private void notifyGetSoundsInfoReceived() {
    OnGetSoundsInfoListener localCopy = onGetSoundsInfoListener;
    if (localCopy != null)
      localCopy.onGetSoundsInfoReceived();
  }

  private void notifySendDevTypeReceived(Base.SendDevType message) {
    OnSendDevTypeListener localCopy = onSendDevTypeListener;
    if (localCopy != null)
      localCopy.onSendDevTypeReceived(message);
  }

  private void notifyTurnOffDeviceReceived() {
    OnTurnOffDeviceListener localCopy = onTurnOffDeviceListener;
    if (localCopy != null)
      localCopy.onTurnOffDeviceReceived();
  }

  private void notifyGetInfoSlavesReceived() {
    OnGetInfoSlavesListener localCopy = onGetInfoSlavesListener;
    if (localCopy != null)
      localCopy.onGetInfoSlavesReceived();
  }

  private void notifyFsInfoReceived() {
    OnFsInfoListener localCopy = onFsInfoListener;
    if (localCopy != null)
      localCopy.onFsInfoReceived();
  }

  private void notifyFormatFsReceived() {
    OnFormatFsListener localCopy = onFormatFsListener;
    if (localCopy != null)
      localCopy.onFormatFsReceived();
  }

  private void notifyLsDirReceived(Filesystem.LsDir message) {
    OnLsDirListener localCopy = onLsDirListener;
    if (localCopy != null)
      localCopy.onLsDirReceived(message);
  }

  private void notifyFileInfoReceived(Filesystem.FileInfo message) {
    OnFileInfoListener localCopy = onFileInfoListener;
    if (localCopy != null)
      localCopy.onFileInfoReceived(message);
  }

  private void notifyDelFileReceived(Filesystem.DelFile message) {
    OnDelFileListener localCopy = onDelFileListener;
    if (localCopy != null)
      localCopy.onDelFileReceived(message);
  }

  private void notifyReadFileReceived(Filesystem.ReadFile message) {
    OnReadFileListener localCopy = onReadFileListener;
    if (localCopy != null)
      localCopy.onReadFileReceived(message);
  }

  private void notifyWriteFileReceived(Filesystem.WriteFile message) {
    OnWriteFileListener localCopy = onWriteFileListener;
    if (localCopy != null)
      localCopy.onWriteFileReceived(message);
  }

  private void notifyCalcMd5Received(Filesystem.CalcMD5 message) {
    OnCalcMd5Listener localCopy = onCalcMd5Listener;
    if (localCopy != null)
      localCopy.onCalcMd5Received(message);
  }

  private void notifyStatFromPtrkReceived(PTRKMilitary.StatFromPTRK message) {
    OnStatFromPtrkListener localCopy = onStatFromPtrkListener;
    if (localCopy != null)
      localCopy.onStatFromPtrkReceived(message);
  }

  private void notifyPtrkSettingsReceived(PTRKMilitary.PTRKSettings message) {
    OnPtrkSettingsListener localCopy = onPtrkSettingsListener;
    if (localCopy != null)
      localCopy.onPtrkSettingsReceived(message);
  }

  private void notifyReloadPtrkReceived(PTRKMilitary.ReloadPtrk message) {
    OnReloadPtrkListener localCopy = onReloadPtrkListener;
    if (localCopy != null)
      localCopy.onReloadPtrkReceived(message);
  }

  private void notifySettingsTargetReceived(TargetMilitary.SettingsTarget message) {
    OnSettingsTargetListener localCopy = onSettingsTargetListener;
    if (localCopy != null)
      localCopy.onSettingsTargetReceived(message);
  }

  private void notifyShowTargetReceived() {
    OnShowTargetListener localCopy = onShowTargetListener;
    if (localCopy != null)
      localCopy.onShowTargetReceived();
  }

  private void notifyHideTargetReceived() {
    OnHideTargetListener localCopy = onHideTargetListener;
    if (localCopy != null)
      localCopy.onHideTargetReceived();
  }

  private void notifyStatisticsTargetReceived(TargetMilitary.StatisticsTarget message) {
    OnStatisticsTargetListener localCopy = onStatisticsTargetListener;
    if (localCopy != null)
      localCopy.onStatisticsTargetReceived(message);
  }

  private void notifyResetErrorReceived(TargetMilitary.ResetError message) {
    OnResetErrorListener localCopy = onResetErrorListener;
    if (localCopy != null)
      localCopy.onResetErrorReceived(message);
  }

  private void notifySettingsPanzerReceived(PanzerMilitary.SettingsPanzer message) {
    OnSettingsPanzerListener localCopy = onSettingsPanzerListener;
    if (localCopy != null)
      localCopy.onSettingsPanzerReceived(message);
  }

  private void notifyStatisticsPanzerGunReceived(PanzerMilitary.StatisticsPanzerGun message) {
    OnStatisticsPanzerGunListener localCopy = onStatisticsPanzerGunListener;
    if (localCopy != null)
      localCopy.onStatisticsPanzerGunReceived(message);
  }

  private void notifyStatisticsPanzerCannonReceived(PanzerMilitary.StatisticsPanzerCannon message) {
    OnStatisticsPanzerCannonListener localCopy = onStatisticsPanzerCannonListener;
    if (localCopy != null)
      localCopy.onStatisticsPanzerCannonReceived(message);
  }

  private void notifyGetStatisticsPanzerGunReceived() {
    OnGetStatisticsPanzerGunListener localCopy = onGetStatisticsPanzerGunListener;
    if (localCopy != null)
      localCopy.onGetStatisticsPanzerGunReceived();
  }

  private void notifyGetStatisticsPanzerCannonReceived() {
    OnGetStatisticsPanzerCannonListener localCopy = onGetStatisticsPanzerCannonListener;
    if (localCopy != null)
      localCopy.onGetStatisticsPanzerCannonReceived();
  }

  private void notifyGetSettingsPanzerReceived() {
    OnGetSettingsPanzerListener localCopy = onGetSettingsPanzerListener;
    if (localCopy != null)
      localCopy.onGetSettingsPanzerReceived();
  }

  private void notifyMovingCartForwardDirectionReceived() {
    OnMovingCartForwardDirectionListener localCopy = onMovingCartForwardDirectionListener;
    if (localCopy != null)
      localCopy.onMovingCartForwardDirectionReceived();
  }

  private void notifyMovingCartReverseDirectionReceived() {
    OnMovingCartReverseDirectionListener localCopy = onMovingCartReverseDirectionListener;
    if (localCopy != null)
      localCopy.onMovingCartReverseDirectionReceived();
  }

  private void notifyStopMovingCartReceived() {
    OnStopMovingCartListener localCopy = onStopMovingCartListener;
    if (localCopy != null)
      localCopy.onStopMovingCartReceived();
  }

  private void notifyMineThrowerSettingsReceived(MineThrower.MineThrowerSettings message) {
    OnMineThrowerSettingsListener localCopy = onMineThrowerSettingsListener;
    if (localCopy != null)
      localCopy.onMineThrowerSettingsReceived(message);
  }

  private void notifyRebootReceived() {
    OnRebootListener localCopy = onRebootListener;
    if (localCopy != null)
      localCopy.onRebootReceived();
  }

  private void notifyVersionRequestReceived() {
    OnVersionRequestListener localCopy = onVersionRequestListener;
    if (localCopy != null)
      localCopy.onVersionRequestReceived();
  }

  private void notifyFirmwareTaskReceived(Firmware.FirmwareTask message) {
    OnFirmwareTaskListener localCopy = onFirmwareTaskListener;
    if (localCopy != null)
      localCopy.onFirmwareTaskReceived(message);
  }

  private void notifyBeginUpdateResourcesReceived() {
    OnBeginUpdateResourcesListener localCopy = onBeginUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onBeginUpdateResourcesReceived();
  }

  private void notifyFinishUpdateResourcesReceived() {
    OnFinishUpdateResourcesListener localCopy = onFinishUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onFinishUpdateResourcesReceived();
  }

  private void notifyEspRebootReceived() {
    OnEspRebootListener localCopy = onEspRebootListener;
    if (localCopy != null)
      localCopy.onEspRebootReceived();
  }

  private void notifyEspVersionRequestReceived() {
    OnEspVersionRequestListener localCopy = onEspVersionRequestListener;
    if (localCopy != null)
      localCopy.onEspVersionRequestReceived();
  }

  private void notifyEspFirmwareTaskReceived(EspSrv.ESP_FirmwareTask message) {
    OnEspFirmwareTaskListener localCopy = onEspFirmwareTaskListener;
    if (localCopy != null)
      localCopy.onEspFirmwareTaskReceived(message);
  }

  private void notifyEspSomeDataReceived(EspSrv.ESP_SomeData message) {
    OnEspSomeDataListener localCopy = onEspSomeDataListener;
    if (localCopy != null)
      localCopy.onEspSomeDataReceived(message);
  }

  private void notifyEspRuntimeErrorReceived(EspSrv.ESP_RuntimeError message) {
    OnEspRuntimeErrorListener localCopy = onEspRuntimeErrorListener;
    if (localCopy != null)
      localCopy.onEspRuntimeErrorReceived(message);
  }

  private void notifyEspBeginUpdateResourcesReceived() {
    OnEspBeginUpdateResourcesListener localCopy = onEspBeginUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onEspBeginUpdateResourcesReceived();
  }

  private void notifyEspFinishUpdateResourcesReceived() {
    OnEspFinishUpdateResourcesListener localCopy = onEspFinishUpdateResourcesListener;
    if (localCopy != null)
      localCopy.onEspFinishUpdateResourcesReceived();
  }

  private void notifyGetBatteryLevelReceived() {
    OnGetBatteryLevelListener localCopy = onGetBatteryLevelListener;
    if (localCopy != null)
      localCopy.onGetBatteryLevelReceived();
  }

  private void notifyGetSettingsReceived() {
    OnGetSettingsListener localCopy = onGetSettingsListener;
    if (localCopy != null)
      localCopy.onGetSettingsReceived();
  }

  private void notifyChangeTeamReceived(CommonMilitary.ChangeTeam message) {
    OnChangeTeamListener localCopy = onChangeTeamListener;
    if (localCopy != null)
      localCopy.onChangeTeamReceived(message);
  }

  private void notifyKillPlayerReceived(CommonMilitary.KillPlayer message) {
    OnKillPlayerListener localCopy = onKillPlayerListener;
    if (localCopy != null)
      localCopy.onKillPlayerReceived(message);
  }

  private void notifyResetAllErrorsReceived() {
    OnResetAllErrorsListener localCopy = onResetAllErrorsListener;
    if (localCopy != null)
      localCopy.onResetAllErrorsReceived();
  }

  private void notifySetTypeExerciseReceived(CommonMilitary.SetTypeExercise message) {
    OnSetTypeExerciseListener localCopy = onSetTypeExerciseListener;
    if (localCopy != null)
      localCopy.onSetTypeExerciseReceived(message);
  }

  private void notifyStatFromKitReceived(KitMilitary.StatFromKit message) {
    OnStatFromKitListener localCopy = onStatFromKitListener;
    if (localCopy != null)
      localCopy.onStatFromKitReceived(message);
  }

  private void notifyWeaponStatReceived(KitMilitary.WeaponStat message) {
    OnWeaponStatListener localCopy = onWeaponStatListener;
    if (localCopy != null)
      localCopy.onWeaponStatReceived(message);
  }

  private void notifyKitSettingsReceived(KitMilitary.KitSettings message) {
    OnKitSettingsListener localCopy = onKitSettingsListener;
    if (localCopy != null)
      localCopy.onKitSettingsReceived(message);
  }

  private void notifyStressBeltSettingsReceived(KitMilitary.StressBeltSettings message) {
    OnStressBeltSettingsListener localCopy = onStressBeltSettingsListener;
    if (localCopy != null)
      localCopy.onStressBeltSettingsReceived(message);
  }

  private void notifyWeaponSettingsReceived(KitMilitary.WeaponSettings message) {
    OnWeaponSettingsListener localCopy = onWeaponSettingsListener;
    if (localCopy != null)
      localCopy.onWeaponSettingsReceived(message);
  }

  private void notifyGetAllStatReceived() {
    OnGetAllStatListener localCopy = onGetAllStatListener;
    if (localCopy != null)
      localCopy.onGetAllStatReceived();
  }

  private void notifySilentModeReceived(KitMilitary.SilentMode message) {
    OnSilentModeListener localCopy = onSilentModeListener;
    if (localCopy != null)
      localCopy.onSilentModeReceived(message);
  }

  private void notifyGetActivatedMinesReceived() {
    OnGetActivatedMinesListener localCopy = onGetActivatedMinesListener;
    if (localCopy != null)
      localCopy.onGetActivatedMinesReceived();
  }

  private void notifyGetDeactivatedMinesReceived() {
    OnGetDeactivatedMinesListener localCopy = onGetDeactivatedMinesListener;
    if (localCopy != null)
      localCopy.onGetDeactivatedMinesReceived();
  }

  private void notifyGetInfoFromHingedBlockReceived(KitMilitary.GetInfoFromHingedBlock message) {
    OnGetInfoFromHingedBlockListener localCopy = onGetInfoFromHingedBlockListener;
    if (localCopy != null)
      localCopy.onGetInfoFromHingedBlockReceived(message);
  }

  private void notifyIrEmitterSettingsReceived(KitMilitary.IrEmitterSettings message) {
    OnIrEmitterSettingsListener localCopy = onIrEmitterSettingsListener;
    if (localCopy != null)
      localCopy.onIrEmitterSettingsReceived(message);
  }

  private void notifyIrEmitterStatisticReceived(KitMilitary.IrEmitterStatistic message) {
    OnIrEmitterStatisticListener localCopy = onIrEmitterStatisticListener;
    if (localCopy != null)
      localCopy.onIrEmitterStatisticReceived(message);
  }

  private void notifySetDamageAppropriateToWeaponReceived(KitMilitary.SetDamageAppropriateToWeapon message) {
    OnSetDamageAppropriateToWeaponListener localCopy = onSetDamageAppropriateToWeaponListener;
    if (localCopy != null)
      localCopy.onSetDamageAppropriateToWeaponReceived(message);
  }

  private void notifySaveTableDamageReceived() {
    OnSaveTableDamageListener localCopy = onSaveTableDamageListener;
    if (localCopy != null)
      localCopy.onSaveTableDamageReceived();
  }

  private void notifySetTypeVehicleReceived(KitMilitary.SetTypeVehicle message) {
    OnSetTypeVehicleListener localCopy = onSetTypeVehicleListener;
    if (localCopy != null)
      localCopy.onSetTypeVehicleReceived(message);
  }

  private void notifyGetQuantityBlocksPosReceived(KitMilitary.GetQuantityBlocksPos message) {
    OnGetQuantityBlocksPosListener localCopy = onGetQuantityBlocksPosListener;
    if (localCopy != null)
      localCopy.onGetQuantityBlocksPosReceived(message);
  }

  private void notifyGetBlockByTimePosReceived(KitMilitary.GetBlockByTimePos message) {
    OnGetBlockByTimePosListener localCopy = onGetBlockByTimePosListener;
    if (localCopy != null)
      localCopy.onGetBlockByTimePosReceived(message);
  }

  private void notifyDeleteBlocksPosReceived(KitMilitary.DeleteBlocksPos message) {
    OnDeleteBlocksPosListener localCopy = onDeleteBlocksPosListener;
    if (localCopy != null)
      localCopy.onDeleteBlocksPosReceived(message);
  }

  private void notifyGetAllEventsPzrkReceived() {
    OnGetAllEventsPzrkListener localCopy = onGetAllEventsPzrkListener;
    if (localCopy != null)
      localCopy.onGetAllEventsPzrkReceived();
  }

  private void notifyPzrkSettingReceived(PZRKMilitary.PzrkSetting message) {
    OnPzrkSettingListener localCopy = onPzrkSettingListener;
    if (localCopy != null)
      localCopy.onPzrkSettingReceived(message);
  }

  private void notifySettingAntiSniperReceived(AntiSniper.SettingAntiSniper message) {
    OnSettingAntiSniperListener localCopy = onSettingAntiSniperListener;
    if (localCopy != null)
      localCopy.onSettingAntiSniperReceived(message);
  }

  private void notifyCommandReceived(AntiSniper.Command message) {
    OnCommandListener localCopy = onCommandListener;
    if (localCopy != null)
      localCopy.onCommandReceived(message);
  }

  private void notifyDefeatTargetReceived() {
    OnDefeatTargetListener localCopy = onDefeatTargetListener;
    if (localCopy != null)
      localCopy.onDefeatTargetReceived();
  }

  private void notifyAntisniperOperationTypeReceived(AntiSniper.AntisniperOperationType message) {
    OnAntisniperOperationTypeListener localCopy = onAntisniperOperationTypeListener;
    if (localCopy != null)
      localCopy.onAntisniperOperationTypeReceived(message);
  }

  private void notifyGetAntisniperOperationTypeReceived() {
    OnGetAntisniperOperationTypeListener localCopy = onGetAntisniperOperationTypeListener;
    if (localCopy != null)
      localCopy.onGetAntisniperOperationTypeReceived();
  }


  @Override
  public void notifyOnConnected() {
    OnConnectedListener localCopy = this.onConnectedListener;
    if (localCopy != null)
      localCopy.onConnected();
  }

  @Override
  public void notifyOnError(Throwable error) {
    OnErrorListener localCopy = this.onErrorListener;
    if (localCopy != null)
      localCopy.onError(error);
  }

  @Override
  public void notifyOnDisconnected() {
    OnDisconnectedListener localCopy = this.onDisconnectedListener;
    if (localCopy != null)
      localCopy.onDisconnected();
  }


  public void setOnStartGameListener(OnStartGameListener listener)
  {
    onStartGameListener = listener;
  }

  public void setOnStopGameListener(OnStopGameListener listener)
  {
    onStopGameListener = listener;
  }

  public void setOnPauseGameListener(OnPauseGameListener listener)
  {
    onPauseGameListener = listener;
  }

  public void setOnChangeIdListener(OnChangeIdListener listener)
  {
    onChangeIdListener = listener;
  }

  public void setOnSetVolumeListener(OnSetVolumeListener listener)
  {
    onSetVolumeListener = listener;
  }

  public void setOnPingListener(OnPingListener listener)
  {
    onPingListener = listener;
  }

  public void setOnUpdateDevListener(OnUpdateDevListener listener)
  {
    onUpdateDevListener = listener;
  }

  public void setOnSetLanguageListener(OnSetLanguageListener listener)
  {
    onSetLanguageListener = listener;
  }

  public void setOnPlaySoundListener(OnPlaySoundListener listener)
  {
    onPlaySoundListener = listener;
  }

  public void setOnStopSoundListener(OnStopSoundListener listener)
  {
    onStopSoundListener = listener;
  }

  public void setOnGetSoundsInfoListener(OnGetSoundsInfoListener listener)
  {
    onGetSoundsInfoListener = listener;
  }

  public void setOnSendDevTypeListener(OnSendDevTypeListener listener)
  {
    onSendDevTypeListener = listener;
  }

  public void setOnTurnOffDeviceListener(OnTurnOffDeviceListener listener)
  {
    onTurnOffDeviceListener = listener;
  }

  public void setOnGetInfoSlavesListener(OnGetInfoSlavesListener listener)
  {
    onGetInfoSlavesListener = listener;
  }

  public void setOnFsInfoListener(OnFsInfoListener listener)
  {
    onFsInfoListener = listener;
  }

  public void setOnFormatFsListener(OnFormatFsListener listener)
  {
    onFormatFsListener = listener;
  }

  public void setOnLsDirListener(OnLsDirListener listener)
  {
    onLsDirListener = listener;
  }

  public void setOnFileInfoListener(OnFileInfoListener listener)
  {
    onFileInfoListener = listener;
  }

  public void setOnDelFileListener(OnDelFileListener listener)
  {
    onDelFileListener = listener;
  }

  public void setOnReadFileListener(OnReadFileListener listener)
  {
    onReadFileListener = listener;
  }

  public void setOnWriteFileListener(OnWriteFileListener listener)
  {
    onWriteFileListener = listener;
  }

  public void setOnCalcMd5Listener(OnCalcMd5Listener listener)
  {
    onCalcMd5Listener = listener;
  }

  public void setOnStatFromPtrkListener(OnStatFromPtrkListener listener)
  {
    onStatFromPtrkListener = listener;
  }

  public void setOnPtrkSettingsListener(OnPtrkSettingsListener listener)
  {
    onPtrkSettingsListener = listener;
  }

  public void setOnReloadPtrkListener(OnReloadPtrkListener listener)
  {
    onReloadPtrkListener = listener;
  }

  public void setOnSettingsTargetListener(OnSettingsTargetListener listener)
  {
    onSettingsTargetListener = listener;
  }

  public void setOnShowTargetListener(OnShowTargetListener listener)
  {
    onShowTargetListener = listener;
  }

  public void setOnHideTargetListener(OnHideTargetListener listener)
  {
    onHideTargetListener = listener;
  }

  public void setOnStatisticsTargetListener(OnStatisticsTargetListener listener)
  {
    onStatisticsTargetListener = listener;
  }

  public void setOnResetErrorListener(OnResetErrorListener listener)
  {
    onResetErrorListener = listener;
  }

  public void setOnSettingsPanzerListener(OnSettingsPanzerListener listener)
  {
    onSettingsPanzerListener = listener;
  }

  public void setOnStatisticsPanzerGunListener(OnStatisticsPanzerGunListener listener)
  {
    onStatisticsPanzerGunListener = listener;
  }

  public void setOnStatisticsPanzerCannonListener(OnStatisticsPanzerCannonListener listener)
  {
    onStatisticsPanzerCannonListener = listener;
  }

  public void setOnGetStatisticsPanzerGunListener(OnGetStatisticsPanzerGunListener listener)
  {
    onGetStatisticsPanzerGunListener = listener;
  }

  public void setOnGetStatisticsPanzerCannonListener(OnGetStatisticsPanzerCannonListener listener)
  {
    onGetStatisticsPanzerCannonListener = listener;
  }

  public void setOnGetSettingsPanzerListener(OnGetSettingsPanzerListener listener)
  {
    onGetSettingsPanzerListener = listener;
  }

  public void setOnMovingCartForwardDirectionListener(OnMovingCartForwardDirectionListener listener)
  {
    onMovingCartForwardDirectionListener = listener;
  }

  public void setOnMovingCartReverseDirectionListener(OnMovingCartReverseDirectionListener listener)
  {
    onMovingCartReverseDirectionListener = listener;
  }

  public void setOnStopMovingCartListener(OnStopMovingCartListener listener)
  {
    onStopMovingCartListener = listener;
  }

  public void setOnMineThrowerSettingsListener(OnMineThrowerSettingsListener listener)
  {
    onMineThrowerSettingsListener = listener;
  }

  public void setOnRebootListener(OnRebootListener listener)
  {
    onRebootListener = listener;
  }

  public void setOnVersionRequestListener(OnVersionRequestListener listener)
  {
    onVersionRequestListener = listener;
  }

  public void setOnFirmwareTaskListener(OnFirmwareTaskListener listener)
  {
    onFirmwareTaskListener = listener;
  }

  public void setOnBeginUpdateResourcesListener(OnBeginUpdateResourcesListener listener)
  {
    onBeginUpdateResourcesListener = listener;
  }

  public void setOnFinishUpdateResourcesListener(OnFinishUpdateResourcesListener listener)
  {
    onFinishUpdateResourcesListener = listener;
  }

  public void setOnEspRebootListener(OnEspRebootListener listener)
  {
    onEspRebootListener = listener;
  }

  public void setOnEspVersionRequestListener(OnEspVersionRequestListener listener)
  {
    onEspVersionRequestListener = listener;
  }

  public void setOnEspFirmwareTaskListener(OnEspFirmwareTaskListener listener)
  {
    onEspFirmwareTaskListener = listener;
  }

  public void setOnEspSomeDataListener(OnEspSomeDataListener listener)
  {
    onEspSomeDataListener = listener;
  }

  public void setOnEspRuntimeErrorListener(OnEspRuntimeErrorListener listener)
  {
    onEspRuntimeErrorListener = listener;
  }

  public void setOnEspBeginUpdateResourcesListener(OnEspBeginUpdateResourcesListener listener)
  {
    onEspBeginUpdateResourcesListener = listener;
  }

  public void setOnEspFinishUpdateResourcesListener(OnEspFinishUpdateResourcesListener listener)
  {
    onEspFinishUpdateResourcesListener = listener;
  }

  public void setOnGetBatteryLevelListener(OnGetBatteryLevelListener listener)
  {
    onGetBatteryLevelListener = listener;
  }

  public void setOnGetSettingsListener(OnGetSettingsListener listener)
  {
    onGetSettingsListener = listener;
  }

  public void setOnChangeTeamListener(OnChangeTeamListener listener)
  {
    onChangeTeamListener = listener;
  }

  public void setOnKillPlayerListener(OnKillPlayerListener listener)
  {
    onKillPlayerListener = listener;
  }

  public void setOnResetAllErrorsListener(OnResetAllErrorsListener listener)
  {
    onResetAllErrorsListener = listener;
  }

  public void setOnSetTypeExerciseListener(OnSetTypeExerciseListener listener)
  {
    onSetTypeExerciseListener = listener;
  }

  public void setOnStatFromKitListener(OnStatFromKitListener listener)
  {
    onStatFromKitListener = listener;
  }

  public void setOnWeaponStatListener(OnWeaponStatListener listener)
  {
    onWeaponStatListener = listener;
  }

  public void setOnKitSettingsListener(OnKitSettingsListener listener)
  {
    onKitSettingsListener = listener;
  }

  public void setOnStressBeltSettingsListener(OnStressBeltSettingsListener listener)
  {
    onStressBeltSettingsListener = listener;
  }

  public void setOnWeaponSettingsListener(OnWeaponSettingsListener listener)
  {
    onWeaponSettingsListener = listener;
  }

  public void setOnGetAllStatListener(OnGetAllStatListener listener)
  {
    onGetAllStatListener = listener;
  }

  public void setOnSilentModeListener(OnSilentModeListener listener)
  {
    onSilentModeListener = listener;
  }

  public void setOnGetActivatedMinesListener(OnGetActivatedMinesListener listener)
  {
    onGetActivatedMinesListener = listener;
  }

  public void setOnGetDeactivatedMinesListener(OnGetDeactivatedMinesListener listener)
  {
    onGetDeactivatedMinesListener = listener;
  }

  public void setOnGetInfoFromHingedBlockListener(OnGetInfoFromHingedBlockListener listener)
  {
    onGetInfoFromHingedBlockListener = listener;
  }

  public void setOnIrEmitterSettingsListener(OnIrEmitterSettingsListener listener)
  {
    onIrEmitterSettingsListener = listener;
  }

  public void setOnIrEmitterStatisticListener(OnIrEmitterStatisticListener listener)
  {
    onIrEmitterStatisticListener = listener;
  }

  public void setOnSetDamageAppropriateToWeaponListener(OnSetDamageAppropriateToWeaponListener listener)
  {
    onSetDamageAppropriateToWeaponListener = listener;
  }

  public void setOnSaveTableDamageListener(OnSaveTableDamageListener listener)
  {
    onSaveTableDamageListener = listener;
  }

  public void setOnSetTypeVehicleListener(OnSetTypeVehicleListener listener)
  {
    onSetTypeVehicleListener = listener;
  }

  public void setOnGetQuantityBlocksPosListener(OnGetQuantityBlocksPosListener listener)
  {
    onGetQuantityBlocksPosListener = listener;
  }

  public void setOnGetBlockByTimePosListener(OnGetBlockByTimePosListener listener)
  {
    onGetBlockByTimePosListener = listener;
  }

  public void setOnDeleteBlocksPosListener(OnDeleteBlocksPosListener listener)
  {
    onDeleteBlocksPosListener = listener;
  }

  public void setOnGetAllEventsPzrkListener(OnGetAllEventsPzrkListener listener)
  {
    onGetAllEventsPzrkListener = listener;
  }

  public void setOnPzrkSettingListener(OnPzrkSettingListener listener)
  {
    onPzrkSettingListener = listener;
  }

  public void setOnSettingAntiSniperListener(OnSettingAntiSniperListener listener)
  {
    onSettingAntiSniperListener = listener;
  }

  public void setOnCommandListener(OnCommandListener listener)
  {
    onCommandListener = listener;
  }

  public void setOnDefeatTargetListener(OnDefeatTargetListener listener)
  {
    onDefeatTargetListener = listener;
  }

  public void setOnAntisniperOperationTypeListener(OnAntisniperOperationTypeListener listener)
  {
    onAntisniperOperationTypeListener = listener;
  }

  public void setOnGetAntisniperOperationTypeListener(OnGetAntisniperOperationTypeListener listener)
  {
    onGetAntisniperOperationTypeListener = listener;
  }


  public void setOnConnectedListener(OnConnectedListener listener)
  {
    this.onConnectedListener = listener;
  }

  public void setOnErrorListener(OnErrorListener listener)
  {
    this.onErrorListener = listener;
  }

  public void setOnDisconnectedListener(OnDisconnectedListener listener)
  {
    this.onDisconnectedListener = listener;
  }


  @Override
  public Message parseMessage(int commandId, CodedInputStream inputStream) throws IOException {
    switch(commandId) {
    case 3: return Base.StartGame.parser().parsePartialFrom(inputStream);
    case 12: return Base.ChangeId.parser().parsePartialFrom(inputStream);
    case 14: return Multimedia.SetVolume.parser().parsePartialFrom(inputStream);
    case 26: return Base.setLanguage.parser().parsePartialFrom(inputStream);
    case 30: return Multimedia.PlaySound.parser().parsePartialFrom(inputStream);
    case 31: return Multimedia.StopSound.parser().parsePartialFrom(inputStream);
    case 34: return Base.SendDevType.parser().parsePartialFrom(inputStream);
    case 303: return Filesystem.LsDir.parser().parsePartialFrom(inputStream);
    case 304: return Filesystem.FileInfo.parser().parsePartialFrom(inputStream);
    case 305: return Filesystem.DelFile.parser().parsePartialFrom(inputStream);
    case 306: return Filesystem.ReadFile.parser().parsePartialFrom(inputStream);
    case 307: return Filesystem.WriteFile.parser().parsePartialFrom(inputStream);
    case 308: return Filesystem.CalcMD5.parser().parsePartialFrom(inputStream);
    case 501: return PTRKMilitary.StatFromPTRK.parser().parsePartialFrom(inputStream);
    case 502: return PTRKMilitary.PTRKSettings.parser().parsePartialFrom(inputStream);
    case 503: return PTRKMilitary.ReloadPtrk.parser().parsePartialFrom(inputStream);
    case 601: return TargetMilitary.SettingsTarget.parser().parsePartialFrom(inputStream);
    case 604: return TargetMilitary.StatisticsTarget.parser().parsePartialFrom(inputStream);
    case 605: return TargetMilitary.ResetError.parser().parsePartialFrom(inputStream);
    case 651: return PanzerMilitary.SettingsPanzer.parser().parsePartialFrom(inputStream);
    case 652: return PanzerMilitary.StatisticsPanzerGun.parser().parsePartialFrom(inputStream);
    case 653: return PanzerMilitary.StatisticsPanzerCannon.parser().parsePartialFrom(inputStream);
    case 801: return MineThrower.MineThrowerSettings.parser().parsePartialFrom(inputStream);
    case 1103: return Firmware.FirmwareTask.parser().parsePartialFrom(inputStream);
    case 2003: return EspSrv.ESP_FirmwareTask.parser().parsePartialFrom(inputStream);
    case 2005: return EspSrv.ESP_SomeData.parser().parsePartialFrom(inputStream);
    case 2006: return EspSrv.ESP_RuntimeError.parser().parsePartialFrom(inputStream);
    case 10003: return CommonMilitary.ChangeTeam.parser().parsePartialFrom(inputStream);
    case 10004: return CommonMilitary.KillPlayer.parser().parsePartialFrom(inputStream);
    case 10006: return CommonMilitary.SetTypeExercise.parser().parsePartialFrom(inputStream);
    case 10201: return KitMilitary.StatFromKit.parser().parsePartialFrom(inputStream);
    case 10202: return KitMilitary.WeaponStat.parser().parsePartialFrom(inputStream);
    case 10203: return KitMilitary.KitSettings.parser().parsePartialFrom(inputStream);
    case 10204: return KitMilitary.StressBeltSettings.parser().parsePartialFrom(inputStream);
    case 10205: return KitMilitary.WeaponSettings.parser().parsePartialFrom(inputStream);
    case 10207: return KitMilitary.SilentMode.parser().parsePartialFrom(inputStream);
    case 10210: return KitMilitary.GetInfoFromHingedBlock.parser().parsePartialFrom(inputStream);
    case 10211: return KitMilitary.IrEmitterSettings.parser().parsePartialFrom(inputStream);
    case 10212: return KitMilitary.IrEmitterStatistic.parser().parsePartialFrom(inputStream);
    case 10213: return KitMilitary.SetDamageAppropriateToWeapon.parser().parsePartialFrom(inputStream);
    case 10215: return KitMilitary.SetTypeVehicle.parser().parsePartialFrom(inputStream);
    case 10216: return KitMilitary.GetQuantityBlocksPos.parser().parsePartialFrom(inputStream);
    case 10217: return KitMilitary.GetBlockByTimePos.parser().parsePartialFrom(inputStream);
    case 10218: return KitMilitary.DeleteBlocksPos.parser().parsePartialFrom(inputStream);
    case 10502: return PZRKMilitary.PzrkSetting.parser().parsePartialFrom(inputStream);
    case 10601: return AntiSniper.SettingAntiSniper.parser().parsePartialFrom(inputStream);
    case 10602: return AntiSniper.Command.parser().parsePartialFrom(inputStream);
    case 10604: return AntiSniper.AntisniperOperationType.parser().parsePartialFrom(inputStream);
    default:
       return null;
    }
  }

  @Override
  public boolean dispatchMessage(int commandId, MessageLite message) {
    switch(commandId) {
    case 3: notifyStartGameReceived((Base.StartGame)message);
      return true;
    case 4: notifyStopGameReceived();
      return true;
    case 10: notifyPauseGameReceived();
      return true;
    case 12: notifyChangeIdReceived((Base.ChangeId)message);
      return true;
    case 14: notifySetVolumeReceived((Multimedia.SetVolume)message);
      return true;
    case 17: notifyPingReceived();
      return true;
    case 25: notifyUpdateDevReceived();
      return true;
    case 26: notifySetLanguageReceived((Base.setLanguage)message);
      return true;
    case 30: notifyPlaySoundReceived((Multimedia.PlaySound)message);
      return true;
    case 31: notifyStopSoundReceived((Multimedia.StopSound)message);
      return true;
    case 32: notifyGetSoundsInfoReceived();
      return true;
    case 34: notifySendDevTypeReceived((Base.SendDevType)message);
      return true;
    case 36: notifyTurnOffDeviceReceived();
      return true;
    case 37: notifyGetInfoSlavesReceived();
      return true;
    case 301: notifyFsInfoReceived();
      return true;
    case 302: notifyFormatFsReceived();
      return true;
    case 303: notifyLsDirReceived((Filesystem.LsDir)message);
      return true;
    case 304: notifyFileInfoReceived((Filesystem.FileInfo)message);
      return true;
    case 305: notifyDelFileReceived((Filesystem.DelFile)message);
      return true;
    case 306: notifyReadFileReceived((Filesystem.ReadFile)message);
      return true;
    case 307: notifyWriteFileReceived((Filesystem.WriteFile)message);
      return true;
    case 308: notifyCalcMd5Received((Filesystem.CalcMD5)message);
      return true;
    case 501: notifyStatFromPtrkReceived((PTRKMilitary.StatFromPTRK)message);
      return true;
    case 502: notifyPtrkSettingsReceived((PTRKMilitary.PTRKSettings)message);
      return true;
    case 503: notifyReloadPtrkReceived((PTRKMilitary.ReloadPtrk)message);
      return true;
    case 601: notifySettingsTargetReceived((TargetMilitary.SettingsTarget)message);
      return true;
    case 602: notifyShowTargetReceived();
      return true;
    case 603: notifyHideTargetReceived();
      return true;
    case 604: notifyStatisticsTargetReceived((TargetMilitary.StatisticsTarget)message);
      return true;
    case 605: notifyResetErrorReceived((TargetMilitary.ResetError)message);
      return true;
    case 651: notifySettingsPanzerReceived((PanzerMilitary.SettingsPanzer)message);
      return true;
    case 652: notifyStatisticsPanzerGunReceived((PanzerMilitary.StatisticsPanzerGun)message);
      return true;
    case 653: notifyStatisticsPanzerCannonReceived((PanzerMilitary.StatisticsPanzerCannon)message);
      return true;
    case 655: notifyGetStatisticsPanzerGunReceived();
      return true;
    case 656: notifyGetStatisticsPanzerCannonReceived();
      return true;
    case 657: notifyGetSettingsPanzerReceived();
      return true;
    case 701: notifyMovingCartForwardDirectionReceived();
      return true;
    case 702: notifyMovingCartReverseDirectionReceived();
      return true;
    case 703: notifyStopMovingCartReceived();
      return true;
    case 801: notifyMineThrowerSettingsReceived((MineThrower.MineThrowerSettings)message);
      return true;
    case 1101: notifyRebootReceived();
      return true;
    case 1102: notifyVersionRequestReceived();
      return true;
    case 1103: notifyFirmwareTaskReceived((Firmware.FirmwareTask)message);
      return true;
    case 1104: notifyBeginUpdateResourcesReceived();
      return true;
    case 1105: notifyFinishUpdateResourcesReceived();
      return true;
    case 2001: notifyEspRebootReceived();
      return true;
    case 2002: notifyEspVersionRequestReceived();
      return true;
    case 2003: notifyEspFirmwareTaskReceived((EspSrv.ESP_FirmwareTask)message);
      return true;
    case 2005: notifyEspSomeDataReceived((EspSrv.ESP_SomeData)message);
      return true;
    case 2006: notifyEspRuntimeErrorReceived((EspSrv.ESP_RuntimeError)message);
      return true;
    case 2007: notifyEspBeginUpdateResourcesReceived();
      return true;
    case 2008: notifyEspFinishUpdateResourcesReceived();
      return true;
    case 10001: notifyGetBatteryLevelReceived();
      return true;
    case 10002: notifyGetSettingsReceived();
      return true;
    case 10003: notifyChangeTeamReceived((CommonMilitary.ChangeTeam)message);
      return true;
    case 10004: notifyKillPlayerReceived((CommonMilitary.KillPlayer)message);
      return true;
    case 10005: notifyResetAllErrorsReceived();
      return true;
    case 10006: notifySetTypeExerciseReceived((CommonMilitary.SetTypeExercise)message);
      return true;
    case 10201: notifyStatFromKitReceived((KitMilitary.StatFromKit)message);
      return true;
    case 10202: notifyWeaponStatReceived((KitMilitary.WeaponStat)message);
      return true;
    case 10203: notifyKitSettingsReceived((KitMilitary.KitSettings)message);
      return true;
    case 10204: notifyStressBeltSettingsReceived((KitMilitary.StressBeltSettings)message);
      return true;
    case 10205: notifyWeaponSettingsReceived((KitMilitary.WeaponSettings)message);
      return true;
    case 10206: notifyGetAllStatReceived();
      return true;
    case 10207: notifySilentModeReceived((KitMilitary.SilentMode)message);
      return true;
    case 10208: notifyGetActivatedMinesReceived();
      return true;
    case 10209: notifyGetDeactivatedMinesReceived();
      return true;
    case 10210: notifyGetInfoFromHingedBlockReceived((KitMilitary.GetInfoFromHingedBlock)message);
      return true;
    case 10211: notifyIrEmitterSettingsReceived((KitMilitary.IrEmitterSettings)message);
      return true;
    case 10212: notifyIrEmitterStatisticReceived((KitMilitary.IrEmitterStatistic)message);
      return true;
    case 10213: notifySetDamageAppropriateToWeaponReceived((KitMilitary.SetDamageAppropriateToWeapon)message);
      return true;
    case 10214: notifySaveTableDamageReceived();
      return true;
    case 10215: notifySetTypeVehicleReceived((KitMilitary.SetTypeVehicle)message);
      return true;
    case 10216: notifyGetQuantityBlocksPosReceived((KitMilitary.GetQuantityBlocksPos)message);
      return true;
    case 10217: notifyGetBlockByTimePosReceived((KitMilitary.GetBlockByTimePos)message);
      return true;
    case 10218: notifyDeleteBlocksPosReceived((KitMilitary.DeleteBlocksPos)message);
      return true;
    case 10501: notifyGetAllEventsPzrkReceived();
      return true;
    case 10502: notifyPzrkSettingReceived((PZRKMilitary.PzrkSetting)message);
      return true;
    case 10601: notifySettingAntiSniperReceived((AntiSniper.SettingAntiSniper)message);
      return true;
    case 10602: notifyCommandReceived((AntiSniper.Command)message);
      return true;
    case 10603: notifyDefeatTargetReceived();
      return true;
    case 10604: notifyAntisniperOperationTypeReceived((AntiSniper.AntisniperOperationType)message);
      return true;
    case 10605: notifyGetAntisniperOperationTypeReceived();
      return true;
    default:
       return false;
    }
  }

}
