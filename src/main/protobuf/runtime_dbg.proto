syntax="proto3";

// this is for java
option optimize_for = LITE_RUNTIME;
option go_package = "forpost_server";

import weak "forpost.proto";

// Reserve [1200-1300) range
option (c2s_base) = 1200;
option (s2c_base) = 1200;


// Server -> Client messages

// Запрос сервера на проверку стека
message GetStack{
	option(s2c_id) = 1;
}

// Запрос сервера на проверку стека
message GetBuffersState{
	option(s2c_id) = 2;
}


// Client -> Server messages

// Стек заполнен полностью
message StackState{
	option (c2s_id) = 1;
	bool is_corrupted = 1;
}

// Стек заполнен полностью
message StackUsage{
	option (c2s_id) = 2;
	uint32 value = 1;
}

// Проверка в коде
message Assert{
	option (c2s_id) = 3;
	uint32 id = 1;
}

// Ответ серверу о состоянии стека
message BuffersState{
	option (c2s_id) = 4;
	fixed32 state = 1;
}


// Bidirectional messages

message SomeData {
	option (c2s_id) = 5;
	option (s2c_id) = 3;
	uint32 value = 1;
	bytes data = 2;
	bool is_echo = 3;
}

message RuntimeError {
	option (c2s_id) = 6;
	option (s2c_id) = 4;
	
	uint32 current_error = 1;
	uint32 accumulated_error = 2;
	bool is_update = 3;
	uint32 id_message = 4;
}

/*
Логика работы логирования ошибок:
	- при первом подключении устройства к серверу (или после перезагрузки устройства)
	сервер должен запросить у устройства наличие ошибок отправив запрос RuntimeGetErrors;
	- если устройство имеет ошибки, то оно должно ответить сообщением (например, RuntimeSystemSnapshot).
	- после успешной обработки сообщения от устройства сервер должен ответить сообщением RuntimeClearErrorMessages,
	после чего устройство удаляет ошибки с памяти.
*/

//запрос от сервера о наличии ошибок на устройстве
message RuntimeGetErrors {
	option (s2c_id) = 5;
}

//подтверждение от сервера об успешной обработке сообщения об ошибках 
message RuntimeClearErrorMessages {
	option (s2c_id) = 6;
}

enum ExceptionCode{
	EX_CODE_HARD_FAULT = 0;
	EX_CODE_STACK_OVERFLOW = 1;
	EX_CODE_MEM_ALLOCATE_ERROR = 2;
	EX_CODE_FREEZE = 3;
}

//При возникновении критической ошибки(HardFault, stack overflow, memory allocate error...)
//попытатся заполнить и сохранить это сообщение в енергонезависимой памяти 
//и при следующей загрузке системы отправить на сервер.
message RuntimeSystemSnapshot {
	option (c2s_id) = 7;
	
    ExceptionCode exceptionCode = 1; //код ошибки
	
    //device registers
    int32 reg0 = 2;
    int32 reg1 = 3;
    int32 reg2 = 4;
    int32 reg3 = 5;
    int32 reg4 = 6;
    int32 reg5 = 7;
    int32 reg6 = 8;
    int32 reg7 = 9;
    int32 reg8 = 10;
    int32 reg9 = 11;
    int32 reg10 = 12;
    int32 reg11 = 13;
    int32 reg12 = 14;
    int32 sp = 15;
    int32 lr = 16;
    int32 pc = 17;
    int32 psr = 18;
    int32 msp = 19;
    int32 psp = 20;
    int32 aspr = 21;
    int32 ipsr = 22;
    int32 epsr = 23;
    int32 primask = 24;
    int32 faultmask = 25;
    int32 basepri = 26;
    int32 control = 27;
	bytes stackData = 28; //содержание стека начиная с адреса указанного в поле sp этого сообщения
}
